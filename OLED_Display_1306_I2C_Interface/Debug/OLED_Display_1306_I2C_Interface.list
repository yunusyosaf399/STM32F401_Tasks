
OLED_Display_1306_I2C_Interface.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002154  08000194  08000194  00001194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002c10  080022e8  080022e8  000032e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004ef8  08004ef8  0000600c  2**0
                  CONTENTS
  4 .ARM          00000008  08004ef8  08004ef8  00005ef8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004f00  08004f00  0000600c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004f00  08004f00  00005f00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004f04  08004f04  00005f04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08004f08  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000047c  2000000c  08004f14  0000600c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000488  08004f14  00006488  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000600c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00006ec6  00000000  00000000  0000603c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000136e  00000000  00000000  0000cf02  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000758  00000000  00000000  0000e270  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000005aa  00000000  00000000  0000e9c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000015ff  00000000  00000000  0000ef72  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000924b  00000000  00000000  00010571  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00084ee0  00000000  00000000  000197bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0009e69c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001dfc  00000000  00000000  0009e6e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007b  00000000  00000000  000a04dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	@ (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000000c 	.word	0x2000000c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	080022d0 	.word	0x080022d0

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	@ (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	@ (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	@ (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000010 	.word	0x20000010
 80001d0:	080022d0 	.word	0x080022d0

080001d4 <__aeabi_uldivmod>:
 80001d4:	b953      	cbnz	r3, 80001ec <__aeabi_uldivmod+0x18>
 80001d6:	b94a      	cbnz	r2, 80001ec <__aeabi_uldivmod+0x18>
 80001d8:	2900      	cmp	r1, #0
 80001da:	bf08      	it	eq
 80001dc:	2800      	cmpeq	r0, #0
 80001de:	bf1c      	itt	ne
 80001e0:	f04f 31ff 	movne.w	r1, #4294967295
 80001e4:	f04f 30ff 	movne.w	r0, #4294967295
 80001e8:	f000 b96a 	b.w	80004c0 <__aeabi_idiv0>
 80001ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f4:	f000 f806 	bl	8000204 <__udivmoddi4>
 80001f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000200:	b004      	add	sp, #16
 8000202:	4770      	bx	lr

08000204 <__udivmoddi4>:
 8000204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000208:	9d08      	ldr	r5, [sp, #32]
 800020a:	460c      	mov	r4, r1
 800020c:	2b00      	cmp	r3, #0
 800020e:	d14e      	bne.n	80002ae <__udivmoddi4+0xaa>
 8000210:	4694      	mov	ip, r2
 8000212:	458c      	cmp	ip, r1
 8000214:	4686      	mov	lr, r0
 8000216:	fab2 f282 	clz	r2, r2
 800021a:	d962      	bls.n	80002e2 <__udivmoddi4+0xde>
 800021c:	b14a      	cbz	r2, 8000232 <__udivmoddi4+0x2e>
 800021e:	f1c2 0320 	rsb	r3, r2, #32
 8000222:	4091      	lsls	r1, r2
 8000224:	fa20 f303 	lsr.w	r3, r0, r3
 8000228:	fa0c fc02 	lsl.w	ip, ip, r2
 800022c:	4319      	orrs	r1, r3
 800022e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000232:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000236:	fa1f f68c 	uxth.w	r6, ip
 800023a:	fbb1 f4f7 	udiv	r4, r1, r7
 800023e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000242:	fb07 1114 	mls	r1, r7, r4, r1
 8000246:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800024a:	fb04 f106 	mul.w	r1, r4, r6
 800024e:	4299      	cmp	r1, r3
 8000250:	d90a      	bls.n	8000268 <__udivmoddi4+0x64>
 8000252:	eb1c 0303 	adds.w	r3, ip, r3
 8000256:	f104 30ff 	add.w	r0, r4, #4294967295
 800025a:	f080 8112 	bcs.w	8000482 <__udivmoddi4+0x27e>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 810f 	bls.w	8000482 <__udivmoddi4+0x27e>
 8000264:	3c02      	subs	r4, #2
 8000266:	4463      	add	r3, ip
 8000268:	1a59      	subs	r1, r3, r1
 800026a:	fa1f f38e 	uxth.w	r3, lr
 800026e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000272:	fb07 1110 	mls	r1, r7, r0, r1
 8000276:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027a:	fb00 f606 	mul.w	r6, r0, r6
 800027e:	429e      	cmp	r6, r3
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x94>
 8000282:	eb1c 0303 	adds.w	r3, ip, r3
 8000286:	f100 31ff 	add.w	r1, r0, #4294967295
 800028a:	f080 80fc 	bcs.w	8000486 <__udivmoddi4+0x282>
 800028e:	429e      	cmp	r6, r3
 8000290:	f240 80f9 	bls.w	8000486 <__udivmoddi4+0x282>
 8000294:	4463      	add	r3, ip
 8000296:	3802      	subs	r0, #2
 8000298:	1b9b      	subs	r3, r3, r6
 800029a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800029e:	2100      	movs	r1, #0
 80002a0:	b11d      	cbz	r5, 80002aa <__udivmoddi4+0xa6>
 80002a2:	40d3      	lsrs	r3, r2
 80002a4:	2200      	movs	r2, #0
 80002a6:	e9c5 3200 	strd	r3, r2, [r5]
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d905      	bls.n	80002be <__udivmoddi4+0xba>
 80002b2:	b10d      	cbz	r5, 80002b8 <__udivmoddi4+0xb4>
 80002b4:	e9c5 0100 	strd	r0, r1, [r5]
 80002b8:	2100      	movs	r1, #0
 80002ba:	4608      	mov	r0, r1
 80002bc:	e7f5      	b.n	80002aa <__udivmoddi4+0xa6>
 80002be:	fab3 f183 	clz	r1, r3
 80002c2:	2900      	cmp	r1, #0
 80002c4:	d146      	bne.n	8000354 <__udivmoddi4+0x150>
 80002c6:	42a3      	cmp	r3, r4
 80002c8:	d302      	bcc.n	80002d0 <__udivmoddi4+0xcc>
 80002ca:	4290      	cmp	r0, r2
 80002cc:	f0c0 80f0 	bcc.w	80004b0 <__udivmoddi4+0x2ac>
 80002d0:	1a86      	subs	r6, r0, r2
 80002d2:	eb64 0303 	sbc.w	r3, r4, r3
 80002d6:	2001      	movs	r0, #1
 80002d8:	2d00      	cmp	r5, #0
 80002da:	d0e6      	beq.n	80002aa <__udivmoddi4+0xa6>
 80002dc:	e9c5 6300 	strd	r6, r3, [r5]
 80002e0:	e7e3      	b.n	80002aa <__udivmoddi4+0xa6>
 80002e2:	2a00      	cmp	r2, #0
 80002e4:	f040 8090 	bne.w	8000408 <__udivmoddi4+0x204>
 80002e8:	eba1 040c 	sub.w	r4, r1, ip
 80002ec:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f0:	fa1f f78c 	uxth.w	r7, ip
 80002f4:	2101      	movs	r1, #1
 80002f6:	fbb4 f6f8 	udiv	r6, r4, r8
 80002fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002fe:	fb08 4416 	mls	r4, r8, r6, r4
 8000302:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000306:	fb07 f006 	mul.w	r0, r7, r6
 800030a:	4298      	cmp	r0, r3
 800030c:	d908      	bls.n	8000320 <__udivmoddi4+0x11c>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f106 34ff 	add.w	r4, r6, #4294967295
 8000316:	d202      	bcs.n	800031e <__udivmoddi4+0x11a>
 8000318:	4298      	cmp	r0, r3
 800031a:	f200 80cd 	bhi.w	80004b8 <__udivmoddi4+0x2b4>
 800031e:	4626      	mov	r6, r4
 8000320:	1a1c      	subs	r4, r3, r0
 8000322:	fa1f f38e 	uxth.w	r3, lr
 8000326:	fbb4 f0f8 	udiv	r0, r4, r8
 800032a:	fb08 4410 	mls	r4, r8, r0, r4
 800032e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000332:	fb00 f707 	mul.w	r7, r0, r7
 8000336:	429f      	cmp	r7, r3
 8000338:	d908      	bls.n	800034c <__udivmoddi4+0x148>
 800033a:	eb1c 0303 	adds.w	r3, ip, r3
 800033e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000342:	d202      	bcs.n	800034a <__udivmoddi4+0x146>
 8000344:	429f      	cmp	r7, r3
 8000346:	f200 80b0 	bhi.w	80004aa <__udivmoddi4+0x2a6>
 800034a:	4620      	mov	r0, r4
 800034c:	1bdb      	subs	r3, r3, r7
 800034e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000352:	e7a5      	b.n	80002a0 <__udivmoddi4+0x9c>
 8000354:	f1c1 0620 	rsb	r6, r1, #32
 8000358:	408b      	lsls	r3, r1
 800035a:	fa22 f706 	lsr.w	r7, r2, r6
 800035e:	431f      	orrs	r7, r3
 8000360:	fa20 fc06 	lsr.w	ip, r0, r6
 8000364:	fa04 f301 	lsl.w	r3, r4, r1
 8000368:	ea43 030c 	orr.w	r3, r3, ip
 800036c:	40f4      	lsrs	r4, r6
 800036e:	fa00 f801 	lsl.w	r8, r0, r1
 8000372:	0c38      	lsrs	r0, r7, #16
 8000374:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000378:	fbb4 fef0 	udiv	lr, r4, r0
 800037c:	fa1f fc87 	uxth.w	ip, r7
 8000380:	fb00 441e 	mls	r4, r0, lr, r4
 8000384:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000388:	fb0e f90c 	mul.w	r9, lr, ip
 800038c:	45a1      	cmp	r9, r4
 800038e:	fa02 f201 	lsl.w	r2, r2, r1
 8000392:	d90a      	bls.n	80003aa <__udivmoddi4+0x1a6>
 8000394:	193c      	adds	r4, r7, r4
 8000396:	f10e 3aff 	add.w	sl, lr, #4294967295
 800039a:	f080 8084 	bcs.w	80004a6 <__udivmoddi4+0x2a2>
 800039e:	45a1      	cmp	r9, r4
 80003a0:	f240 8081 	bls.w	80004a6 <__udivmoddi4+0x2a2>
 80003a4:	f1ae 0e02 	sub.w	lr, lr, #2
 80003a8:	443c      	add	r4, r7
 80003aa:	eba4 0409 	sub.w	r4, r4, r9
 80003ae:	fa1f f983 	uxth.w	r9, r3
 80003b2:	fbb4 f3f0 	udiv	r3, r4, r0
 80003b6:	fb00 4413 	mls	r4, r0, r3, r4
 80003ba:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003be:	fb03 fc0c 	mul.w	ip, r3, ip
 80003c2:	45a4      	cmp	ip, r4
 80003c4:	d907      	bls.n	80003d6 <__udivmoddi4+0x1d2>
 80003c6:	193c      	adds	r4, r7, r4
 80003c8:	f103 30ff 	add.w	r0, r3, #4294967295
 80003cc:	d267      	bcs.n	800049e <__udivmoddi4+0x29a>
 80003ce:	45a4      	cmp	ip, r4
 80003d0:	d965      	bls.n	800049e <__udivmoddi4+0x29a>
 80003d2:	3b02      	subs	r3, #2
 80003d4:	443c      	add	r4, r7
 80003d6:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003da:	fba0 9302 	umull	r9, r3, r0, r2
 80003de:	eba4 040c 	sub.w	r4, r4, ip
 80003e2:	429c      	cmp	r4, r3
 80003e4:	46ce      	mov	lr, r9
 80003e6:	469c      	mov	ip, r3
 80003e8:	d351      	bcc.n	800048e <__udivmoddi4+0x28a>
 80003ea:	d04e      	beq.n	800048a <__udivmoddi4+0x286>
 80003ec:	b155      	cbz	r5, 8000404 <__udivmoddi4+0x200>
 80003ee:	ebb8 030e 	subs.w	r3, r8, lr
 80003f2:	eb64 040c 	sbc.w	r4, r4, ip
 80003f6:	fa04 f606 	lsl.w	r6, r4, r6
 80003fa:	40cb      	lsrs	r3, r1
 80003fc:	431e      	orrs	r6, r3
 80003fe:	40cc      	lsrs	r4, r1
 8000400:	e9c5 6400 	strd	r6, r4, [r5]
 8000404:	2100      	movs	r1, #0
 8000406:	e750      	b.n	80002aa <__udivmoddi4+0xa6>
 8000408:	f1c2 0320 	rsb	r3, r2, #32
 800040c:	fa20 f103 	lsr.w	r1, r0, r3
 8000410:	fa0c fc02 	lsl.w	ip, ip, r2
 8000414:	fa24 f303 	lsr.w	r3, r4, r3
 8000418:	4094      	lsls	r4, r2
 800041a:	430c      	orrs	r4, r1
 800041c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000420:	fa00 fe02 	lsl.w	lr, r0, r2
 8000424:	fa1f f78c 	uxth.w	r7, ip
 8000428:	fbb3 f0f8 	udiv	r0, r3, r8
 800042c:	fb08 3110 	mls	r1, r8, r0, r3
 8000430:	0c23      	lsrs	r3, r4, #16
 8000432:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000436:	fb00 f107 	mul.w	r1, r0, r7
 800043a:	4299      	cmp	r1, r3
 800043c:	d908      	bls.n	8000450 <__udivmoddi4+0x24c>
 800043e:	eb1c 0303 	adds.w	r3, ip, r3
 8000442:	f100 36ff 	add.w	r6, r0, #4294967295
 8000446:	d22c      	bcs.n	80004a2 <__udivmoddi4+0x29e>
 8000448:	4299      	cmp	r1, r3
 800044a:	d92a      	bls.n	80004a2 <__udivmoddi4+0x29e>
 800044c:	3802      	subs	r0, #2
 800044e:	4463      	add	r3, ip
 8000450:	1a5b      	subs	r3, r3, r1
 8000452:	b2a4      	uxth	r4, r4
 8000454:	fbb3 f1f8 	udiv	r1, r3, r8
 8000458:	fb08 3311 	mls	r3, r8, r1, r3
 800045c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000460:	fb01 f307 	mul.w	r3, r1, r7
 8000464:	42a3      	cmp	r3, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x276>
 8000468:	eb1c 0404 	adds.w	r4, ip, r4
 800046c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000470:	d213      	bcs.n	800049a <__udivmoddi4+0x296>
 8000472:	42a3      	cmp	r3, r4
 8000474:	d911      	bls.n	800049a <__udivmoddi4+0x296>
 8000476:	3902      	subs	r1, #2
 8000478:	4464      	add	r4, ip
 800047a:	1ae4      	subs	r4, r4, r3
 800047c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000480:	e739      	b.n	80002f6 <__udivmoddi4+0xf2>
 8000482:	4604      	mov	r4, r0
 8000484:	e6f0      	b.n	8000268 <__udivmoddi4+0x64>
 8000486:	4608      	mov	r0, r1
 8000488:	e706      	b.n	8000298 <__udivmoddi4+0x94>
 800048a:	45c8      	cmp	r8, r9
 800048c:	d2ae      	bcs.n	80003ec <__udivmoddi4+0x1e8>
 800048e:	ebb9 0e02 	subs.w	lr, r9, r2
 8000492:	eb63 0c07 	sbc.w	ip, r3, r7
 8000496:	3801      	subs	r0, #1
 8000498:	e7a8      	b.n	80003ec <__udivmoddi4+0x1e8>
 800049a:	4631      	mov	r1, r6
 800049c:	e7ed      	b.n	800047a <__udivmoddi4+0x276>
 800049e:	4603      	mov	r3, r0
 80004a0:	e799      	b.n	80003d6 <__udivmoddi4+0x1d2>
 80004a2:	4630      	mov	r0, r6
 80004a4:	e7d4      	b.n	8000450 <__udivmoddi4+0x24c>
 80004a6:	46d6      	mov	lr, sl
 80004a8:	e77f      	b.n	80003aa <__udivmoddi4+0x1a6>
 80004aa:	4463      	add	r3, ip
 80004ac:	3802      	subs	r0, #2
 80004ae:	e74d      	b.n	800034c <__udivmoddi4+0x148>
 80004b0:	4606      	mov	r6, r0
 80004b2:	4623      	mov	r3, r4
 80004b4:	4608      	mov	r0, r1
 80004b6:	e70f      	b.n	80002d8 <__udivmoddi4+0xd4>
 80004b8:	3e02      	subs	r6, #2
 80004ba:	4463      	add	r3, ip
 80004bc:	e730      	b.n	8000320 <__udivmoddi4+0x11c>
 80004be:	bf00      	nop

080004c0 <__aeabi_idiv0>:
 80004c0:	4770      	bx	lr
 80004c2:	bf00      	nop

080004c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004c4:	b580      	push	{r7, lr}
 80004c6:	b082      	sub	sp, #8
 80004c8:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004ca:	f000 fcad 	bl	8000e28 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004ce:	f000 f8c7 	bl	8000660 <SystemClock_Config>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  /* USER CODE BEGIN 2 */

  SSD1306_Init();
 80004d2:	f000 f92b 	bl	800072c <SSD1306_Init>
  SSD1306_DrawBitmap(0, 0, logo, 128, 64, 1);
 80004d6:	2301      	movs	r3, #1
 80004d8:	9301      	str	r3, [sp, #4]
 80004da:	2340      	movs	r3, #64	@ 0x40
 80004dc:	9300      	str	r3, [sp, #0]
 80004de:	2380      	movs	r3, #128	@ 0x80
 80004e0:	4a54      	ldr	r2, [pc, #336]	@ (8000634 <main+0x170>)
 80004e2:	2100      	movs	r1, #0
 80004e4:	2000      	movs	r0, #0
 80004e6:	f000 fb00 	bl	8000aea <SSD1306_DrawBitmap>
  SSD1306_UpdateScreen(); // update screen
 80004ea:	f000 f9e3 	bl	80008b4 <SSD1306_UpdateScreen>

  SSD1306_ScrollRight(0x00, 0x07);    // scroll entire screen (Page0 to Page7) right
 80004ee:	2107      	movs	r1, #7
 80004f0:	2000      	movs	r0, #0
 80004f2:	f000 fa85 	bl	8000a00 <SSD1306_ScrollRight>
  HAL_Delay (5000);
 80004f6:	f241 3088 	movw	r0, #5000	@ 0x1388
 80004fa:	f000 fd07 	bl	8000f0c <HAL_Delay>
  SSD1306_Stopscroll();
 80004fe:	f000 faeb 	bl	8000ad8 <SSD1306_Stopscroll>

  SSD1306_ScrollLeft(0x00, 0x07);    // scroll entire screen (Page0 to Page7) right
 8000502:	2107      	movs	r1, #7
 8000504:	2000      	movs	r0, #0
 8000506:	f000 fab1 	bl	8000a6c <SSD1306_ScrollLeft>
  HAL_Delay (5000);
 800050a:	f241 3088 	movw	r0, #5000	@ 0x1388
 800050e:	f000 fcfd 	bl	8000f0c <HAL_Delay>
  SSD1306_Stopscroll();
 8000512:	f000 fae1 	bl	8000ad8 <SSD1306_Stopscroll>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  //// HORSE ANIMATION START //////

	  SSD1306_Clear();
 8000516:	f000 fb50 	bl	8000bba <SSD1306_Clear>
	  SSD1306_DrawBitmap(0,0,horse1,128,64,1);
 800051a:	2301      	movs	r3, #1
 800051c:	9301      	str	r3, [sp, #4]
 800051e:	2340      	movs	r3, #64	@ 0x40
 8000520:	9300      	str	r3, [sp, #0]
 8000522:	2380      	movs	r3, #128	@ 0x80
 8000524:	4a44      	ldr	r2, [pc, #272]	@ (8000638 <main+0x174>)
 8000526:	2100      	movs	r1, #0
 8000528:	2000      	movs	r0, #0
 800052a:	f000 fade 	bl	8000aea <SSD1306_DrawBitmap>
	  SSD1306_UpdateScreen();
 800052e:	f000 f9c1 	bl	80008b4 <SSD1306_UpdateScreen>

	  SSD1306_Clear();
 8000532:	f000 fb42 	bl	8000bba <SSD1306_Clear>
	  SSD1306_DrawBitmap(0,0,horse2,128,64,1);
 8000536:	2301      	movs	r3, #1
 8000538:	9301      	str	r3, [sp, #4]
 800053a:	2340      	movs	r3, #64	@ 0x40
 800053c:	9300      	str	r3, [sp, #0]
 800053e:	2380      	movs	r3, #128	@ 0x80
 8000540:	4a3e      	ldr	r2, [pc, #248]	@ (800063c <main+0x178>)
 8000542:	2100      	movs	r1, #0
 8000544:	2000      	movs	r0, #0
 8000546:	f000 fad0 	bl	8000aea <SSD1306_DrawBitmap>
	  SSD1306_UpdateScreen();
 800054a:	f000 f9b3 	bl	80008b4 <SSD1306_UpdateScreen>

	  SSD1306_Clear();
 800054e:	f000 fb34 	bl	8000bba <SSD1306_Clear>
	  SSD1306_DrawBitmap(0,0,horse3,128,64,1);
 8000552:	2301      	movs	r3, #1
 8000554:	9301      	str	r3, [sp, #4]
 8000556:	2340      	movs	r3, #64	@ 0x40
 8000558:	9300      	str	r3, [sp, #0]
 800055a:	2380      	movs	r3, #128	@ 0x80
 800055c:	4a38      	ldr	r2, [pc, #224]	@ (8000640 <main+0x17c>)
 800055e:	2100      	movs	r1, #0
 8000560:	2000      	movs	r0, #0
 8000562:	f000 fac2 	bl	8000aea <SSD1306_DrawBitmap>
	  SSD1306_UpdateScreen();
 8000566:	f000 f9a5 	bl	80008b4 <SSD1306_UpdateScreen>

	  SSD1306_Clear();
 800056a:	f000 fb26 	bl	8000bba <SSD1306_Clear>
	  SSD1306_DrawBitmap(0,0,horse4,128,64,1);
 800056e:	2301      	movs	r3, #1
 8000570:	9301      	str	r3, [sp, #4]
 8000572:	2340      	movs	r3, #64	@ 0x40
 8000574:	9300      	str	r3, [sp, #0]
 8000576:	2380      	movs	r3, #128	@ 0x80
 8000578:	4a32      	ldr	r2, [pc, #200]	@ (8000644 <main+0x180>)
 800057a:	2100      	movs	r1, #0
 800057c:	2000      	movs	r0, #0
 800057e:	f000 fab4 	bl	8000aea <SSD1306_DrawBitmap>
	  SSD1306_UpdateScreen();
 8000582:	f000 f997 	bl	80008b4 <SSD1306_UpdateScreen>

	  SSD1306_Clear();
 8000586:	f000 fb18 	bl	8000bba <SSD1306_Clear>
	  SSD1306_DrawBitmap(0,0,horse5,128,64,1);
 800058a:	2301      	movs	r3, #1
 800058c:	9301      	str	r3, [sp, #4]
 800058e:	2340      	movs	r3, #64	@ 0x40
 8000590:	9300      	str	r3, [sp, #0]
 8000592:	2380      	movs	r3, #128	@ 0x80
 8000594:	4a2c      	ldr	r2, [pc, #176]	@ (8000648 <main+0x184>)
 8000596:	2100      	movs	r1, #0
 8000598:	2000      	movs	r0, #0
 800059a:	f000 faa6 	bl	8000aea <SSD1306_DrawBitmap>
	  SSD1306_UpdateScreen();
 800059e:	f000 f989 	bl	80008b4 <SSD1306_UpdateScreen>

	  SSD1306_Clear();
 80005a2:	f000 fb0a 	bl	8000bba <SSD1306_Clear>
	  SSD1306_DrawBitmap(0,0,horse6,128,64,1);
 80005a6:	2301      	movs	r3, #1
 80005a8:	9301      	str	r3, [sp, #4]
 80005aa:	2340      	movs	r3, #64	@ 0x40
 80005ac:	9300      	str	r3, [sp, #0]
 80005ae:	2380      	movs	r3, #128	@ 0x80
 80005b0:	4a26      	ldr	r2, [pc, #152]	@ (800064c <main+0x188>)
 80005b2:	2100      	movs	r1, #0
 80005b4:	2000      	movs	r0, #0
 80005b6:	f000 fa98 	bl	8000aea <SSD1306_DrawBitmap>
	  SSD1306_UpdateScreen();
 80005ba:	f000 f97b 	bl	80008b4 <SSD1306_UpdateScreen>


	  SSD1306_Clear();
 80005be:	f000 fafc 	bl	8000bba <SSD1306_Clear>
	  SSD1306_DrawBitmap(0,0,horse7,128,64,1);
 80005c2:	2301      	movs	r3, #1
 80005c4:	9301      	str	r3, [sp, #4]
 80005c6:	2340      	movs	r3, #64	@ 0x40
 80005c8:	9300      	str	r3, [sp, #0]
 80005ca:	2380      	movs	r3, #128	@ 0x80
 80005cc:	4a20      	ldr	r2, [pc, #128]	@ (8000650 <main+0x18c>)
 80005ce:	2100      	movs	r1, #0
 80005d0:	2000      	movs	r0, #0
 80005d2:	f000 fa8a 	bl	8000aea <SSD1306_DrawBitmap>
	  SSD1306_UpdateScreen();
 80005d6:	f000 f96d 	bl	80008b4 <SSD1306_UpdateScreen>

	  SSD1306_Clear();
 80005da:	f000 faee 	bl	8000bba <SSD1306_Clear>
	  SSD1306_DrawBitmap(0,0,horse8,128,64,1);
 80005de:	2301      	movs	r3, #1
 80005e0:	9301      	str	r3, [sp, #4]
 80005e2:	2340      	movs	r3, #64	@ 0x40
 80005e4:	9300      	str	r3, [sp, #0]
 80005e6:	2380      	movs	r3, #128	@ 0x80
 80005e8:	4a1a      	ldr	r2, [pc, #104]	@ (8000654 <main+0x190>)
 80005ea:	2100      	movs	r1, #0
 80005ec:	2000      	movs	r0, #0
 80005ee:	f000 fa7c 	bl	8000aea <SSD1306_DrawBitmap>
	  SSD1306_UpdateScreen();
 80005f2:	f000 f95f 	bl	80008b4 <SSD1306_UpdateScreen>


	  SSD1306_Clear();
 80005f6:	f000 fae0 	bl	8000bba <SSD1306_Clear>
	  SSD1306_DrawBitmap(0,0,horse9,128,64,1);
 80005fa:	2301      	movs	r3, #1
 80005fc:	9301      	str	r3, [sp, #4]
 80005fe:	2340      	movs	r3, #64	@ 0x40
 8000600:	9300      	str	r3, [sp, #0]
 8000602:	2380      	movs	r3, #128	@ 0x80
 8000604:	4a14      	ldr	r2, [pc, #80]	@ (8000658 <main+0x194>)
 8000606:	2100      	movs	r1, #0
 8000608:	2000      	movs	r0, #0
 800060a:	f000 fa6e 	bl	8000aea <SSD1306_DrawBitmap>
	  SSD1306_UpdateScreen();
 800060e:	f000 f951 	bl	80008b4 <SSD1306_UpdateScreen>


	  SSD1306_Clear();
 8000612:	f000 fad2 	bl	8000bba <SSD1306_Clear>
	  SSD1306_DrawBitmap(0,0,horse10,128,64,1);
 8000616:	2301      	movs	r3, #1
 8000618:	9301      	str	r3, [sp, #4]
 800061a:	2340      	movs	r3, #64	@ 0x40
 800061c:	9300      	str	r3, [sp, #0]
 800061e:	2380      	movs	r3, #128	@ 0x80
 8000620:	4a0e      	ldr	r2, [pc, #56]	@ (800065c <main+0x198>)
 8000622:	2100      	movs	r1, #0
 8000624:	2000      	movs	r0, #0
 8000626:	f000 fa60 	bl	8000aea <SSD1306_DrawBitmap>
	  SSD1306_UpdateScreen();
 800062a:	f000 f943 	bl	80008b4 <SSD1306_UpdateScreen>
	  SSD1306_Clear();
 800062e:	bf00      	nop
 8000630:	e771      	b.n	8000516 <main+0x52>
 8000632:	bf00      	nop
 8000634:	080022e8 	.word	0x080022e8
 8000638:	080026e8 	.word	0x080026e8
 800063c:	08002ae8 	.word	0x08002ae8
 8000640:	08002ee8 	.word	0x08002ee8
 8000644:	080032e8 	.word	0x080032e8
 8000648:	080036e8 	.word	0x080036e8
 800064c:	08003ae8 	.word	0x08003ae8
 8000650:	08003ee8 	.word	0x08003ee8
 8000654:	080042e8 	.word	0x080042e8
 8000658:	080046e8 	.word	0x080046e8
 800065c:	08004ae8 	.word	0x08004ae8

08000660 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	b094      	sub	sp, #80	@ 0x50
 8000664:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000666:	f107 0320 	add.w	r3, r7, #32
 800066a:	2230      	movs	r2, #48	@ 0x30
 800066c:	2100      	movs	r1, #0
 800066e:	4618      	mov	r0, r3
 8000670:	f001 fe02 	bl	8002278 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000674:	f107 030c 	add.w	r3, r7, #12
 8000678:	2200      	movs	r2, #0
 800067a:	601a      	str	r2, [r3, #0]
 800067c:	605a      	str	r2, [r3, #4]
 800067e:	609a      	str	r2, [r3, #8]
 8000680:	60da      	str	r2, [r3, #12]
 8000682:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000684:	2300      	movs	r3, #0
 8000686:	60bb      	str	r3, [r7, #8]
 8000688:	4b23      	ldr	r3, [pc, #140]	@ (8000718 <SystemClock_Config+0xb8>)
 800068a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800068c:	4a22      	ldr	r2, [pc, #136]	@ (8000718 <SystemClock_Config+0xb8>)
 800068e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000692:	6413      	str	r3, [r2, #64]	@ 0x40
 8000694:	4b20      	ldr	r3, [pc, #128]	@ (8000718 <SystemClock_Config+0xb8>)
 8000696:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000698:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800069c:	60bb      	str	r3, [r7, #8]
 800069e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80006a0:	2300      	movs	r3, #0
 80006a2:	607b      	str	r3, [r7, #4]
 80006a4:	4b1d      	ldr	r3, [pc, #116]	@ (800071c <SystemClock_Config+0xbc>)
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80006ac:	4a1b      	ldr	r2, [pc, #108]	@ (800071c <SystemClock_Config+0xbc>)
 80006ae:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80006b2:	6013      	str	r3, [r2, #0]
 80006b4:	4b19      	ldr	r3, [pc, #100]	@ (800071c <SystemClock_Config+0xbc>)
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80006bc:	607b      	str	r3, [r7, #4]
 80006be:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006c0:	2302      	movs	r3, #2
 80006c2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006c4:	2301      	movs	r3, #1
 80006c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006c8:	2310      	movs	r3, #16
 80006ca:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80006cc:	2300      	movs	r3, #0
 80006ce:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006d0:	f107 0320 	add.w	r3, r7, #32
 80006d4:	4618      	mov	r0, r3
 80006d6:	f001 f9ab 	bl	8001a30 <HAL_RCC_OscConfig>
 80006da:	4603      	mov	r3, r0
 80006dc:	2b00      	cmp	r3, #0
 80006de:	d001      	beq.n	80006e4 <SystemClock_Config+0x84>
  {
    Error_Handler();
 80006e0:	f000 f81e 	bl	8000720 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006e4:	230f      	movs	r3, #15
 80006e6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80006e8:	2300      	movs	r3, #0
 80006ea:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006ec:	2300      	movs	r3, #0
 80006ee:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006f0:	2300      	movs	r3, #0
 80006f2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006f4:	2300      	movs	r3, #0
 80006f6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80006f8:	f107 030c 	add.w	r3, r7, #12
 80006fc:	2100      	movs	r1, #0
 80006fe:	4618      	mov	r0, r3
 8000700:	f001 fc0e 	bl	8001f20 <HAL_RCC_ClockConfig>
 8000704:	4603      	mov	r3, r0
 8000706:	2b00      	cmp	r3, #0
 8000708:	d001      	beq.n	800070e <SystemClock_Config+0xae>
  {
    Error_Handler();
 800070a:	f000 f809 	bl	8000720 <Error_Handler>
  }
}
 800070e:	bf00      	nop
 8000710:	3750      	adds	r7, #80	@ 0x50
 8000712:	46bd      	mov	sp, r7
 8000714:	bd80      	pop	{r7, pc}
 8000716:	bf00      	nop
 8000718:	40023800 	.word	0x40023800
 800071c:	40007000 	.word	0x40007000

08000720 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000720:	b480      	push	{r7}
 8000722:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000724:	b672      	cpsid	i
}
 8000726:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000728:	bf00      	nop
 800072a:	e7fd      	b.n	8000728 <Error_Handler+0x8>

0800072c <SSD1306_Init>:

/* Private variable */
static SSD1306_t SSD1306;


uint8_t SSD1306_Init(void) {
 800072c:	b580      	push	{r7, lr}
 800072e:	b082      	sub	sp, #8
 8000730:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 8000732:	f000 fa4b 	bl	8000bcc <ssd1306_I2C_Init>
	
	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(SSD1306_I2C, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 8000736:	f644 6320 	movw	r3, #20000	@ 0x4e20
 800073a:	2201      	movs	r2, #1
 800073c:	2178      	movs	r1, #120	@ 0x78
 800073e:	485b      	ldr	r0, [pc, #364]	@ (80008ac <SSD1306_Init+0x180>)
 8000740:	f000 fdec 	bl	800131c <HAL_I2C_IsDeviceReady>
 8000744:	4603      	mov	r3, r0
 8000746:	2b00      	cmp	r3, #0
 8000748:	d001      	beq.n	800074e <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 800074a:	2300      	movs	r3, #0
 800074c:	e0a9      	b.n	80008a2 <SSD1306_Init+0x176>
	}
	
	/* A little delay */
	uint32_t p = 2500;
 800074e:	f640 13c4 	movw	r3, #2500	@ 0x9c4
 8000752:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000754:	e002      	b.n	800075c <SSD1306_Init+0x30>
		p--;
 8000756:	687b      	ldr	r3, [r7, #4]
 8000758:	3b01      	subs	r3, #1
 800075a:	607b      	str	r3, [r7, #4]
	while(p>0)
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	2b00      	cmp	r3, #0
 8000760:	d1f9      	bne.n	8000756 <SSD1306_Init+0x2a>
	
	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 8000762:	22ae      	movs	r2, #174	@ 0xae
 8000764:	2100      	movs	r1, #0
 8000766:	2078      	movs	r0, #120	@ 0x78
 8000768:	f000 faac 	bl	8000cc4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode   
 800076c:	2220      	movs	r2, #32
 800076e:	2100      	movs	r1, #0
 8000770:	2078      	movs	r0, #120	@ 0x78
 8000772:	f000 faa7 	bl	8000cc4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8000776:	2210      	movs	r2, #16
 8000778:	2100      	movs	r1, #0
 800077a:	2078      	movs	r0, #120	@ 0x78
 800077c:	f000 faa2 	bl	8000cc4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8000780:	22b0      	movs	r2, #176	@ 0xb0
 8000782:	2100      	movs	r1, #0
 8000784:	2078      	movs	r0, #120	@ 0x78
 8000786:	f000 fa9d 	bl	8000cc4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 800078a:	22c8      	movs	r2, #200	@ 0xc8
 800078c:	2100      	movs	r1, #0
 800078e:	2078      	movs	r0, #120	@ 0x78
 8000790:	f000 fa98 	bl	8000cc4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 8000794:	2200      	movs	r2, #0
 8000796:	2100      	movs	r1, #0
 8000798:	2078      	movs	r0, #120	@ 0x78
 800079a:	f000 fa93 	bl	8000cc4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 800079e:	2210      	movs	r2, #16
 80007a0:	2100      	movs	r1, #0
 80007a2:	2078      	movs	r0, #120	@ 0x78
 80007a4:	f000 fa8e 	bl	8000cc4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 80007a8:	2240      	movs	r2, #64	@ 0x40
 80007aa:	2100      	movs	r1, #0
 80007ac:	2078      	movs	r0, #120	@ 0x78
 80007ae:	f000 fa89 	bl	8000cc4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 80007b2:	2281      	movs	r2, #129	@ 0x81
 80007b4:	2100      	movs	r1, #0
 80007b6:	2078      	movs	r0, #120	@ 0x78
 80007b8:	f000 fa84 	bl	8000cc4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 80007bc:	22ff      	movs	r2, #255	@ 0xff
 80007be:	2100      	movs	r1, #0
 80007c0:	2078      	movs	r0, #120	@ 0x78
 80007c2:	f000 fa7f 	bl	8000cc4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 80007c6:	22a1      	movs	r2, #161	@ 0xa1
 80007c8:	2100      	movs	r1, #0
 80007ca:	2078      	movs	r0, #120	@ 0x78
 80007cc:	f000 fa7a 	bl	8000cc4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 80007d0:	22a6      	movs	r2, #166	@ 0xa6
 80007d2:	2100      	movs	r1, #0
 80007d4:	2078      	movs	r0, #120	@ 0x78
 80007d6:	f000 fa75 	bl	8000cc4 <ssd1306_I2C_Write>
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
	SSD1306_WRITECOMMAND(0xFF);
#else
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 80007da:	22a8      	movs	r2, #168	@ 0xa8
 80007dc:	2100      	movs	r1, #0
 80007de:	2078      	movs	r0, #120	@ 0x78
 80007e0:	f000 fa70 	bl	8000cc4 <ssd1306_I2C_Write>
#endif

#if (SSD1306_HEIGHT == 32)
	SSD1306_WRITECOMMAND(0x1F); //
#elif (SSD1306_HEIGHT == 64)
	SSD1306_WRITECOMMAND(0x3F); //
 80007e4:	223f      	movs	r2, #63	@ 0x3f
 80007e6:	2100      	movs	r1, #0
 80007e8:	2078      	movs	r0, #120	@ 0x78
 80007ea:	f000 fa6b 	bl	8000cc4 <ssd1306_I2C_Write>
#elif (SSD1306_HEIGHT == 128)
	SSD1306_WRITECOMMAND(0x3F); // Seems to work for 128px high displays too.
#endif
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 80007ee:	22a4      	movs	r2, #164	@ 0xa4
 80007f0:	2100      	movs	r1, #0
 80007f2:	2078      	movs	r0, #120	@ 0x78
 80007f4:	f000 fa66 	bl	8000cc4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 80007f8:	22d3      	movs	r2, #211	@ 0xd3
 80007fa:	2100      	movs	r1, #0
 80007fc:	2078      	movs	r0, #120	@ 0x78
 80007fe:	f000 fa61 	bl	8000cc4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 8000802:	2200      	movs	r2, #0
 8000804:	2100      	movs	r1, #0
 8000806:	2078      	movs	r0, #120	@ 0x78
 8000808:	f000 fa5c 	bl	8000cc4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 800080c:	22d5      	movs	r2, #213	@ 0xd5
 800080e:	2100      	movs	r1, #0
 8000810:	2078      	movs	r0, #120	@ 0x78
 8000812:	f000 fa57 	bl	8000cc4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 8000816:	22f0      	movs	r2, #240	@ 0xf0
 8000818:	2100      	movs	r1, #0
 800081a:	2078      	movs	r0, #120	@ 0x78
 800081c:	f000 fa52 	bl	8000cc4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 8000820:	22d9      	movs	r2, #217	@ 0xd9
 8000822:	2100      	movs	r1, #0
 8000824:	2078      	movs	r0, #120	@ 0x78
 8000826:	f000 fa4d 	bl	8000cc4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 800082a:	2222      	movs	r2, #34	@ 0x22
 800082c:	2100      	movs	r1, #0
 800082e:	2078      	movs	r0, #120	@ 0x78
 8000830:	f000 fa48 	bl	8000cc4 <ssd1306_I2C_Write>

	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 8000834:	22da      	movs	r2, #218	@ 0xda
 8000836:	2100      	movs	r1, #0
 8000838:	2078      	movs	r0, #120	@ 0x78
 800083a:	f000 fa43 	bl	8000cc4 <ssd1306_I2C_Write>
#if (SSD1306_HEIGHT == 32)
	SSD1306_WRITECOMMAND(0x02);
#elif (SSD1306_HEIGHT == 64)
	SSD1306_WRITECOMMAND(0x12);
 800083e:	2212      	movs	r2, #18
 8000840:	2100      	movs	r1, #0
 8000842:	2078      	movs	r0, #120	@ 0x78
 8000844:	f000 fa3e 	bl	8000cc4 <ssd1306_I2C_Write>
#elif (SSD1306_HEIGHT == 128)
	SSD1306_WRITECOMMAND(0x12);
#endif

	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 8000848:	22db      	movs	r2, #219	@ 0xdb
 800084a:	2100      	movs	r1, #0
 800084c:	2078      	movs	r0, #120	@ 0x78
 800084e:	f000 fa39 	bl	8000cc4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 8000852:	2220      	movs	r2, #32
 8000854:	2100      	movs	r1, #0
 8000856:	2078      	movs	r0, #120	@ 0x78
 8000858:	f000 fa34 	bl	8000cc4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 800085c:	228d      	movs	r2, #141	@ 0x8d
 800085e:	2100      	movs	r1, #0
 8000860:	2078      	movs	r0, #120	@ 0x78
 8000862:	f000 fa2f 	bl	8000cc4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 8000866:	2214      	movs	r2, #20
 8000868:	2100      	movs	r1, #0
 800086a:	2078      	movs	r0, #120	@ 0x78
 800086c:	f000 fa2a 	bl	8000cc4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 8000870:	22af      	movs	r2, #175	@ 0xaf
 8000872:	2100      	movs	r1, #0
 8000874:	2078      	movs	r0, #120	@ 0x78
 8000876:	f000 fa25 	bl	8000cc4 <ssd1306_I2C_Write>
	

	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 800087a:	222e      	movs	r2, #46	@ 0x2e
 800087c:	2100      	movs	r1, #0
 800087e:	2078      	movs	r0, #120	@ 0x78
 8000880:	f000 fa20 	bl	8000cc4 <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 8000884:	2000      	movs	r0, #0
 8000886:	f000 f843 	bl	8000910 <SSD1306_Fill>
	
	/* Update screen */
	SSD1306_UpdateScreen();
 800088a:	f000 f813 	bl	80008b4 <SSD1306_UpdateScreen>
	
	/* Set default values */
	SSD1306.CurrentX = 0;
 800088e:	4b08      	ldr	r3, [pc, #32]	@ (80008b0 <SSD1306_Init+0x184>)
 8000890:	2200      	movs	r2, #0
 8000892:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8000894:	4b06      	ldr	r3, [pc, #24]	@ (80008b0 <SSD1306_Init+0x184>)
 8000896:	2200      	movs	r2, #0
 8000898:	805a      	strh	r2, [r3, #2]
	
	/* Initialized OK */
	SSD1306.Initialized = 1;
 800089a:	4b05      	ldr	r3, [pc, #20]	@ (80008b0 <SSD1306_Init+0x184>)
 800089c:	2201      	movs	r2, #1
 800089e:	715a      	strb	r2, [r3, #5]
	
	/* Return OK */
	return 1;
 80008a0:	2301      	movs	r3, #1
}
 80008a2:	4618      	mov	r0, r3
 80008a4:	3708      	adds	r7, #8
 80008a6:	46bd      	mov	sp, r7
 80008a8:	bd80      	pop	{r7, pc}
 80008aa:	bf00      	nop
 80008ac:	20000028 	.word	0x20000028
 80008b0:	2000047c 	.word	0x2000047c

080008b4 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b082      	sub	sp, #8
 80008b8:	af00      	add	r7, sp, #0
	uint8_t m;
	
	for (m = 0; m < 8; m++) {
 80008ba:	2300      	movs	r3, #0
 80008bc:	71fb      	strb	r3, [r7, #7]
 80008be:	e01d      	b.n	80008fc <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 80008c0:	79fb      	ldrb	r3, [r7, #7]
 80008c2:	3b50      	subs	r3, #80	@ 0x50
 80008c4:	b2db      	uxtb	r3, r3
 80008c6:	461a      	mov	r2, r3
 80008c8:	2100      	movs	r1, #0
 80008ca:	2078      	movs	r0, #120	@ 0x78
 80008cc:	f000 f9fa 	bl	8000cc4 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 80008d0:	2200      	movs	r2, #0
 80008d2:	2100      	movs	r1, #0
 80008d4:	2078      	movs	r0, #120	@ 0x78
 80008d6:	f000 f9f5 	bl	8000cc4 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 80008da:	2210      	movs	r2, #16
 80008dc:	2100      	movs	r1, #0
 80008de:	2078      	movs	r0, #120	@ 0x78
 80008e0:	f000 f9f0 	bl	8000cc4 <ssd1306_I2C_Write>
		
		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 80008e4:	79fb      	ldrb	r3, [r7, #7]
 80008e6:	01db      	lsls	r3, r3, #7
 80008e8:	4a08      	ldr	r2, [pc, #32]	@ (800090c <SSD1306_UpdateScreen+0x58>)
 80008ea:	441a      	add	r2, r3
 80008ec:	2380      	movs	r3, #128	@ 0x80
 80008ee:	2140      	movs	r1, #64	@ 0x40
 80008f0:	2078      	movs	r0, #120	@ 0x78
 80008f2:	f000 f981 	bl	8000bf8 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 80008f6:	79fb      	ldrb	r3, [r7, #7]
 80008f8:	3301      	adds	r3, #1
 80008fa:	71fb      	strb	r3, [r7, #7]
 80008fc:	79fb      	ldrb	r3, [r7, #7]
 80008fe:	2b07      	cmp	r3, #7
 8000900:	d9de      	bls.n	80008c0 <SSD1306_UpdateScreen+0xc>
	}
}
 8000902:	bf00      	nop
 8000904:	bf00      	nop
 8000906:	3708      	adds	r7, #8
 8000908:	46bd      	mov	sp, r7
 800090a:	bd80      	pop	{r7, pc}
 800090c:	2000007c 	.word	0x2000007c

08000910 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 8000910:	b580      	push	{r7, lr}
 8000912:	b082      	sub	sp, #8
 8000914:	af00      	add	r7, sp, #0
 8000916:	4603      	mov	r3, r0
 8000918:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 800091a:	79fb      	ldrb	r3, [r7, #7]
 800091c:	2b00      	cmp	r3, #0
 800091e:	d101      	bne.n	8000924 <SSD1306_Fill+0x14>
 8000920:	2300      	movs	r3, #0
 8000922:	e000      	b.n	8000926 <SSD1306_Fill+0x16>
 8000924:	23ff      	movs	r3, #255	@ 0xff
 8000926:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800092a:	4619      	mov	r1, r3
 800092c:	4803      	ldr	r0, [pc, #12]	@ (800093c <SSD1306_Fill+0x2c>)
 800092e:	f001 fca3 	bl	8002278 <memset>
}
 8000932:	bf00      	nop
 8000934:	3708      	adds	r7, #8
 8000936:	46bd      	mov	sp, r7
 8000938:	bd80      	pop	{r7, pc}
 800093a:	bf00      	nop
 800093c:	2000007c 	.word	0x2000007c

08000940 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 8000940:	b480      	push	{r7}
 8000942:	b083      	sub	sp, #12
 8000944:	af00      	add	r7, sp, #0
 8000946:	4603      	mov	r3, r0
 8000948:	80fb      	strh	r3, [r7, #6]
 800094a:	460b      	mov	r3, r1
 800094c:	80bb      	strh	r3, [r7, #4]
 800094e:	4613      	mov	r3, r2
 8000950:	70fb      	strb	r3, [r7, #3]
	if (
 8000952:	88fb      	ldrh	r3, [r7, #6]
 8000954:	2b7f      	cmp	r3, #127	@ 0x7f
 8000956:	d848      	bhi.n	80009ea <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 8000958:	88bb      	ldrh	r3, [r7, #4]
 800095a:	2b3f      	cmp	r3, #63	@ 0x3f
 800095c:	d845      	bhi.n	80009ea <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}
	
	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 800095e:	4b26      	ldr	r3, [pc, #152]	@ (80009f8 <SSD1306_DrawPixel+0xb8>)
 8000960:	791b      	ldrb	r3, [r3, #4]
 8000962:	2b00      	cmp	r3, #0
 8000964:	d006      	beq.n	8000974 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 8000966:	78fb      	ldrb	r3, [r7, #3]
 8000968:	2b00      	cmp	r3, #0
 800096a:	bf0c      	ite	eq
 800096c:	2301      	moveq	r3, #1
 800096e:	2300      	movne	r3, #0
 8000970:	b2db      	uxtb	r3, r3
 8000972:	70fb      	strb	r3, [r7, #3]
	}
	
	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 8000974:	78fb      	ldrb	r3, [r7, #3]
 8000976:	2b01      	cmp	r3, #1
 8000978:	d11a      	bne.n	80009b0 <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 800097a:	88fa      	ldrh	r2, [r7, #6]
 800097c:	88bb      	ldrh	r3, [r7, #4]
 800097e:	08db      	lsrs	r3, r3, #3
 8000980:	b298      	uxth	r0, r3
 8000982:	4603      	mov	r3, r0
 8000984:	01db      	lsls	r3, r3, #7
 8000986:	4413      	add	r3, r2
 8000988:	4a1c      	ldr	r2, [pc, #112]	@ (80009fc <SSD1306_DrawPixel+0xbc>)
 800098a:	5cd3      	ldrb	r3, [r2, r3]
 800098c:	b25a      	sxtb	r2, r3
 800098e:	88bb      	ldrh	r3, [r7, #4]
 8000990:	f003 0307 	and.w	r3, r3, #7
 8000994:	2101      	movs	r1, #1
 8000996:	fa01 f303 	lsl.w	r3, r1, r3
 800099a:	b25b      	sxtb	r3, r3
 800099c:	4313      	orrs	r3, r2
 800099e:	b259      	sxtb	r1, r3
 80009a0:	88fa      	ldrh	r2, [r7, #6]
 80009a2:	4603      	mov	r3, r0
 80009a4:	01db      	lsls	r3, r3, #7
 80009a6:	4413      	add	r3, r2
 80009a8:	b2c9      	uxtb	r1, r1
 80009aa:	4a14      	ldr	r2, [pc, #80]	@ (80009fc <SSD1306_DrawPixel+0xbc>)
 80009ac:	54d1      	strb	r1, [r2, r3]
 80009ae:	e01d      	b.n	80009ec <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 80009b0:	88fa      	ldrh	r2, [r7, #6]
 80009b2:	88bb      	ldrh	r3, [r7, #4]
 80009b4:	08db      	lsrs	r3, r3, #3
 80009b6:	b298      	uxth	r0, r3
 80009b8:	4603      	mov	r3, r0
 80009ba:	01db      	lsls	r3, r3, #7
 80009bc:	4413      	add	r3, r2
 80009be:	4a0f      	ldr	r2, [pc, #60]	@ (80009fc <SSD1306_DrawPixel+0xbc>)
 80009c0:	5cd3      	ldrb	r3, [r2, r3]
 80009c2:	b25a      	sxtb	r2, r3
 80009c4:	88bb      	ldrh	r3, [r7, #4]
 80009c6:	f003 0307 	and.w	r3, r3, #7
 80009ca:	2101      	movs	r1, #1
 80009cc:	fa01 f303 	lsl.w	r3, r1, r3
 80009d0:	b25b      	sxtb	r3, r3
 80009d2:	43db      	mvns	r3, r3
 80009d4:	b25b      	sxtb	r3, r3
 80009d6:	4013      	ands	r3, r2
 80009d8:	b259      	sxtb	r1, r3
 80009da:	88fa      	ldrh	r2, [r7, #6]
 80009dc:	4603      	mov	r3, r0
 80009de:	01db      	lsls	r3, r3, #7
 80009e0:	4413      	add	r3, r2
 80009e2:	b2c9      	uxtb	r1, r1
 80009e4:	4a05      	ldr	r2, [pc, #20]	@ (80009fc <SSD1306_DrawPixel+0xbc>)
 80009e6:	54d1      	strb	r1, [r2, r3]
 80009e8:	e000      	b.n	80009ec <SSD1306_DrawPixel+0xac>
		return;
 80009ea:	bf00      	nop
	}
}
 80009ec:	370c      	adds	r7, #12
 80009ee:	46bd      	mov	sp, r7
 80009f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f4:	4770      	bx	lr
 80009f6:	bf00      	nop
 80009f8:	2000047c 	.word	0x2000047c
 80009fc:	2000007c 	.word	0x2000007c

08000a00 <SSD1306_ScrollRight>:
    }
}
 

void SSD1306_ScrollRight(uint8_t start_row, uint8_t end_row)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b082      	sub	sp, #8
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	4603      	mov	r3, r0
 8000a08:	460a      	mov	r2, r1
 8000a0a:	71fb      	strb	r3, [r7, #7]
 8000a0c:	4613      	mov	r3, r2
 8000a0e:	71bb      	strb	r3, [r7, #6]
  SSD1306_WRITECOMMAND (SSD1306_RIGHT_HORIZONTAL_SCROLL);  // send 0x26
 8000a10:	2226      	movs	r2, #38	@ 0x26
 8000a12:	2100      	movs	r1, #0
 8000a14:	2078      	movs	r0, #120	@ 0x78
 8000a16:	f000 f955 	bl	8000cc4 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND (0x00);  // send dummy
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	2100      	movs	r1, #0
 8000a1e:	2078      	movs	r0, #120	@ 0x78
 8000a20:	f000 f950 	bl	8000cc4 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(start_row);  // start page address
 8000a24:	79fb      	ldrb	r3, [r7, #7]
 8000a26:	461a      	mov	r2, r3
 8000a28:	2100      	movs	r1, #0
 8000a2a:	2078      	movs	r0, #120	@ 0x78
 8000a2c:	f000 f94a 	bl	8000cc4 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(0X00);  // time interval 5 frames
 8000a30:	2200      	movs	r2, #0
 8000a32:	2100      	movs	r1, #0
 8000a34:	2078      	movs	r0, #120	@ 0x78
 8000a36:	f000 f945 	bl	8000cc4 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(end_row);  // end page address
 8000a3a:	79bb      	ldrb	r3, [r7, #6]
 8000a3c:	461a      	mov	r2, r3
 8000a3e:	2100      	movs	r1, #0
 8000a40:	2078      	movs	r0, #120	@ 0x78
 8000a42:	f000 f93f 	bl	8000cc4 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(0X00);
 8000a46:	2200      	movs	r2, #0
 8000a48:	2100      	movs	r1, #0
 8000a4a:	2078      	movs	r0, #120	@ 0x78
 8000a4c:	f000 f93a 	bl	8000cc4 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(0XFF);
 8000a50:	22ff      	movs	r2, #255	@ 0xff
 8000a52:	2100      	movs	r1, #0
 8000a54:	2078      	movs	r0, #120	@ 0x78
 8000a56:	f000 f935 	bl	8000cc4 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND (SSD1306_ACTIVATE_SCROLL); // start scroll
 8000a5a:	222f      	movs	r2, #47	@ 0x2f
 8000a5c:	2100      	movs	r1, #0
 8000a5e:	2078      	movs	r0, #120	@ 0x78
 8000a60:	f000 f930 	bl	8000cc4 <ssd1306_I2C_Write>
}
 8000a64:	bf00      	nop
 8000a66:	3708      	adds	r7, #8
 8000a68:	46bd      	mov	sp, r7
 8000a6a:	bd80      	pop	{r7, pc}

08000a6c <SSD1306_ScrollLeft>:


void SSD1306_ScrollLeft(uint8_t start_row, uint8_t end_row)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b082      	sub	sp, #8
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	4603      	mov	r3, r0
 8000a74:	460a      	mov	r2, r1
 8000a76:	71fb      	strb	r3, [r7, #7]
 8000a78:	4613      	mov	r3, r2
 8000a7a:	71bb      	strb	r3, [r7, #6]
  SSD1306_WRITECOMMAND (SSD1306_LEFT_HORIZONTAL_SCROLL);  // send 0x26
 8000a7c:	2227      	movs	r2, #39	@ 0x27
 8000a7e:	2100      	movs	r1, #0
 8000a80:	2078      	movs	r0, #120	@ 0x78
 8000a82:	f000 f91f 	bl	8000cc4 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND (0x00);  // send dummy
 8000a86:	2200      	movs	r2, #0
 8000a88:	2100      	movs	r1, #0
 8000a8a:	2078      	movs	r0, #120	@ 0x78
 8000a8c:	f000 f91a 	bl	8000cc4 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(start_row);  // start page address
 8000a90:	79fb      	ldrb	r3, [r7, #7]
 8000a92:	461a      	mov	r2, r3
 8000a94:	2100      	movs	r1, #0
 8000a96:	2078      	movs	r0, #120	@ 0x78
 8000a98:	f000 f914 	bl	8000cc4 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(0X00);  // time interval 5 frames
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	2100      	movs	r1, #0
 8000aa0:	2078      	movs	r0, #120	@ 0x78
 8000aa2:	f000 f90f 	bl	8000cc4 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(end_row);  // end page address
 8000aa6:	79bb      	ldrb	r3, [r7, #6]
 8000aa8:	461a      	mov	r2, r3
 8000aaa:	2100      	movs	r1, #0
 8000aac:	2078      	movs	r0, #120	@ 0x78
 8000aae:	f000 f909 	bl	8000cc4 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(0X00);
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	2100      	movs	r1, #0
 8000ab6:	2078      	movs	r0, #120	@ 0x78
 8000ab8:	f000 f904 	bl	8000cc4 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(0XFF);
 8000abc:	22ff      	movs	r2, #255	@ 0xff
 8000abe:	2100      	movs	r1, #0
 8000ac0:	2078      	movs	r0, #120	@ 0x78
 8000ac2:	f000 f8ff 	bl	8000cc4 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND (SSD1306_ACTIVATE_SCROLL); // start scroll
 8000ac6:	222f      	movs	r2, #47	@ 0x2f
 8000ac8:	2100      	movs	r1, #0
 8000aca:	2078      	movs	r0, #120	@ 0x78
 8000acc:	f000 f8fa 	bl	8000cc4 <ssd1306_I2C_Write>
}
 8000ad0:	bf00      	nop
 8000ad2:	3708      	adds	r7, #8
 8000ad4:	46bd      	mov	sp, r7
 8000ad6:	bd80      	pop	{r7, pc}

08000ad8 <SSD1306_Stopscroll>:
  SSD1306_WRITECOMMAND (SSD1306_ACTIVATE_SCROLL);
}


void SSD1306_Stopscroll(void)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	af00      	add	r7, sp, #0
	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 8000adc:	222e      	movs	r2, #46	@ 0x2e
 8000ade:	2100      	movs	r1, #0
 8000ae0:	2078      	movs	r0, #120	@ 0x78
 8000ae2:	f000 f8ef 	bl	8000cc4 <ssd1306_I2C_Write>
}
 8000ae6:	bf00      	nop
 8000ae8:	bd80      	pop	{r7, pc}

08000aea <SSD1306_DrawBitmap>:

}


void SSD1306_DrawBitmap(int16_t x, int16_t y, const unsigned char* bitmap, int16_t w, int16_t h, uint16_t color)
{
 8000aea:	b580      	push	{r7, lr}
 8000aec:	b086      	sub	sp, #24
 8000aee:	af00      	add	r7, sp, #0
 8000af0:	60ba      	str	r2, [r7, #8]
 8000af2:	461a      	mov	r2, r3
 8000af4:	4603      	mov	r3, r0
 8000af6:	81fb      	strh	r3, [r7, #14]
 8000af8:	460b      	mov	r3, r1
 8000afa:	81bb      	strh	r3, [r7, #12]
 8000afc:	4613      	mov	r3, r2
 8000afe:	80fb      	strh	r3, [r7, #6]

    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
 8000b00:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000b04:	3307      	adds	r3, #7
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	da00      	bge.n	8000b0c <SSD1306_DrawBitmap+0x22>
 8000b0a:	3307      	adds	r3, #7
 8000b0c:	10db      	asrs	r3, r3, #3
 8000b0e:	823b      	strh	r3, [r7, #16]
    uint8_t byte = 0;
 8000b10:	2300      	movs	r3, #0
 8000b12:	75fb      	strb	r3, [r7, #23]

    for(int16_t j=0; j<h; j++, y++)
 8000b14:	2300      	movs	r3, #0
 8000b16:	82bb      	strh	r3, [r7, #20]
 8000b18:	e044      	b.n	8000ba4 <SSD1306_DrawBitmap+0xba>
    {
        for(int16_t i=0; i<w; i++)
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	827b      	strh	r3, [r7, #18]
 8000b1e:	e02f      	b.n	8000b80 <SSD1306_DrawBitmap+0x96>
        {
            if(i & 7)
 8000b20:	8a7b      	ldrh	r3, [r7, #18]
 8000b22:	f003 0307 	and.w	r3, r3, #7
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d003      	beq.n	8000b32 <SSD1306_DrawBitmap+0x48>
            {
               byte <<= 1;
 8000b2a:	7dfb      	ldrb	r3, [r7, #23]
 8000b2c:	005b      	lsls	r3, r3, #1
 8000b2e:	75fb      	strb	r3, [r7, #23]
 8000b30:	e012      	b.n	8000b58 <SSD1306_DrawBitmap+0x6e>
            }
            else
            {
               byte = (*(const unsigned char *)(&bitmap[j * byteWidth + i / 8]));
 8000b32:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8000b36:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8000b3a:	fb03 f202 	mul.w	r2, r3, r2
 8000b3e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	da00      	bge.n	8000b48 <SSD1306_DrawBitmap+0x5e>
 8000b46:	3307      	adds	r3, #7
 8000b48:	10db      	asrs	r3, r3, #3
 8000b4a:	b21b      	sxth	r3, r3
 8000b4c:	4413      	add	r3, r2
 8000b4e:	461a      	mov	r2, r3
 8000b50:	68bb      	ldr	r3, [r7, #8]
 8000b52:	4413      	add	r3, r2
 8000b54:	781b      	ldrb	r3, [r3, #0]
 8000b56:	75fb      	strb	r3, [r7, #23]
            }
            if(byte & 0x80) SSD1306_DrawPixel(x+i, y, color);
 8000b58:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	da09      	bge.n	8000b74 <SSD1306_DrawBitmap+0x8a>
 8000b60:	89fa      	ldrh	r2, [r7, #14]
 8000b62:	8a7b      	ldrh	r3, [r7, #18]
 8000b64:	4413      	add	r3, r2
 8000b66:	b29b      	uxth	r3, r3
 8000b68:	89b9      	ldrh	r1, [r7, #12]
 8000b6a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8000b6c:	b2d2      	uxtb	r2, r2
 8000b6e:	4618      	mov	r0, r3
 8000b70:	f7ff fee6 	bl	8000940 <SSD1306_DrawPixel>
        for(int16_t i=0; i<w; i++)
 8000b74:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8000b78:	b29b      	uxth	r3, r3
 8000b7a:	3301      	adds	r3, #1
 8000b7c:	b29b      	uxth	r3, r3
 8000b7e:	827b      	strh	r3, [r7, #18]
 8000b80:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8000b84:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000b88:	429a      	cmp	r2, r3
 8000b8a:	dbc9      	blt.n	8000b20 <SSD1306_DrawBitmap+0x36>
    for(int16_t j=0; j<h; j++, y++)
 8000b8c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8000b90:	b29b      	uxth	r3, r3
 8000b92:	3301      	adds	r3, #1
 8000b94:	b29b      	uxth	r3, r3
 8000b96:	82bb      	strh	r3, [r7, #20]
 8000b98:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000b9c:	b29b      	uxth	r3, r3
 8000b9e:	3301      	adds	r3, #1
 8000ba0:	b29b      	uxth	r3, r3
 8000ba2:	81bb      	strh	r3, [r7, #12]
 8000ba4:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8000ba8:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8000bac:	429a      	cmp	r2, r3
 8000bae:	dbb4      	blt.n	8000b1a <SSD1306_DrawBitmap+0x30>
        }
    }
}
 8000bb0:	bf00      	nop
 8000bb2:	bf00      	nop
 8000bb4:	3718      	adds	r7, #24
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	bd80      	pop	{r7, pc}

08000bba <SSD1306_Clear>:

void SSD1306_Clear (void)
{
 8000bba:	b580      	push	{r7, lr}
 8000bbc:	af00      	add	r7, sp, #0
	SSD1306_Fill (0);
 8000bbe:	2000      	movs	r0, #0
 8000bc0:	f7ff fea6 	bl	8000910 <SSD1306_Fill>
    SSD1306_UpdateScreen();
 8000bc4:	f7ff fe76 	bl	80008b4 <SSD1306_UpdateScreen>
}
 8000bc8:	bf00      	nop
 8000bca:	bd80      	pop	{r7, pc}

08000bcc <ssd1306_I2C_Init>:
//  _| |_ / /_| |____ 
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 8000bcc:	b480      	push	{r7}
 8000bce:	b083      	sub	sp, #12
 8000bd0:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 8000bd2:	4b08      	ldr	r3, [pc, #32]	@ (8000bf4 <ssd1306_I2C_Init+0x28>)
 8000bd4:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000bd6:	e002      	b.n	8000bde <ssd1306_I2C_Init+0x12>
		p--;
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	3b01      	subs	r3, #1
 8000bdc:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d1f9      	bne.n	8000bd8 <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 8000be4:	bf00      	nop
 8000be6:	bf00      	nop
 8000be8:	370c      	adds	r7, #12
 8000bea:	46bd      	mov	sp, r7
 8000bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf0:	4770      	bx	lr
 8000bf2:	bf00      	nop
 8000bf4:	0003d090 	.word	0x0003d090

08000bf8 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8000bf8:	b590      	push	{r4, r7, lr}
 8000bfa:	b0c7      	sub	sp, #284	@ 0x11c
 8000bfc:	af02      	add	r7, sp, #8
 8000bfe:	4604      	mov	r4, r0
 8000c00:	4608      	mov	r0, r1
 8000c02:	f507 7188 	add.w	r1, r7, #272	@ 0x110
 8000c06:	f5a1 7188 	sub.w	r1, r1, #272	@ 0x110
 8000c0a:	600a      	str	r2, [r1, #0]
 8000c0c:	4619      	mov	r1, r3
 8000c0e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000c12:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 8000c16:	4622      	mov	r2, r4
 8000c18:	701a      	strb	r2, [r3, #0]
 8000c1a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000c1e:	f5a3 7385 	sub.w	r3, r3, #266	@ 0x10a
 8000c22:	4602      	mov	r2, r0
 8000c24:	701a      	strb	r2, [r3, #0]
 8000c26:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000c2a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8000c2e:	460a      	mov	r2, r1
 8000c30:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 8000c32:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000c36:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8000c3a:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8000c3e:	f5a2 7285 	sub.w	r2, r2, #266	@ 0x10a
 8000c42:	7812      	ldrb	r2, [r2, #0]
 8000c44:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 8000c46:	2300      	movs	r3, #0
 8000c48:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 8000c4c:	e015      	b.n	8000c7a <ssd1306_I2C_WriteMulti+0x82>
dt[i+1] = data[i];
 8000c4e:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8000c52:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8000c56:	f5a2 7288 	sub.w	r2, r2, #272	@ 0x110
 8000c5a:	6812      	ldr	r2, [r2, #0]
 8000c5c:	441a      	add	r2, r3
 8000c5e:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8000c62:	3301      	adds	r3, #1
 8000c64:	7811      	ldrb	r1, [r2, #0]
 8000c66:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8000c6a:	f5a2 7282 	sub.w	r2, r2, #260	@ 0x104
 8000c6e:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 8000c70:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8000c74:	3301      	adds	r3, #1
 8000c76:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 8000c7a:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8000c7e:	b29b      	uxth	r3, r3
 8000c80:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8000c84:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 8000c88:	8812      	ldrh	r2, [r2, #0]
 8000c8a:	429a      	cmp	r2, r3
 8000c8c:	d8df      	bhi.n	8000c4e <ssd1306_I2C_WriteMulti+0x56>
HAL_I2C_Master_Transmit(SSD1306_I2C, address, dt, count+1, 10);
 8000c8e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000c92:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 8000c96:	781b      	ldrb	r3, [r3, #0]
 8000c98:	b299      	uxth	r1, r3
 8000c9a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000c9e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8000ca2:	881b      	ldrh	r3, [r3, #0]
 8000ca4:	3301      	adds	r3, #1
 8000ca6:	b29b      	uxth	r3, r3
 8000ca8:	f107 020c 	add.w	r2, r7, #12
 8000cac:	200a      	movs	r0, #10
 8000cae:	9000      	str	r0, [sp, #0]
 8000cb0:	4803      	ldr	r0, [pc, #12]	@ (8000cc0 <ssd1306_I2C_WriteMulti+0xc8>)
 8000cb2:	f000 fa35 	bl	8001120 <HAL_I2C_Master_Transmit>
}
 8000cb6:	bf00      	nop
 8000cb8:	f507 778a 	add.w	r7, r7, #276	@ 0x114
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	bd90      	pop	{r4, r7, pc}
 8000cc0:	20000028 	.word	0x20000028

08000cc4 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b086      	sub	sp, #24
 8000cc8:	af02      	add	r7, sp, #8
 8000cca:	4603      	mov	r3, r0
 8000ccc:	71fb      	strb	r3, [r7, #7]
 8000cce:	460b      	mov	r3, r1
 8000cd0:	71bb      	strb	r3, [r7, #6]
 8000cd2:	4613      	mov	r3, r2
 8000cd4:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 8000cd6:	79bb      	ldrb	r3, [r7, #6]
 8000cd8:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 8000cda:	797b      	ldrb	r3, [r7, #5]
 8000cdc:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(SSD1306_I2C, address, dt, 2, 10);
 8000cde:	79fb      	ldrb	r3, [r7, #7]
 8000ce0:	b299      	uxth	r1, r3
 8000ce2:	f107 020c 	add.w	r2, r7, #12
 8000ce6:	230a      	movs	r3, #10
 8000ce8:	9300      	str	r3, [sp, #0]
 8000cea:	2302      	movs	r3, #2
 8000cec:	4803      	ldr	r0, [pc, #12]	@ (8000cfc <ssd1306_I2C_Write+0x38>)
 8000cee:	f000 fa17 	bl	8001120 <HAL_I2C_Master_Transmit>
}
 8000cf2:	bf00      	nop
 8000cf4:	3710      	adds	r7, #16
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	bd80      	pop	{r7, pc}
 8000cfa:	bf00      	nop
 8000cfc:	20000028 	.word	0x20000028

08000d00 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d00:	b480      	push	{r7}
 8000d02:	b083      	sub	sp, #12
 8000d04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d06:	2300      	movs	r3, #0
 8000d08:	607b      	str	r3, [r7, #4]
 8000d0a:	4b10      	ldr	r3, [pc, #64]	@ (8000d4c <HAL_MspInit+0x4c>)
 8000d0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d0e:	4a0f      	ldr	r2, [pc, #60]	@ (8000d4c <HAL_MspInit+0x4c>)
 8000d10:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000d14:	6453      	str	r3, [r2, #68]	@ 0x44
 8000d16:	4b0d      	ldr	r3, [pc, #52]	@ (8000d4c <HAL_MspInit+0x4c>)
 8000d18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d1a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000d1e:	607b      	str	r3, [r7, #4]
 8000d20:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d22:	2300      	movs	r3, #0
 8000d24:	603b      	str	r3, [r7, #0]
 8000d26:	4b09      	ldr	r3, [pc, #36]	@ (8000d4c <HAL_MspInit+0x4c>)
 8000d28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d2a:	4a08      	ldr	r2, [pc, #32]	@ (8000d4c <HAL_MspInit+0x4c>)
 8000d2c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000d30:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d32:	4b06      	ldr	r3, [pc, #24]	@ (8000d4c <HAL_MspInit+0x4c>)
 8000d34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d36:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000d3a:	603b      	str	r3, [r7, #0]
 8000d3c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d3e:	bf00      	nop
 8000d40:	370c      	adds	r7, #12
 8000d42:	46bd      	mov	sp, r7
 8000d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d48:	4770      	bx	lr
 8000d4a:	bf00      	nop
 8000d4c:	40023800 	.word	0x40023800

08000d50 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d50:	b480      	push	{r7}
 8000d52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000d54:	bf00      	nop
 8000d56:	e7fd      	b.n	8000d54 <NMI_Handler+0x4>

08000d58 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d58:	b480      	push	{r7}
 8000d5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d5c:	bf00      	nop
 8000d5e:	e7fd      	b.n	8000d5c <HardFault_Handler+0x4>

08000d60 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d60:	b480      	push	{r7}
 8000d62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d64:	bf00      	nop
 8000d66:	e7fd      	b.n	8000d64 <MemManage_Handler+0x4>

08000d68 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d68:	b480      	push	{r7}
 8000d6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d6c:	bf00      	nop
 8000d6e:	e7fd      	b.n	8000d6c <BusFault_Handler+0x4>

08000d70 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d70:	b480      	push	{r7}
 8000d72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d74:	bf00      	nop
 8000d76:	e7fd      	b.n	8000d74 <UsageFault_Handler+0x4>

08000d78 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d7c:	bf00      	nop
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d84:	4770      	bx	lr

08000d86 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d86:	b480      	push	{r7}
 8000d88:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d8a:	bf00      	nop
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d92:	4770      	bx	lr

08000d94 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d94:	b480      	push	{r7}
 8000d96:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d98:	bf00      	nop
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da0:	4770      	bx	lr

08000da2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000da2:	b580      	push	{r7, lr}
 8000da4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000da6:	f000 f891 	bl	8000ecc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000daa:	bf00      	nop
 8000dac:	bd80      	pop	{r7, pc}
	...

08000db0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000db0:	b480      	push	{r7}
 8000db2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000db4:	4b06      	ldr	r3, [pc, #24]	@ (8000dd0 <SystemInit+0x20>)
 8000db6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000dba:	4a05      	ldr	r2, [pc, #20]	@ (8000dd0 <SystemInit+0x20>)
 8000dbc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000dc0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000dc4:	bf00      	nop
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dcc:	4770      	bx	lr
 8000dce:	bf00      	nop
 8000dd0:	e000ed00 	.word	0xe000ed00

08000dd4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000dd4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000e0c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000dd8:	f7ff ffea 	bl	8000db0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000ddc:	480c      	ldr	r0, [pc, #48]	@ (8000e10 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000dde:	490d      	ldr	r1, [pc, #52]	@ (8000e14 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000de0:	4a0d      	ldr	r2, [pc, #52]	@ (8000e18 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000de2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000de4:	e002      	b.n	8000dec <LoopCopyDataInit>

08000de6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000de6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000de8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000dea:	3304      	adds	r3, #4

08000dec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000dec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000dee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000df0:	d3f9      	bcc.n	8000de6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000df2:	4a0a      	ldr	r2, [pc, #40]	@ (8000e1c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000df4:	4c0a      	ldr	r4, [pc, #40]	@ (8000e20 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000df6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000df8:	e001      	b.n	8000dfe <LoopFillZerobss>

08000dfa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000dfa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000dfc:	3204      	adds	r2, #4

08000dfe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000dfe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e00:	d3fb      	bcc.n	8000dfa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000e02:	f001 fa41 	bl	8002288 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e06:	f7ff fb5d 	bl	80004c4 <main>
  bx  lr    
 8000e0a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000e0c:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000e10:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e14:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000e18:	08004f08 	.word	0x08004f08
  ldr r2, =_sbss
 8000e1c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000e20:	20000488 	.word	0x20000488

08000e24 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e24:	e7fe      	b.n	8000e24 <ADC_IRQHandler>
	...

08000e28 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e2c:	4b0e      	ldr	r3, [pc, #56]	@ (8000e68 <HAL_Init+0x40>)
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	4a0d      	ldr	r2, [pc, #52]	@ (8000e68 <HAL_Init+0x40>)
 8000e32:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000e36:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000e38:	4b0b      	ldr	r3, [pc, #44]	@ (8000e68 <HAL_Init+0x40>)
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	4a0a      	ldr	r2, [pc, #40]	@ (8000e68 <HAL_Init+0x40>)
 8000e3e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000e42:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e44:	4b08      	ldr	r3, [pc, #32]	@ (8000e68 <HAL_Init+0x40>)
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	4a07      	ldr	r2, [pc, #28]	@ (8000e68 <HAL_Init+0x40>)
 8000e4a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000e4e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e50:	2003      	movs	r0, #3
 8000e52:	f000 f931 	bl	80010b8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e56:	200f      	movs	r0, #15
 8000e58:	f000 f808 	bl	8000e6c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e5c:	f7ff ff50 	bl	8000d00 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e60:	2300      	movs	r3, #0
}
 8000e62:	4618      	mov	r0, r3
 8000e64:	bd80      	pop	{r7, pc}
 8000e66:	bf00      	nop
 8000e68:	40023c00 	.word	0x40023c00

08000e6c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b082      	sub	sp, #8
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e74:	4b12      	ldr	r3, [pc, #72]	@ (8000ec0 <HAL_InitTick+0x54>)
 8000e76:	681a      	ldr	r2, [r3, #0]
 8000e78:	4b12      	ldr	r3, [pc, #72]	@ (8000ec4 <HAL_InitTick+0x58>)
 8000e7a:	781b      	ldrb	r3, [r3, #0]
 8000e7c:	4619      	mov	r1, r3
 8000e7e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000e82:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e86:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	f000 f93b 	bl	8001106 <HAL_SYSTICK_Config>
 8000e90:	4603      	mov	r3, r0
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d001      	beq.n	8000e9a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e96:	2301      	movs	r3, #1
 8000e98:	e00e      	b.n	8000eb8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	2b0f      	cmp	r3, #15
 8000e9e:	d80a      	bhi.n	8000eb6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	6879      	ldr	r1, [r7, #4]
 8000ea4:	f04f 30ff 	mov.w	r0, #4294967295
 8000ea8:	f000 f911 	bl	80010ce <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000eac:	4a06      	ldr	r2, [pc, #24]	@ (8000ec8 <HAL_InitTick+0x5c>)
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	e000      	b.n	8000eb8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000eb6:	2301      	movs	r3, #1
}
 8000eb8:	4618      	mov	r0, r3
 8000eba:	3708      	adds	r7, #8
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	bd80      	pop	{r7, pc}
 8000ec0:	20000000 	.word	0x20000000
 8000ec4:	20000008 	.word	0x20000008
 8000ec8:	20000004 	.word	0x20000004

08000ecc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ed0:	4b06      	ldr	r3, [pc, #24]	@ (8000eec <HAL_IncTick+0x20>)
 8000ed2:	781b      	ldrb	r3, [r3, #0]
 8000ed4:	461a      	mov	r2, r3
 8000ed6:	4b06      	ldr	r3, [pc, #24]	@ (8000ef0 <HAL_IncTick+0x24>)
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	4413      	add	r3, r2
 8000edc:	4a04      	ldr	r2, [pc, #16]	@ (8000ef0 <HAL_IncTick+0x24>)
 8000ede:	6013      	str	r3, [r2, #0]
}
 8000ee0:	bf00      	nop
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee8:	4770      	bx	lr
 8000eea:	bf00      	nop
 8000eec:	20000008 	.word	0x20000008
 8000ef0:	20000484 	.word	0x20000484

08000ef4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ef4:	b480      	push	{r7}
 8000ef6:	af00      	add	r7, sp, #0
  return uwTick;
 8000ef8:	4b03      	ldr	r3, [pc, #12]	@ (8000f08 <HAL_GetTick+0x14>)
 8000efa:	681b      	ldr	r3, [r3, #0]
}
 8000efc:	4618      	mov	r0, r3
 8000efe:	46bd      	mov	sp, r7
 8000f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f04:	4770      	bx	lr
 8000f06:	bf00      	nop
 8000f08:	20000484 	.word	0x20000484

08000f0c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b084      	sub	sp, #16
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f14:	f7ff ffee 	bl	8000ef4 <HAL_GetTick>
 8000f18:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f1e:	68fb      	ldr	r3, [r7, #12]
 8000f20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f24:	d005      	beq.n	8000f32 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f26:	4b0a      	ldr	r3, [pc, #40]	@ (8000f50 <HAL_Delay+0x44>)
 8000f28:	781b      	ldrb	r3, [r3, #0]
 8000f2a:	461a      	mov	r2, r3
 8000f2c:	68fb      	ldr	r3, [r7, #12]
 8000f2e:	4413      	add	r3, r2
 8000f30:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000f32:	bf00      	nop
 8000f34:	f7ff ffde 	bl	8000ef4 <HAL_GetTick>
 8000f38:	4602      	mov	r2, r0
 8000f3a:	68bb      	ldr	r3, [r7, #8]
 8000f3c:	1ad3      	subs	r3, r2, r3
 8000f3e:	68fa      	ldr	r2, [r7, #12]
 8000f40:	429a      	cmp	r2, r3
 8000f42:	d8f7      	bhi.n	8000f34 <HAL_Delay+0x28>
  {
  }
}
 8000f44:	bf00      	nop
 8000f46:	bf00      	nop
 8000f48:	3710      	adds	r7, #16
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	bd80      	pop	{r7, pc}
 8000f4e:	bf00      	nop
 8000f50:	20000008 	.word	0x20000008

08000f54 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f54:	b480      	push	{r7}
 8000f56:	b085      	sub	sp, #20
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	f003 0307 	and.w	r3, r3, #7
 8000f62:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f64:	4b0c      	ldr	r3, [pc, #48]	@ (8000f98 <__NVIC_SetPriorityGrouping+0x44>)
 8000f66:	68db      	ldr	r3, [r3, #12]
 8000f68:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f6a:	68ba      	ldr	r2, [r7, #8]
 8000f6c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000f70:	4013      	ands	r3, r2
 8000f72:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f74:	68fb      	ldr	r3, [r7, #12]
 8000f76:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f78:	68bb      	ldr	r3, [r7, #8]
 8000f7a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f7c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000f80:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000f84:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f86:	4a04      	ldr	r2, [pc, #16]	@ (8000f98 <__NVIC_SetPriorityGrouping+0x44>)
 8000f88:	68bb      	ldr	r3, [r7, #8]
 8000f8a:	60d3      	str	r3, [r2, #12]
}
 8000f8c:	bf00      	nop
 8000f8e:	3714      	adds	r7, #20
 8000f90:	46bd      	mov	sp, r7
 8000f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f96:	4770      	bx	lr
 8000f98:	e000ed00 	.word	0xe000ed00

08000f9c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000fa0:	4b04      	ldr	r3, [pc, #16]	@ (8000fb4 <__NVIC_GetPriorityGrouping+0x18>)
 8000fa2:	68db      	ldr	r3, [r3, #12]
 8000fa4:	0a1b      	lsrs	r3, r3, #8
 8000fa6:	f003 0307 	and.w	r3, r3, #7
}
 8000faa:	4618      	mov	r0, r3
 8000fac:	46bd      	mov	sp, r7
 8000fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb2:	4770      	bx	lr
 8000fb4:	e000ed00 	.word	0xe000ed00

08000fb8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	b083      	sub	sp, #12
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	6039      	str	r1, [r7, #0]
 8000fc2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fc4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	db0a      	blt.n	8000fe2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fcc:	683b      	ldr	r3, [r7, #0]
 8000fce:	b2da      	uxtb	r2, r3
 8000fd0:	490c      	ldr	r1, [pc, #48]	@ (8001004 <__NVIC_SetPriority+0x4c>)
 8000fd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fd6:	0112      	lsls	r2, r2, #4
 8000fd8:	b2d2      	uxtb	r2, r2
 8000fda:	440b      	add	r3, r1
 8000fdc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000fe0:	e00a      	b.n	8000ff8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fe2:	683b      	ldr	r3, [r7, #0]
 8000fe4:	b2da      	uxtb	r2, r3
 8000fe6:	4908      	ldr	r1, [pc, #32]	@ (8001008 <__NVIC_SetPriority+0x50>)
 8000fe8:	79fb      	ldrb	r3, [r7, #7]
 8000fea:	f003 030f 	and.w	r3, r3, #15
 8000fee:	3b04      	subs	r3, #4
 8000ff0:	0112      	lsls	r2, r2, #4
 8000ff2:	b2d2      	uxtb	r2, r2
 8000ff4:	440b      	add	r3, r1
 8000ff6:	761a      	strb	r2, [r3, #24]
}
 8000ff8:	bf00      	nop
 8000ffa:	370c      	adds	r7, #12
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001002:	4770      	bx	lr
 8001004:	e000e100 	.word	0xe000e100
 8001008:	e000ed00 	.word	0xe000ed00

0800100c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800100c:	b480      	push	{r7}
 800100e:	b089      	sub	sp, #36	@ 0x24
 8001010:	af00      	add	r7, sp, #0
 8001012:	60f8      	str	r0, [r7, #12]
 8001014:	60b9      	str	r1, [r7, #8]
 8001016:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001018:	68fb      	ldr	r3, [r7, #12]
 800101a:	f003 0307 	and.w	r3, r3, #7
 800101e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001020:	69fb      	ldr	r3, [r7, #28]
 8001022:	f1c3 0307 	rsb	r3, r3, #7
 8001026:	2b04      	cmp	r3, #4
 8001028:	bf28      	it	cs
 800102a:	2304      	movcs	r3, #4
 800102c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800102e:	69fb      	ldr	r3, [r7, #28]
 8001030:	3304      	adds	r3, #4
 8001032:	2b06      	cmp	r3, #6
 8001034:	d902      	bls.n	800103c <NVIC_EncodePriority+0x30>
 8001036:	69fb      	ldr	r3, [r7, #28]
 8001038:	3b03      	subs	r3, #3
 800103a:	e000      	b.n	800103e <NVIC_EncodePriority+0x32>
 800103c:	2300      	movs	r3, #0
 800103e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001040:	f04f 32ff 	mov.w	r2, #4294967295
 8001044:	69bb      	ldr	r3, [r7, #24]
 8001046:	fa02 f303 	lsl.w	r3, r2, r3
 800104a:	43da      	mvns	r2, r3
 800104c:	68bb      	ldr	r3, [r7, #8]
 800104e:	401a      	ands	r2, r3
 8001050:	697b      	ldr	r3, [r7, #20]
 8001052:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001054:	f04f 31ff 	mov.w	r1, #4294967295
 8001058:	697b      	ldr	r3, [r7, #20]
 800105a:	fa01 f303 	lsl.w	r3, r1, r3
 800105e:	43d9      	mvns	r1, r3
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001064:	4313      	orrs	r3, r2
         );
}
 8001066:	4618      	mov	r0, r3
 8001068:	3724      	adds	r7, #36	@ 0x24
 800106a:	46bd      	mov	sp, r7
 800106c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001070:	4770      	bx	lr
	...

08001074 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b082      	sub	sp, #8
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	3b01      	subs	r3, #1
 8001080:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001084:	d301      	bcc.n	800108a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001086:	2301      	movs	r3, #1
 8001088:	e00f      	b.n	80010aa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800108a:	4a0a      	ldr	r2, [pc, #40]	@ (80010b4 <SysTick_Config+0x40>)
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	3b01      	subs	r3, #1
 8001090:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001092:	210f      	movs	r1, #15
 8001094:	f04f 30ff 	mov.w	r0, #4294967295
 8001098:	f7ff ff8e 	bl	8000fb8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800109c:	4b05      	ldr	r3, [pc, #20]	@ (80010b4 <SysTick_Config+0x40>)
 800109e:	2200      	movs	r2, #0
 80010a0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010a2:	4b04      	ldr	r3, [pc, #16]	@ (80010b4 <SysTick_Config+0x40>)
 80010a4:	2207      	movs	r2, #7
 80010a6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80010a8:	2300      	movs	r3, #0
}
 80010aa:	4618      	mov	r0, r3
 80010ac:	3708      	adds	r7, #8
 80010ae:	46bd      	mov	sp, r7
 80010b0:	bd80      	pop	{r7, pc}
 80010b2:	bf00      	nop
 80010b4:	e000e010 	.word	0xe000e010

080010b8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b082      	sub	sp, #8
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010c0:	6878      	ldr	r0, [r7, #4]
 80010c2:	f7ff ff47 	bl	8000f54 <__NVIC_SetPriorityGrouping>
}
 80010c6:	bf00      	nop
 80010c8:	3708      	adds	r7, #8
 80010ca:	46bd      	mov	sp, r7
 80010cc:	bd80      	pop	{r7, pc}

080010ce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80010ce:	b580      	push	{r7, lr}
 80010d0:	b086      	sub	sp, #24
 80010d2:	af00      	add	r7, sp, #0
 80010d4:	4603      	mov	r3, r0
 80010d6:	60b9      	str	r1, [r7, #8]
 80010d8:	607a      	str	r2, [r7, #4]
 80010da:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80010dc:	2300      	movs	r3, #0
 80010de:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80010e0:	f7ff ff5c 	bl	8000f9c <__NVIC_GetPriorityGrouping>
 80010e4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010e6:	687a      	ldr	r2, [r7, #4]
 80010e8:	68b9      	ldr	r1, [r7, #8]
 80010ea:	6978      	ldr	r0, [r7, #20]
 80010ec:	f7ff ff8e 	bl	800100c <NVIC_EncodePriority>
 80010f0:	4602      	mov	r2, r0
 80010f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010f6:	4611      	mov	r1, r2
 80010f8:	4618      	mov	r0, r3
 80010fa:	f7ff ff5d 	bl	8000fb8 <__NVIC_SetPriority>
}
 80010fe:	bf00      	nop
 8001100:	3718      	adds	r7, #24
 8001102:	46bd      	mov	sp, r7
 8001104:	bd80      	pop	{r7, pc}

08001106 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001106:	b580      	push	{r7, lr}
 8001108:	b082      	sub	sp, #8
 800110a:	af00      	add	r7, sp, #0
 800110c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800110e:	6878      	ldr	r0, [r7, #4]
 8001110:	f7ff ffb0 	bl	8001074 <SysTick_Config>
 8001114:	4603      	mov	r3, r0
}
 8001116:	4618      	mov	r0, r3
 8001118:	3708      	adds	r7, #8
 800111a:	46bd      	mov	sp, r7
 800111c:	bd80      	pop	{r7, pc}
	...

08001120 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b088      	sub	sp, #32
 8001124:	af02      	add	r7, sp, #8
 8001126:	60f8      	str	r0, [r7, #12]
 8001128:	607a      	str	r2, [r7, #4]
 800112a:	461a      	mov	r2, r3
 800112c:	460b      	mov	r3, r1
 800112e:	817b      	strh	r3, [r7, #10]
 8001130:	4613      	mov	r3, r2
 8001132:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001134:	f7ff fede 	bl	8000ef4 <HAL_GetTick>
 8001138:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800113a:	68fb      	ldr	r3, [r7, #12]
 800113c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001140:	b2db      	uxtb	r3, r3
 8001142:	2b20      	cmp	r3, #32
 8001144:	f040 80e0 	bne.w	8001308 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001148:	697b      	ldr	r3, [r7, #20]
 800114a:	9300      	str	r3, [sp, #0]
 800114c:	2319      	movs	r3, #25
 800114e:	2201      	movs	r2, #1
 8001150:	4970      	ldr	r1, [pc, #448]	@ (8001314 <HAL_I2C_Master_Transmit+0x1f4>)
 8001152:	68f8      	ldr	r0, [r7, #12]
 8001154:	f000 fa92 	bl	800167c <I2C_WaitOnFlagUntilTimeout>
 8001158:	4603      	mov	r3, r0
 800115a:	2b00      	cmp	r3, #0
 800115c:	d001      	beq.n	8001162 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800115e:	2302      	movs	r3, #2
 8001160:	e0d3      	b.n	800130a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001162:	68fb      	ldr	r3, [r7, #12]
 8001164:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001168:	2b01      	cmp	r3, #1
 800116a:	d101      	bne.n	8001170 <HAL_I2C_Master_Transmit+0x50>
 800116c:	2302      	movs	r3, #2
 800116e:	e0cc      	b.n	800130a <HAL_I2C_Master_Transmit+0x1ea>
 8001170:	68fb      	ldr	r3, [r7, #12]
 8001172:	2201      	movs	r2, #1
 8001174:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001178:	68fb      	ldr	r3, [r7, #12]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	f003 0301 	and.w	r3, r3, #1
 8001182:	2b01      	cmp	r3, #1
 8001184:	d007      	beq.n	8001196 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001186:	68fb      	ldr	r3, [r7, #12]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	681a      	ldr	r2, [r3, #0]
 800118c:	68fb      	ldr	r3, [r7, #12]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	f042 0201 	orr.w	r2, r2, #1
 8001194:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001196:	68fb      	ldr	r3, [r7, #12]
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	681a      	ldr	r2, [r3, #0]
 800119c:	68fb      	ldr	r3, [r7, #12]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80011a4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80011a6:	68fb      	ldr	r3, [r7, #12]
 80011a8:	2221      	movs	r2, #33	@ 0x21
 80011aa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80011ae:	68fb      	ldr	r3, [r7, #12]
 80011b0:	2210      	movs	r2, #16
 80011b2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80011b6:	68fb      	ldr	r3, [r7, #12]
 80011b8:	2200      	movs	r2, #0
 80011ba:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	687a      	ldr	r2, [r7, #4]
 80011c0:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80011c2:	68fb      	ldr	r3, [r7, #12]
 80011c4:	893a      	ldrh	r2, [r7, #8]
 80011c6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80011c8:	68fb      	ldr	r3, [r7, #12]
 80011ca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80011cc:	b29a      	uxth	r2, r3
 80011ce:	68fb      	ldr	r3, [r7, #12]
 80011d0:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80011d2:	68fb      	ldr	r3, [r7, #12]
 80011d4:	4a50      	ldr	r2, [pc, #320]	@ (8001318 <HAL_I2C_Master_Transmit+0x1f8>)
 80011d6:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80011d8:	8979      	ldrh	r1, [r7, #10]
 80011da:	697b      	ldr	r3, [r7, #20]
 80011dc:	6a3a      	ldr	r2, [r7, #32]
 80011de:	68f8      	ldr	r0, [r7, #12]
 80011e0:	f000 f9ca 	bl	8001578 <I2C_MasterRequestWrite>
 80011e4:	4603      	mov	r3, r0
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d001      	beq.n	80011ee <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80011ea:	2301      	movs	r3, #1
 80011ec:	e08d      	b.n	800130a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80011ee:	2300      	movs	r3, #0
 80011f0:	613b      	str	r3, [r7, #16]
 80011f2:	68fb      	ldr	r3, [r7, #12]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	695b      	ldr	r3, [r3, #20]
 80011f8:	613b      	str	r3, [r7, #16]
 80011fa:	68fb      	ldr	r3, [r7, #12]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	699b      	ldr	r3, [r3, #24]
 8001200:	613b      	str	r3, [r7, #16]
 8001202:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001204:	e066      	b.n	80012d4 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001206:	697a      	ldr	r2, [r7, #20]
 8001208:	6a39      	ldr	r1, [r7, #32]
 800120a:	68f8      	ldr	r0, [r7, #12]
 800120c:	f000 fb50 	bl	80018b0 <I2C_WaitOnTXEFlagUntilTimeout>
 8001210:	4603      	mov	r3, r0
 8001212:	2b00      	cmp	r3, #0
 8001214:	d00d      	beq.n	8001232 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001216:	68fb      	ldr	r3, [r7, #12]
 8001218:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800121a:	2b04      	cmp	r3, #4
 800121c:	d107      	bne.n	800122e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800121e:	68fb      	ldr	r3, [r7, #12]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	681a      	ldr	r2, [r3, #0]
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800122c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800122e:	2301      	movs	r3, #1
 8001230:	e06b      	b.n	800130a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001232:	68fb      	ldr	r3, [r7, #12]
 8001234:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001236:	781a      	ldrb	r2, [r3, #0]
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800123e:	68fb      	ldr	r3, [r7, #12]
 8001240:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001242:	1c5a      	adds	r2, r3, #1
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001248:	68fb      	ldr	r3, [r7, #12]
 800124a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800124c:	b29b      	uxth	r3, r3
 800124e:	3b01      	subs	r3, #1
 8001250:	b29a      	uxth	r2, r3
 8001252:	68fb      	ldr	r3, [r7, #12]
 8001254:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8001256:	68fb      	ldr	r3, [r7, #12]
 8001258:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800125a:	3b01      	subs	r3, #1
 800125c:	b29a      	uxth	r2, r3
 800125e:	68fb      	ldr	r3, [r7, #12]
 8001260:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001262:	68fb      	ldr	r3, [r7, #12]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	695b      	ldr	r3, [r3, #20]
 8001268:	f003 0304 	and.w	r3, r3, #4
 800126c:	2b04      	cmp	r3, #4
 800126e:	d11b      	bne.n	80012a8 <HAL_I2C_Master_Transmit+0x188>
 8001270:	68fb      	ldr	r3, [r7, #12]
 8001272:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001274:	2b00      	cmp	r3, #0
 8001276:	d017      	beq.n	80012a8 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001278:	68fb      	ldr	r3, [r7, #12]
 800127a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800127c:	781a      	ldrb	r2, [r3, #0]
 800127e:	68fb      	ldr	r3, [r7, #12]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001284:	68fb      	ldr	r3, [r7, #12]
 8001286:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001288:	1c5a      	adds	r2, r3, #1
 800128a:	68fb      	ldr	r3, [r7, #12]
 800128c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 800128e:	68fb      	ldr	r3, [r7, #12]
 8001290:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001292:	b29b      	uxth	r3, r3
 8001294:	3b01      	subs	r3, #1
 8001296:	b29a      	uxth	r2, r3
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 800129c:	68fb      	ldr	r3, [r7, #12]
 800129e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80012a0:	3b01      	subs	r3, #1
 80012a2:	b29a      	uxth	r2, r3
 80012a4:	68fb      	ldr	r3, [r7, #12]
 80012a6:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80012a8:	697a      	ldr	r2, [r7, #20]
 80012aa:	6a39      	ldr	r1, [r7, #32]
 80012ac:	68f8      	ldr	r0, [r7, #12]
 80012ae:	f000 fb47 	bl	8001940 <I2C_WaitOnBTFFlagUntilTimeout>
 80012b2:	4603      	mov	r3, r0
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d00d      	beq.n	80012d4 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012bc:	2b04      	cmp	r3, #4
 80012be:	d107      	bne.n	80012d0 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	681a      	ldr	r2, [r3, #0]
 80012c6:	68fb      	ldr	r3, [r7, #12]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80012ce:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80012d0:	2301      	movs	r3, #1
 80012d2:	e01a      	b.n	800130a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80012d4:	68fb      	ldr	r3, [r7, #12]
 80012d6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d194      	bne.n	8001206 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80012dc:	68fb      	ldr	r3, [r7, #12]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	681a      	ldr	r2, [r3, #0]
 80012e2:	68fb      	ldr	r3, [r7, #12]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80012ea:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80012ec:	68fb      	ldr	r3, [r7, #12]
 80012ee:	2220      	movs	r2, #32
 80012f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	2200      	movs	r2, #0
 80012f8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80012fc:	68fb      	ldr	r3, [r7, #12]
 80012fe:	2200      	movs	r2, #0
 8001300:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8001304:	2300      	movs	r3, #0
 8001306:	e000      	b.n	800130a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001308:	2302      	movs	r3, #2
  }
}
 800130a:	4618      	mov	r0, r3
 800130c:	3718      	adds	r7, #24
 800130e:	46bd      	mov	sp, r7
 8001310:	bd80      	pop	{r7, pc}
 8001312:	bf00      	nop
 8001314:	00100002 	.word	0x00100002
 8001318:	ffff0000 	.word	0xffff0000

0800131c <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b08a      	sub	sp, #40	@ 0x28
 8001320:	af02      	add	r7, sp, #8
 8001322:	60f8      	str	r0, [r7, #12]
 8001324:	607a      	str	r2, [r7, #4]
 8001326:	603b      	str	r3, [r7, #0]
 8001328:	460b      	mov	r3, r1
 800132a:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 800132c:	f7ff fde2 	bl	8000ef4 <HAL_GetTick>
 8001330:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8001332:	2300      	movs	r3, #0
 8001334:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001336:	68fb      	ldr	r3, [r7, #12]
 8001338:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800133c:	b2db      	uxtb	r3, r3
 800133e:	2b20      	cmp	r3, #32
 8001340:	f040 8111 	bne.w	8001566 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001344:	69fb      	ldr	r3, [r7, #28]
 8001346:	9300      	str	r3, [sp, #0]
 8001348:	2319      	movs	r3, #25
 800134a:	2201      	movs	r2, #1
 800134c:	4988      	ldr	r1, [pc, #544]	@ (8001570 <HAL_I2C_IsDeviceReady+0x254>)
 800134e:	68f8      	ldr	r0, [r7, #12]
 8001350:	f000 f994 	bl	800167c <I2C_WaitOnFlagUntilTimeout>
 8001354:	4603      	mov	r3, r0
 8001356:	2b00      	cmp	r3, #0
 8001358:	d001      	beq.n	800135e <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 800135a:	2302      	movs	r3, #2
 800135c:	e104      	b.n	8001568 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800135e:	68fb      	ldr	r3, [r7, #12]
 8001360:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001364:	2b01      	cmp	r3, #1
 8001366:	d101      	bne.n	800136c <HAL_I2C_IsDeviceReady+0x50>
 8001368:	2302      	movs	r3, #2
 800136a:	e0fd      	b.n	8001568 <HAL_I2C_IsDeviceReady+0x24c>
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	2201      	movs	r2, #1
 8001370:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	f003 0301 	and.w	r3, r3, #1
 800137e:	2b01      	cmp	r3, #1
 8001380:	d007      	beq.n	8001392 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001382:	68fb      	ldr	r3, [r7, #12]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	681a      	ldr	r2, [r3, #0]
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	f042 0201 	orr.w	r2, r2, #1
 8001390:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001392:	68fb      	ldr	r3, [r7, #12]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	681a      	ldr	r2, [r3, #0]
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80013a0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80013a2:	68fb      	ldr	r3, [r7, #12]
 80013a4:	2224      	movs	r2, #36	@ 0x24
 80013a6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80013aa:	68fb      	ldr	r3, [r7, #12]
 80013ac:	2200      	movs	r2, #0
 80013ae:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	4a70      	ldr	r2, [pc, #448]	@ (8001574 <HAL_I2C_IsDeviceReady+0x258>)
 80013b4:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80013b6:	68fb      	ldr	r3, [r7, #12]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	681a      	ldr	r2, [r3, #0]
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80013c4:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 80013c6:	69fb      	ldr	r3, [r7, #28]
 80013c8:	9300      	str	r3, [sp, #0]
 80013ca:	683b      	ldr	r3, [r7, #0]
 80013cc:	2200      	movs	r2, #0
 80013ce:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80013d2:	68f8      	ldr	r0, [r7, #12]
 80013d4:	f000 f952 	bl	800167c <I2C_WaitOnFlagUntilTimeout>
 80013d8:	4603      	mov	r3, r0
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d00d      	beq.n	80013fa <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80013de:	68fb      	ldr	r3, [r7, #12]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80013e8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80013ec:	d103      	bne.n	80013f6 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80013ee:	68fb      	ldr	r3, [r7, #12]
 80013f0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80013f4:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 80013f6:	2303      	movs	r3, #3
 80013f8:	e0b6      	b.n	8001568 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80013fa:	897b      	ldrh	r3, [r7, #10]
 80013fc:	b2db      	uxtb	r3, r3
 80013fe:	461a      	mov	r2, r3
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8001408:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 800140a:	f7ff fd73 	bl	8000ef4 <HAL_GetTick>
 800140e:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8001410:	68fb      	ldr	r3, [r7, #12]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	695b      	ldr	r3, [r3, #20]
 8001416:	f003 0302 	and.w	r3, r3, #2
 800141a:	2b02      	cmp	r3, #2
 800141c:	bf0c      	ite	eq
 800141e:	2301      	moveq	r3, #1
 8001420:	2300      	movne	r3, #0
 8001422:	b2db      	uxtb	r3, r3
 8001424:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001426:	68fb      	ldr	r3, [r7, #12]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	695b      	ldr	r3, [r3, #20]
 800142c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001430:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001434:	bf0c      	ite	eq
 8001436:	2301      	moveq	r3, #1
 8001438:	2300      	movne	r3, #0
 800143a:	b2db      	uxtb	r3, r3
 800143c:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800143e:	e025      	b.n	800148c <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001440:	f7ff fd58 	bl	8000ef4 <HAL_GetTick>
 8001444:	4602      	mov	r2, r0
 8001446:	69fb      	ldr	r3, [r7, #28]
 8001448:	1ad3      	subs	r3, r2, r3
 800144a:	683a      	ldr	r2, [r7, #0]
 800144c:	429a      	cmp	r2, r3
 800144e:	d302      	bcc.n	8001456 <HAL_I2C_IsDeviceReady+0x13a>
 8001450:	683b      	ldr	r3, [r7, #0]
 8001452:	2b00      	cmp	r3, #0
 8001454:	d103      	bne.n	800145e <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8001456:	68fb      	ldr	r3, [r7, #12]
 8001458:	22a0      	movs	r2, #160	@ 0xa0
 800145a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800145e:	68fb      	ldr	r3, [r7, #12]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	695b      	ldr	r3, [r3, #20]
 8001464:	f003 0302 	and.w	r3, r3, #2
 8001468:	2b02      	cmp	r3, #2
 800146a:	bf0c      	ite	eq
 800146c:	2301      	moveq	r3, #1
 800146e:	2300      	movne	r3, #0
 8001470:	b2db      	uxtb	r3, r3
 8001472:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	695b      	ldr	r3, [r3, #20]
 800147a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800147e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001482:	bf0c      	ite	eq
 8001484:	2301      	moveq	r3, #1
 8001486:	2300      	movne	r3, #0
 8001488:	b2db      	uxtb	r3, r3
 800148a:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001492:	b2db      	uxtb	r3, r3
 8001494:	2ba0      	cmp	r3, #160	@ 0xa0
 8001496:	d005      	beq.n	80014a4 <HAL_I2C_IsDeviceReady+0x188>
 8001498:	7dfb      	ldrb	r3, [r7, #23]
 800149a:	2b00      	cmp	r3, #0
 800149c:	d102      	bne.n	80014a4 <HAL_I2C_IsDeviceReady+0x188>
 800149e:	7dbb      	ldrb	r3, [r7, #22]
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d0cd      	beq.n	8001440 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	2220      	movs	r2, #32
 80014a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 80014ac:	68fb      	ldr	r3, [r7, #12]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	695b      	ldr	r3, [r3, #20]
 80014b2:	f003 0302 	and.w	r3, r3, #2
 80014b6:	2b02      	cmp	r3, #2
 80014b8:	d129      	bne.n	800150e <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80014ba:	68fb      	ldr	r3, [r7, #12]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	681a      	ldr	r2, [r3, #0]
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80014c8:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80014ca:	2300      	movs	r3, #0
 80014cc:	613b      	str	r3, [r7, #16]
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	695b      	ldr	r3, [r3, #20]
 80014d4:	613b      	str	r3, [r7, #16]
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	699b      	ldr	r3, [r3, #24]
 80014dc:	613b      	str	r3, [r7, #16]
 80014de:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80014e0:	69fb      	ldr	r3, [r7, #28]
 80014e2:	9300      	str	r3, [sp, #0]
 80014e4:	2319      	movs	r3, #25
 80014e6:	2201      	movs	r2, #1
 80014e8:	4921      	ldr	r1, [pc, #132]	@ (8001570 <HAL_I2C_IsDeviceReady+0x254>)
 80014ea:	68f8      	ldr	r0, [r7, #12]
 80014ec:	f000 f8c6 	bl	800167c <I2C_WaitOnFlagUntilTimeout>
 80014f0:	4603      	mov	r3, r0
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d001      	beq.n	80014fa <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 80014f6:	2301      	movs	r3, #1
 80014f8:	e036      	b.n	8001568 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 80014fa:	68fb      	ldr	r3, [r7, #12]
 80014fc:	2220      	movs	r2, #32
 80014fe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001502:	68fb      	ldr	r3, [r7, #12]
 8001504:	2200      	movs	r2, #0
 8001506:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 800150a:	2300      	movs	r3, #0
 800150c:	e02c      	b.n	8001568 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	681a      	ldr	r2, [r3, #0]
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800151c:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800151e:	68fb      	ldr	r3, [r7, #12]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8001526:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001528:	69fb      	ldr	r3, [r7, #28]
 800152a:	9300      	str	r3, [sp, #0]
 800152c:	2319      	movs	r3, #25
 800152e:	2201      	movs	r2, #1
 8001530:	490f      	ldr	r1, [pc, #60]	@ (8001570 <HAL_I2C_IsDeviceReady+0x254>)
 8001532:	68f8      	ldr	r0, [r7, #12]
 8001534:	f000 f8a2 	bl	800167c <I2C_WaitOnFlagUntilTimeout>
 8001538:	4603      	mov	r3, r0
 800153a:	2b00      	cmp	r3, #0
 800153c:	d001      	beq.n	8001542 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 800153e:	2301      	movs	r3, #1
 8001540:	e012      	b.n	8001568 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8001542:	69bb      	ldr	r3, [r7, #24]
 8001544:	3301      	adds	r3, #1
 8001546:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8001548:	69ba      	ldr	r2, [r7, #24]
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	429a      	cmp	r2, r3
 800154e:	f4ff af32 	bcc.w	80013b6 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	2220      	movs	r2, #32
 8001556:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800155a:	68fb      	ldr	r3, [r7, #12]
 800155c:	2200      	movs	r2, #0
 800155e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8001562:	2301      	movs	r3, #1
 8001564:	e000      	b.n	8001568 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8001566:	2302      	movs	r3, #2
  }
}
 8001568:	4618      	mov	r0, r3
 800156a:	3720      	adds	r7, #32
 800156c:	46bd      	mov	sp, r7
 800156e:	bd80      	pop	{r7, pc}
 8001570:	00100002 	.word	0x00100002
 8001574:	ffff0000 	.word	0xffff0000

08001578 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	b088      	sub	sp, #32
 800157c:	af02      	add	r7, sp, #8
 800157e:	60f8      	str	r0, [r7, #12]
 8001580:	607a      	str	r2, [r7, #4]
 8001582:	603b      	str	r3, [r7, #0]
 8001584:	460b      	mov	r3, r1
 8001586:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800158c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800158e:	697b      	ldr	r3, [r7, #20]
 8001590:	2b08      	cmp	r3, #8
 8001592:	d006      	beq.n	80015a2 <I2C_MasterRequestWrite+0x2a>
 8001594:	697b      	ldr	r3, [r7, #20]
 8001596:	2b01      	cmp	r3, #1
 8001598:	d003      	beq.n	80015a2 <I2C_MasterRequestWrite+0x2a>
 800159a:	697b      	ldr	r3, [r7, #20]
 800159c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80015a0:	d108      	bne.n	80015b4 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	681a      	ldr	r2, [r3, #0]
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80015b0:	601a      	str	r2, [r3, #0]
 80015b2:	e00b      	b.n	80015cc <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015b8:	2b12      	cmp	r3, #18
 80015ba:	d107      	bne.n	80015cc <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	681a      	ldr	r2, [r3, #0]
 80015c2:	68fb      	ldr	r3, [r7, #12]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80015ca:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80015cc:	683b      	ldr	r3, [r7, #0]
 80015ce:	9300      	str	r3, [sp, #0]
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	2200      	movs	r2, #0
 80015d4:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80015d8:	68f8      	ldr	r0, [r7, #12]
 80015da:	f000 f84f 	bl	800167c <I2C_WaitOnFlagUntilTimeout>
 80015de:	4603      	mov	r3, r0
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d00d      	beq.n	8001600 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80015ee:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80015f2:	d103      	bne.n	80015fc <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80015fa:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80015fc:	2303      	movs	r3, #3
 80015fe:	e035      	b.n	800166c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	691b      	ldr	r3, [r3, #16]
 8001604:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8001608:	d108      	bne.n	800161c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800160a:	897b      	ldrh	r3, [r7, #10]
 800160c:	b2db      	uxtb	r3, r3
 800160e:	461a      	mov	r2, r3
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8001618:	611a      	str	r2, [r3, #16]
 800161a:	e01b      	b.n	8001654 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800161c:	897b      	ldrh	r3, [r7, #10]
 800161e:	11db      	asrs	r3, r3, #7
 8001620:	b2db      	uxtb	r3, r3
 8001622:	f003 0306 	and.w	r3, r3, #6
 8001626:	b2db      	uxtb	r3, r3
 8001628:	f063 030f 	orn	r3, r3, #15
 800162c:	b2da      	uxtb	r2, r3
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001634:	683b      	ldr	r3, [r7, #0]
 8001636:	687a      	ldr	r2, [r7, #4]
 8001638:	490e      	ldr	r1, [pc, #56]	@ (8001674 <I2C_MasterRequestWrite+0xfc>)
 800163a:	68f8      	ldr	r0, [r7, #12]
 800163c:	f000 f898 	bl	8001770 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001640:	4603      	mov	r3, r0
 8001642:	2b00      	cmp	r3, #0
 8001644:	d001      	beq.n	800164a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8001646:	2301      	movs	r3, #1
 8001648:	e010      	b.n	800166c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800164a:	897b      	ldrh	r3, [r7, #10]
 800164c:	b2da      	uxtb	r2, r3
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001654:	683b      	ldr	r3, [r7, #0]
 8001656:	687a      	ldr	r2, [r7, #4]
 8001658:	4907      	ldr	r1, [pc, #28]	@ (8001678 <I2C_MasterRequestWrite+0x100>)
 800165a:	68f8      	ldr	r0, [r7, #12]
 800165c:	f000 f888 	bl	8001770 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001660:	4603      	mov	r3, r0
 8001662:	2b00      	cmp	r3, #0
 8001664:	d001      	beq.n	800166a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8001666:	2301      	movs	r3, #1
 8001668:	e000      	b.n	800166c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800166a:	2300      	movs	r3, #0
}
 800166c:	4618      	mov	r0, r3
 800166e:	3718      	adds	r7, #24
 8001670:	46bd      	mov	sp, r7
 8001672:	bd80      	pop	{r7, pc}
 8001674:	00010008 	.word	0x00010008
 8001678:	00010002 	.word	0x00010002

0800167c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	b084      	sub	sp, #16
 8001680:	af00      	add	r7, sp, #0
 8001682:	60f8      	str	r0, [r7, #12]
 8001684:	60b9      	str	r1, [r7, #8]
 8001686:	603b      	str	r3, [r7, #0]
 8001688:	4613      	mov	r3, r2
 800168a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800168c:	e048      	b.n	8001720 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800168e:	683b      	ldr	r3, [r7, #0]
 8001690:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001694:	d044      	beq.n	8001720 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001696:	f7ff fc2d 	bl	8000ef4 <HAL_GetTick>
 800169a:	4602      	mov	r2, r0
 800169c:	69bb      	ldr	r3, [r7, #24]
 800169e:	1ad3      	subs	r3, r2, r3
 80016a0:	683a      	ldr	r2, [r7, #0]
 80016a2:	429a      	cmp	r2, r3
 80016a4:	d302      	bcc.n	80016ac <I2C_WaitOnFlagUntilTimeout+0x30>
 80016a6:	683b      	ldr	r3, [r7, #0]
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d139      	bne.n	8001720 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80016ac:	68bb      	ldr	r3, [r7, #8]
 80016ae:	0c1b      	lsrs	r3, r3, #16
 80016b0:	b2db      	uxtb	r3, r3
 80016b2:	2b01      	cmp	r3, #1
 80016b4:	d10d      	bne.n	80016d2 <I2C_WaitOnFlagUntilTimeout+0x56>
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	695b      	ldr	r3, [r3, #20]
 80016bc:	43da      	mvns	r2, r3
 80016be:	68bb      	ldr	r3, [r7, #8]
 80016c0:	4013      	ands	r3, r2
 80016c2:	b29b      	uxth	r3, r3
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	bf0c      	ite	eq
 80016c8:	2301      	moveq	r3, #1
 80016ca:	2300      	movne	r3, #0
 80016cc:	b2db      	uxtb	r3, r3
 80016ce:	461a      	mov	r2, r3
 80016d0:	e00c      	b.n	80016ec <I2C_WaitOnFlagUntilTimeout+0x70>
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	699b      	ldr	r3, [r3, #24]
 80016d8:	43da      	mvns	r2, r3
 80016da:	68bb      	ldr	r3, [r7, #8]
 80016dc:	4013      	ands	r3, r2
 80016de:	b29b      	uxth	r3, r3
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	bf0c      	ite	eq
 80016e4:	2301      	moveq	r3, #1
 80016e6:	2300      	movne	r3, #0
 80016e8:	b2db      	uxtb	r3, r3
 80016ea:	461a      	mov	r2, r3
 80016ec:	79fb      	ldrb	r3, [r7, #7]
 80016ee:	429a      	cmp	r2, r3
 80016f0:	d116      	bne.n	8001720 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	2200      	movs	r2, #0
 80016f6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	2220      	movs	r2, #32
 80016fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	2200      	movs	r2, #0
 8001704:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800170c:	f043 0220 	orr.w	r2, r3, #32
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	2200      	movs	r2, #0
 8001718:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800171c:	2301      	movs	r3, #1
 800171e:	e023      	b.n	8001768 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001720:	68bb      	ldr	r3, [r7, #8]
 8001722:	0c1b      	lsrs	r3, r3, #16
 8001724:	b2db      	uxtb	r3, r3
 8001726:	2b01      	cmp	r3, #1
 8001728:	d10d      	bne.n	8001746 <I2C_WaitOnFlagUntilTimeout+0xca>
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	695b      	ldr	r3, [r3, #20]
 8001730:	43da      	mvns	r2, r3
 8001732:	68bb      	ldr	r3, [r7, #8]
 8001734:	4013      	ands	r3, r2
 8001736:	b29b      	uxth	r3, r3
 8001738:	2b00      	cmp	r3, #0
 800173a:	bf0c      	ite	eq
 800173c:	2301      	moveq	r3, #1
 800173e:	2300      	movne	r3, #0
 8001740:	b2db      	uxtb	r3, r3
 8001742:	461a      	mov	r2, r3
 8001744:	e00c      	b.n	8001760 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	699b      	ldr	r3, [r3, #24]
 800174c:	43da      	mvns	r2, r3
 800174e:	68bb      	ldr	r3, [r7, #8]
 8001750:	4013      	ands	r3, r2
 8001752:	b29b      	uxth	r3, r3
 8001754:	2b00      	cmp	r3, #0
 8001756:	bf0c      	ite	eq
 8001758:	2301      	moveq	r3, #1
 800175a:	2300      	movne	r3, #0
 800175c:	b2db      	uxtb	r3, r3
 800175e:	461a      	mov	r2, r3
 8001760:	79fb      	ldrb	r3, [r7, #7]
 8001762:	429a      	cmp	r2, r3
 8001764:	d093      	beq.n	800168e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001766:	2300      	movs	r3, #0
}
 8001768:	4618      	mov	r0, r3
 800176a:	3710      	adds	r7, #16
 800176c:	46bd      	mov	sp, r7
 800176e:	bd80      	pop	{r7, pc}

08001770 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	b084      	sub	sp, #16
 8001774:	af00      	add	r7, sp, #0
 8001776:	60f8      	str	r0, [r7, #12]
 8001778:	60b9      	str	r1, [r7, #8]
 800177a:	607a      	str	r2, [r7, #4]
 800177c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800177e:	e071      	b.n	8001864 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	695b      	ldr	r3, [r3, #20]
 8001786:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800178a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800178e:	d123      	bne.n	80017d8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	681a      	ldr	r2, [r3, #0]
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800179e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80017a8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	2200      	movs	r2, #0
 80017ae:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	2220      	movs	r2, #32
 80017b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	2200      	movs	r2, #0
 80017bc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017c4:	f043 0204 	orr.w	r2, r3, #4
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	2200      	movs	r2, #0
 80017d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80017d4:	2301      	movs	r3, #1
 80017d6:	e067      	b.n	80018a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80017de:	d041      	beq.n	8001864 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80017e0:	f7ff fb88 	bl	8000ef4 <HAL_GetTick>
 80017e4:	4602      	mov	r2, r0
 80017e6:	683b      	ldr	r3, [r7, #0]
 80017e8:	1ad3      	subs	r3, r2, r3
 80017ea:	687a      	ldr	r2, [r7, #4]
 80017ec:	429a      	cmp	r2, r3
 80017ee:	d302      	bcc.n	80017f6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d136      	bne.n	8001864 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80017f6:	68bb      	ldr	r3, [r7, #8]
 80017f8:	0c1b      	lsrs	r3, r3, #16
 80017fa:	b2db      	uxtb	r3, r3
 80017fc:	2b01      	cmp	r3, #1
 80017fe:	d10c      	bne.n	800181a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	695b      	ldr	r3, [r3, #20]
 8001806:	43da      	mvns	r2, r3
 8001808:	68bb      	ldr	r3, [r7, #8]
 800180a:	4013      	ands	r3, r2
 800180c:	b29b      	uxth	r3, r3
 800180e:	2b00      	cmp	r3, #0
 8001810:	bf14      	ite	ne
 8001812:	2301      	movne	r3, #1
 8001814:	2300      	moveq	r3, #0
 8001816:	b2db      	uxtb	r3, r3
 8001818:	e00b      	b.n	8001832 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	699b      	ldr	r3, [r3, #24]
 8001820:	43da      	mvns	r2, r3
 8001822:	68bb      	ldr	r3, [r7, #8]
 8001824:	4013      	ands	r3, r2
 8001826:	b29b      	uxth	r3, r3
 8001828:	2b00      	cmp	r3, #0
 800182a:	bf14      	ite	ne
 800182c:	2301      	movne	r3, #1
 800182e:	2300      	moveq	r3, #0
 8001830:	b2db      	uxtb	r3, r3
 8001832:	2b00      	cmp	r3, #0
 8001834:	d016      	beq.n	8001864 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	2200      	movs	r2, #0
 800183a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	2220      	movs	r2, #32
 8001840:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	2200      	movs	r2, #0
 8001848:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001850:	f043 0220 	orr.w	r2, r3, #32
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	2200      	movs	r2, #0
 800185c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001860:	2301      	movs	r3, #1
 8001862:	e021      	b.n	80018a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001864:	68bb      	ldr	r3, [r7, #8]
 8001866:	0c1b      	lsrs	r3, r3, #16
 8001868:	b2db      	uxtb	r3, r3
 800186a:	2b01      	cmp	r3, #1
 800186c:	d10c      	bne.n	8001888 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	695b      	ldr	r3, [r3, #20]
 8001874:	43da      	mvns	r2, r3
 8001876:	68bb      	ldr	r3, [r7, #8]
 8001878:	4013      	ands	r3, r2
 800187a:	b29b      	uxth	r3, r3
 800187c:	2b00      	cmp	r3, #0
 800187e:	bf14      	ite	ne
 8001880:	2301      	movne	r3, #1
 8001882:	2300      	moveq	r3, #0
 8001884:	b2db      	uxtb	r3, r3
 8001886:	e00b      	b.n	80018a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	699b      	ldr	r3, [r3, #24]
 800188e:	43da      	mvns	r2, r3
 8001890:	68bb      	ldr	r3, [r7, #8]
 8001892:	4013      	ands	r3, r2
 8001894:	b29b      	uxth	r3, r3
 8001896:	2b00      	cmp	r3, #0
 8001898:	bf14      	ite	ne
 800189a:	2301      	movne	r3, #1
 800189c:	2300      	moveq	r3, #0
 800189e:	b2db      	uxtb	r3, r3
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	f47f af6d 	bne.w	8001780 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80018a6:	2300      	movs	r3, #0
}
 80018a8:	4618      	mov	r0, r3
 80018aa:	3710      	adds	r7, #16
 80018ac:	46bd      	mov	sp, r7
 80018ae:	bd80      	pop	{r7, pc}

080018b0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b084      	sub	sp, #16
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	60f8      	str	r0, [r7, #12]
 80018b8:	60b9      	str	r1, [r7, #8]
 80018ba:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80018bc:	e034      	b.n	8001928 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80018be:	68f8      	ldr	r0, [r7, #12]
 80018c0:	f000 f886 	bl	80019d0 <I2C_IsAcknowledgeFailed>
 80018c4:	4603      	mov	r3, r0
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d001      	beq.n	80018ce <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80018ca:	2301      	movs	r3, #1
 80018cc:	e034      	b.n	8001938 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80018ce:	68bb      	ldr	r3, [r7, #8]
 80018d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80018d4:	d028      	beq.n	8001928 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80018d6:	f7ff fb0d 	bl	8000ef4 <HAL_GetTick>
 80018da:	4602      	mov	r2, r0
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	1ad3      	subs	r3, r2, r3
 80018e0:	68ba      	ldr	r2, [r7, #8]
 80018e2:	429a      	cmp	r2, r3
 80018e4:	d302      	bcc.n	80018ec <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80018e6:	68bb      	ldr	r3, [r7, #8]
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d11d      	bne.n	8001928 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	695b      	ldr	r3, [r3, #20]
 80018f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80018f6:	2b80      	cmp	r3, #128	@ 0x80
 80018f8:	d016      	beq.n	8001928 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	2200      	movs	r2, #0
 80018fe:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	2220      	movs	r2, #32
 8001904:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	2200      	movs	r2, #0
 800190c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001914:	f043 0220 	orr.w	r2, r3, #32
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	2200      	movs	r2, #0
 8001920:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001924:	2301      	movs	r3, #1
 8001926:	e007      	b.n	8001938 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	695b      	ldr	r3, [r3, #20]
 800192e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001932:	2b80      	cmp	r3, #128	@ 0x80
 8001934:	d1c3      	bne.n	80018be <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8001936:	2300      	movs	r3, #0
}
 8001938:	4618      	mov	r0, r3
 800193a:	3710      	adds	r7, #16
 800193c:	46bd      	mov	sp, r7
 800193e:	bd80      	pop	{r7, pc}

08001940 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	b084      	sub	sp, #16
 8001944:	af00      	add	r7, sp, #0
 8001946:	60f8      	str	r0, [r7, #12]
 8001948:	60b9      	str	r1, [r7, #8]
 800194a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800194c:	e034      	b.n	80019b8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800194e:	68f8      	ldr	r0, [r7, #12]
 8001950:	f000 f83e 	bl	80019d0 <I2C_IsAcknowledgeFailed>
 8001954:	4603      	mov	r3, r0
 8001956:	2b00      	cmp	r3, #0
 8001958:	d001      	beq.n	800195e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800195a:	2301      	movs	r3, #1
 800195c:	e034      	b.n	80019c8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800195e:	68bb      	ldr	r3, [r7, #8]
 8001960:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001964:	d028      	beq.n	80019b8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001966:	f7ff fac5 	bl	8000ef4 <HAL_GetTick>
 800196a:	4602      	mov	r2, r0
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	1ad3      	subs	r3, r2, r3
 8001970:	68ba      	ldr	r2, [r7, #8]
 8001972:	429a      	cmp	r2, r3
 8001974:	d302      	bcc.n	800197c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8001976:	68bb      	ldr	r3, [r7, #8]
 8001978:	2b00      	cmp	r3, #0
 800197a:	d11d      	bne.n	80019b8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	695b      	ldr	r3, [r3, #20]
 8001982:	f003 0304 	and.w	r3, r3, #4
 8001986:	2b04      	cmp	r3, #4
 8001988:	d016      	beq.n	80019b8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	2200      	movs	r2, #0
 800198e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	2220      	movs	r2, #32
 8001994:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	2200      	movs	r2, #0
 800199c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019a4:	f043 0220 	orr.w	r2, r3, #32
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	2200      	movs	r2, #0
 80019b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80019b4:	2301      	movs	r3, #1
 80019b6:	e007      	b.n	80019c8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	695b      	ldr	r3, [r3, #20]
 80019be:	f003 0304 	and.w	r3, r3, #4
 80019c2:	2b04      	cmp	r3, #4
 80019c4:	d1c3      	bne.n	800194e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80019c6:	2300      	movs	r3, #0
}
 80019c8:	4618      	mov	r0, r3
 80019ca:	3710      	adds	r7, #16
 80019cc:	46bd      	mov	sp, r7
 80019ce:	bd80      	pop	{r7, pc}

080019d0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80019d0:	b480      	push	{r7}
 80019d2:	b083      	sub	sp, #12
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	695b      	ldr	r3, [r3, #20]
 80019de:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80019e2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80019e6:	d11b      	bne.n	8001a20 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80019f0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	2200      	movs	r2, #0
 80019f6:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	2220      	movs	r2, #32
 80019fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	2200      	movs	r2, #0
 8001a04:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a0c:	f043 0204 	orr.w	r2, r3, #4
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	2200      	movs	r2, #0
 8001a18:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8001a1c:	2301      	movs	r3, #1
 8001a1e:	e000      	b.n	8001a22 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8001a20:	2300      	movs	r3, #0
}
 8001a22:	4618      	mov	r0, r3
 8001a24:	370c      	adds	r7, #12
 8001a26:	46bd      	mov	sp, r7
 8001a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2c:	4770      	bx	lr
	...

08001a30 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	b086      	sub	sp, #24
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d101      	bne.n	8001a42 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001a3e:	2301      	movs	r3, #1
 8001a40:	e267      	b.n	8001f12 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	f003 0301 	and.w	r3, r3, #1
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d075      	beq.n	8001b3a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001a4e:	4b88      	ldr	r3, [pc, #544]	@ (8001c70 <HAL_RCC_OscConfig+0x240>)
 8001a50:	689b      	ldr	r3, [r3, #8]
 8001a52:	f003 030c 	and.w	r3, r3, #12
 8001a56:	2b04      	cmp	r3, #4
 8001a58:	d00c      	beq.n	8001a74 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001a5a:	4b85      	ldr	r3, [pc, #532]	@ (8001c70 <HAL_RCC_OscConfig+0x240>)
 8001a5c:	689b      	ldr	r3, [r3, #8]
 8001a5e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001a62:	2b08      	cmp	r3, #8
 8001a64:	d112      	bne.n	8001a8c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001a66:	4b82      	ldr	r3, [pc, #520]	@ (8001c70 <HAL_RCC_OscConfig+0x240>)
 8001a68:	685b      	ldr	r3, [r3, #4]
 8001a6a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001a6e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001a72:	d10b      	bne.n	8001a8c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a74:	4b7e      	ldr	r3, [pc, #504]	@ (8001c70 <HAL_RCC_OscConfig+0x240>)
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d05b      	beq.n	8001b38 <HAL_RCC_OscConfig+0x108>
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	685b      	ldr	r3, [r3, #4]
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d157      	bne.n	8001b38 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001a88:	2301      	movs	r3, #1
 8001a8a:	e242      	b.n	8001f12 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	685b      	ldr	r3, [r3, #4]
 8001a90:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001a94:	d106      	bne.n	8001aa4 <HAL_RCC_OscConfig+0x74>
 8001a96:	4b76      	ldr	r3, [pc, #472]	@ (8001c70 <HAL_RCC_OscConfig+0x240>)
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	4a75      	ldr	r2, [pc, #468]	@ (8001c70 <HAL_RCC_OscConfig+0x240>)
 8001a9c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001aa0:	6013      	str	r3, [r2, #0]
 8001aa2:	e01d      	b.n	8001ae0 <HAL_RCC_OscConfig+0xb0>
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	685b      	ldr	r3, [r3, #4]
 8001aa8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001aac:	d10c      	bne.n	8001ac8 <HAL_RCC_OscConfig+0x98>
 8001aae:	4b70      	ldr	r3, [pc, #448]	@ (8001c70 <HAL_RCC_OscConfig+0x240>)
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	4a6f      	ldr	r2, [pc, #444]	@ (8001c70 <HAL_RCC_OscConfig+0x240>)
 8001ab4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001ab8:	6013      	str	r3, [r2, #0]
 8001aba:	4b6d      	ldr	r3, [pc, #436]	@ (8001c70 <HAL_RCC_OscConfig+0x240>)
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	4a6c      	ldr	r2, [pc, #432]	@ (8001c70 <HAL_RCC_OscConfig+0x240>)
 8001ac0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001ac4:	6013      	str	r3, [r2, #0]
 8001ac6:	e00b      	b.n	8001ae0 <HAL_RCC_OscConfig+0xb0>
 8001ac8:	4b69      	ldr	r3, [pc, #420]	@ (8001c70 <HAL_RCC_OscConfig+0x240>)
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	4a68      	ldr	r2, [pc, #416]	@ (8001c70 <HAL_RCC_OscConfig+0x240>)
 8001ace:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001ad2:	6013      	str	r3, [r2, #0]
 8001ad4:	4b66      	ldr	r3, [pc, #408]	@ (8001c70 <HAL_RCC_OscConfig+0x240>)
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	4a65      	ldr	r2, [pc, #404]	@ (8001c70 <HAL_RCC_OscConfig+0x240>)
 8001ada:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001ade:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	685b      	ldr	r3, [r3, #4]
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d013      	beq.n	8001b10 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ae8:	f7ff fa04 	bl	8000ef4 <HAL_GetTick>
 8001aec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001aee:	e008      	b.n	8001b02 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001af0:	f7ff fa00 	bl	8000ef4 <HAL_GetTick>
 8001af4:	4602      	mov	r2, r0
 8001af6:	693b      	ldr	r3, [r7, #16]
 8001af8:	1ad3      	subs	r3, r2, r3
 8001afa:	2b64      	cmp	r3, #100	@ 0x64
 8001afc:	d901      	bls.n	8001b02 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001afe:	2303      	movs	r3, #3
 8001b00:	e207      	b.n	8001f12 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b02:	4b5b      	ldr	r3, [pc, #364]	@ (8001c70 <HAL_RCC_OscConfig+0x240>)
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d0f0      	beq.n	8001af0 <HAL_RCC_OscConfig+0xc0>
 8001b0e:	e014      	b.n	8001b3a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b10:	f7ff f9f0 	bl	8000ef4 <HAL_GetTick>
 8001b14:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b16:	e008      	b.n	8001b2a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b18:	f7ff f9ec 	bl	8000ef4 <HAL_GetTick>
 8001b1c:	4602      	mov	r2, r0
 8001b1e:	693b      	ldr	r3, [r7, #16]
 8001b20:	1ad3      	subs	r3, r2, r3
 8001b22:	2b64      	cmp	r3, #100	@ 0x64
 8001b24:	d901      	bls.n	8001b2a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001b26:	2303      	movs	r3, #3
 8001b28:	e1f3      	b.n	8001f12 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b2a:	4b51      	ldr	r3, [pc, #324]	@ (8001c70 <HAL_RCC_OscConfig+0x240>)
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d1f0      	bne.n	8001b18 <HAL_RCC_OscConfig+0xe8>
 8001b36:	e000      	b.n	8001b3a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b38:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	f003 0302 	and.w	r3, r3, #2
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d063      	beq.n	8001c0e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001b46:	4b4a      	ldr	r3, [pc, #296]	@ (8001c70 <HAL_RCC_OscConfig+0x240>)
 8001b48:	689b      	ldr	r3, [r3, #8]
 8001b4a:	f003 030c 	and.w	r3, r3, #12
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d00b      	beq.n	8001b6a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001b52:	4b47      	ldr	r3, [pc, #284]	@ (8001c70 <HAL_RCC_OscConfig+0x240>)
 8001b54:	689b      	ldr	r3, [r3, #8]
 8001b56:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001b5a:	2b08      	cmp	r3, #8
 8001b5c:	d11c      	bne.n	8001b98 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001b5e:	4b44      	ldr	r3, [pc, #272]	@ (8001c70 <HAL_RCC_OscConfig+0x240>)
 8001b60:	685b      	ldr	r3, [r3, #4]
 8001b62:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d116      	bne.n	8001b98 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b6a:	4b41      	ldr	r3, [pc, #260]	@ (8001c70 <HAL_RCC_OscConfig+0x240>)
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	f003 0302 	and.w	r3, r3, #2
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d005      	beq.n	8001b82 <HAL_RCC_OscConfig+0x152>
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	68db      	ldr	r3, [r3, #12]
 8001b7a:	2b01      	cmp	r3, #1
 8001b7c:	d001      	beq.n	8001b82 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001b7e:	2301      	movs	r3, #1
 8001b80:	e1c7      	b.n	8001f12 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b82:	4b3b      	ldr	r3, [pc, #236]	@ (8001c70 <HAL_RCC_OscConfig+0x240>)
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	691b      	ldr	r3, [r3, #16]
 8001b8e:	00db      	lsls	r3, r3, #3
 8001b90:	4937      	ldr	r1, [pc, #220]	@ (8001c70 <HAL_RCC_OscConfig+0x240>)
 8001b92:	4313      	orrs	r3, r2
 8001b94:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b96:	e03a      	b.n	8001c0e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	68db      	ldr	r3, [r3, #12]
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d020      	beq.n	8001be2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001ba0:	4b34      	ldr	r3, [pc, #208]	@ (8001c74 <HAL_RCC_OscConfig+0x244>)
 8001ba2:	2201      	movs	r2, #1
 8001ba4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ba6:	f7ff f9a5 	bl	8000ef4 <HAL_GetTick>
 8001baa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001bac:	e008      	b.n	8001bc0 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001bae:	f7ff f9a1 	bl	8000ef4 <HAL_GetTick>
 8001bb2:	4602      	mov	r2, r0
 8001bb4:	693b      	ldr	r3, [r7, #16]
 8001bb6:	1ad3      	subs	r3, r2, r3
 8001bb8:	2b02      	cmp	r3, #2
 8001bba:	d901      	bls.n	8001bc0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001bbc:	2303      	movs	r3, #3
 8001bbe:	e1a8      	b.n	8001f12 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001bc0:	4b2b      	ldr	r3, [pc, #172]	@ (8001c70 <HAL_RCC_OscConfig+0x240>)
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	f003 0302 	and.w	r3, r3, #2
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d0f0      	beq.n	8001bae <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bcc:	4b28      	ldr	r3, [pc, #160]	@ (8001c70 <HAL_RCC_OscConfig+0x240>)
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	691b      	ldr	r3, [r3, #16]
 8001bd8:	00db      	lsls	r3, r3, #3
 8001bda:	4925      	ldr	r1, [pc, #148]	@ (8001c70 <HAL_RCC_OscConfig+0x240>)
 8001bdc:	4313      	orrs	r3, r2
 8001bde:	600b      	str	r3, [r1, #0]
 8001be0:	e015      	b.n	8001c0e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001be2:	4b24      	ldr	r3, [pc, #144]	@ (8001c74 <HAL_RCC_OscConfig+0x244>)
 8001be4:	2200      	movs	r2, #0
 8001be6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001be8:	f7ff f984 	bl	8000ef4 <HAL_GetTick>
 8001bec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001bee:	e008      	b.n	8001c02 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001bf0:	f7ff f980 	bl	8000ef4 <HAL_GetTick>
 8001bf4:	4602      	mov	r2, r0
 8001bf6:	693b      	ldr	r3, [r7, #16]
 8001bf8:	1ad3      	subs	r3, r2, r3
 8001bfa:	2b02      	cmp	r3, #2
 8001bfc:	d901      	bls.n	8001c02 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001bfe:	2303      	movs	r3, #3
 8001c00:	e187      	b.n	8001f12 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c02:	4b1b      	ldr	r3, [pc, #108]	@ (8001c70 <HAL_RCC_OscConfig+0x240>)
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	f003 0302 	and.w	r3, r3, #2
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d1f0      	bne.n	8001bf0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f003 0308 	and.w	r3, r3, #8
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d036      	beq.n	8001c88 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	695b      	ldr	r3, [r3, #20]
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d016      	beq.n	8001c50 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001c22:	4b15      	ldr	r3, [pc, #84]	@ (8001c78 <HAL_RCC_OscConfig+0x248>)
 8001c24:	2201      	movs	r2, #1
 8001c26:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c28:	f7ff f964 	bl	8000ef4 <HAL_GetTick>
 8001c2c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c2e:	e008      	b.n	8001c42 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c30:	f7ff f960 	bl	8000ef4 <HAL_GetTick>
 8001c34:	4602      	mov	r2, r0
 8001c36:	693b      	ldr	r3, [r7, #16]
 8001c38:	1ad3      	subs	r3, r2, r3
 8001c3a:	2b02      	cmp	r3, #2
 8001c3c:	d901      	bls.n	8001c42 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001c3e:	2303      	movs	r3, #3
 8001c40:	e167      	b.n	8001f12 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c42:	4b0b      	ldr	r3, [pc, #44]	@ (8001c70 <HAL_RCC_OscConfig+0x240>)
 8001c44:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001c46:	f003 0302 	and.w	r3, r3, #2
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d0f0      	beq.n	8001c30 <HAL_RCC_OscConfig+0x200>
 8001c4e:	e01b      	b.n	8001c88 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001c50:	4b09      	ldr	r3, [pc, #36]	@ (8001c78 <HAL_RCC_OscConfig+0x248>)
 8001c52:	2200      	movs	r2, #0
 8001c54:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c56:	f7ff f94d 	bl	8000ef4 <HAL_GetTick>
 8001c5a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c5c:	e00e      	b.n	8001c7c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c5e:	f7ff f949 	bl	8000ef4 <HAL_GetTick>
 8001c62:	4602      	mov	r2, r0
 8001c64:	693b      	ldr	r3, [r7, #16]
 8001c66:	1ad3      	subs	r3, r2, r3
 8001c68:	2b02      	cmp	r3, #2
 8001c6a:	d907      	bls.n	8001c7c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001c6c:	2303      	movs	r3, #3
 8001c6e:	e150      	b.n	8001f12 <HAL_RCC_OscConfig+0x4e2>
 8001c70:	40023800 	.word	0x40023800
 8001c74:	42470000 	.word	0x42470000
 8001c78:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c7c:	4b88      	ldr	r3, [pc, #544]	@ (8001ea0 <HAL_RCC_OscConfig+0x470>)
 8001c7e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001c80:	f003 0302 	and.w	r3, r3, #2
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d1ea      	bne.n	8001c5e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	f003 0304 	and.w	r3, r3, #4
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	f000 8097 	beq.w	8001dc4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001c96:	2300      	movs	r3, #0
 8001c98:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c9a:	4b81      	ldr	r3, [pc, #516]	@ (8001ea0 <HAL_RCC_OscConfig+0x470>)
 8001c9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c9e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d10f      	bne.n	8001cc6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	60bb      	str	r3, [r7, #8]
 8001caa:	4b7d      	ldr	r3, [pc, #500]	@ (8001ea0 <HAL_RCC_OscConfig+0x470>)
 8001cac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cae:	4a7c      	ldr	r2, [pc, #496]	@ (8001ea0 <HAL_RCC_OscConfig+0x470>)
 8001cb0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001cb4:	6413      	str	r3, [r2, #64]	@ 0x40
 8001cb6:	4b7a      	ldr	r3, [pc, #488]	@ (8001ea0 <HAL_RCC_OscConfig+0x470>)
 8001cb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001cbe:	60bb      	str	r3, [r7, #8]
 8001cc0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001cc2:	2301      	movs	r3, #1
 8001cc4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cc6:	4b77      	ldr	r3, [pc, #476]	@ (8001ea4 <HAL_RCC_OscConfig+0x474>)
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d118      	bne.n	8001d04 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001cd2:	4b74      	ldr	r3, [pc, #464]	@ (8001ea4 <HAL_RCC_OscConfig+0x474>)
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	4a73      	ldr	r2, [pc, #460]	@ (8001ea4 <HAL_RCC_OscConfig+0x474>)
 8001cd8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001cdc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001cde:	f7ff f909 	bl	8000ef4 <HAL_GetTick>
 8001ce2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ce4:	e008      	b.n	8001cf8 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ce6:	f7ff f905 	bl	8000ef4 <HAL_GetTick>
 8001cea:	4602      	mov	r2, r0
 8001cec:	693b      	ldr	r3, [r7, #16]
 8001cee:	1ad3      	subs	r3, r2, r3
 8001cf0:	2b02      	cmp	r3, #2
 8001cf2:	d901      	bls.n	8001cf8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001cf4:	2303      	movs	r3, #3
 8001cf6:	e10c      	b.n	8001f12 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cf8:	4b6a      	ldr	r3, [pc, #424]	@ (8001ea4 <HAL_RCC_OscConfig+0x474>)
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d0f0      	beq.n	8001ce6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	689b      	ldr	r3, [r3, #8]
 8001d08:	2b01      	cmp	r3, #1
 8001d0a:	d106      	bne.n	8001d1a <HAL_RCC_OscConfig+0x2ea>
 8001d0c:	4b64      	ldr	r3, [pc, #400]	@ (8001ea0 <HAL_RCC_OscConfig+0x470>)
 8001d0e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d10:	4a63      	ldr	r2, [pc, #396]	@ (8001ea0 <HAL_RCC_OscConfig+0x470>)
 8001d12:	f043 0301 	orr.w	r3, r3, #1
 8001d16:	6713      	str	r3, [r2, #112]	@ 0x70
 8001d18:	e01c      	b.n	8001d54 <HAL_RCC_OscConfig+0x324>
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	689b      	ldr	r3, [r3, #8]
 8001d1e:	2b05      	cmp	r3, #5
 8001d20:	d10c      	bne.n	8001d3c <HAL_RCC_OscConfig+0x30c>
 8001d22:	4b5f      	ldr	r3, [pc, #380]	@ (8001ea0 <HAL_RCC_OscConfig+0x470>)
 8001d24:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d26:	4a5e      	ldr	r2, [pc, #376]	@ (8001ea0 <HAL_RCC_OscConfig+0x470>)
 8001d28:	f043 0304 	orr.w	r3, r3, #4
 8001d2c:	6713      	str	r3, [r2, #112]	@ 0x70
 8001d2e:	4b5c      	ldr	r3, [pc, #368]	@ (8001ea0 <HAL_RCC_OscConfig+0x470>)
 8001d30:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d32:	4a5b      	ldr	r2, [pc, #364]	@ (8001ea0 <HAL_RCC_OscConfig+0x470>)
 8001d34:	f043 0301 	orr.w	r3, r3, #1
 8001d38:	6713      	str	r3, [r2, #112]	@ 0x70
 8001d3a:	e00b      	b.n	8001d54 <HAL_RCC_OscConfig+0x324>
 8001d3c:	4b58      	ldr	r3, [pc, #352]	@ (8001ea0 <HAL_RCC_OscConfig+0x470>)
 8001d3e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d40:	4a57      	ldr	r2, [pc, #348]	@ (8001ea0 <HAL_RCC_OscConfig+0x470>)
 8001d42:	f023 0301 	bic.w	r3, r3, #1
 8001d46:	6713      	str	r3, [r2, #112]	@ 0x70
 8001d48:	4b55      	ldr	r3, [pc, #340]	@ (8001ea0 <HAL_RCC_OscConfig+0x470>)
 8001d4a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d4c:	4a54      	ldr	r2, [pc, #336]	@ (8001ea0 <HAL_RCC_OscConfig+0x470>)
 8001d4e:	f023 0304 	bic.w	r3, r3, #4
 8001d52:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	689b      	ldr	r3, [r3, #8]
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d015      	beq.n	8001d88 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d5c:	f7ff f8ca 	bl	8000ef4 <HAL_GetTick>
 8001d60:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d62:	e00a      	b.n	8001d7a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d64:	f7ff f8c6 	bl	8000ef4 <HAL_GetTick>
 8001d68:	4602      	mov	r2, r0
 8001d6a:	693b      	ldr	r3, [r7, #16]
 8001d6c:	1ad3      	subs	r3, r2, r3
 8001d6e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001d72:	4293      	cmp	r3, r2
 8001d74:	d901      	bls.n	8001d7a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001d76:	2303      	movs	r3, #3
 8001d78:	e0cb      	b.n	8001f12 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d7a:	4b49      	ldr	r3, [pc, #292]	@ (8001ea0 <HAL_RCC_OscConfig+0x470>)
 8001d7c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d7e:	f003 0302 	and.w	r3, r3, #2
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d0ee      	beq.n	8001d64 <HAL_RCC_OscConfig+0x334>
 8001d86:	e014      	b.n	8001db2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d88:	f7ff f8b4 	bl	8000ef4 <HAL_GetTick>
 8001d8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d8e:	e00a      	b.n	8001da6 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d90:	f7ff f8b0 	bl	8000ef4 <HAL_GetTick>
 8001d94:	4602      	mov	r2, r0
 8001d96:	693b      	ldr	r3, [r7, #16]
 8001d98:	1ad3      	subs	r3, r2, r3
 8001d9a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001d9e:	4293      	cmp	r3, r2
 8001da0:	d901      	bls.n	8001da6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001da2:	2303      	movs	r3, #3
 8001da4:	e0b5      	b.n	8001f12 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001da6:	4b3e      	ldr	r3, [pc, #248]	@ (8001ea0 <HAL_RCC_OscConfig+0x470>)
 8001da8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001daa:	f003 0302 	and.w	r3, r3, #2
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d1ee      	bne.n	8001d90 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001db2:	7dfb      	ldrb	r3, [r7, #23]
 8001db4:	2b01      	cmp	r3, #1
 8001db6:	d105      	bne.n	8001dc4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001db8:	4b39      	ldr	r3, [pc, #228]	@ (8001ea0 <HAL_RCC_OscConfig+0x470>)
 8001dba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dbc:	4a38      	ldr	r2, [pc, #224]	@ (8001ea0 <HAL_RCC_OscConfig+0x470>)
 8001dbe:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001dc2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	699b      	ldr	r3, [r3, #24]
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	f000 80a1 	beq.w	8001f10 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001dce:	4b34      	ldr	r3, [pc, #208]	@ (8001ea0 <HAL_RCC_OscConfig+0x470>)
 8001dd0:	689b      	ldr	r3, [r3, #8]
 8001dd2:	f003 030c 	and.w	r3, r3, #12
 8001dd6:	2b08      	cmp	r3, #8
 8001dd8:	d05c      	beq.n	8001e94 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	699b      	ldr	r3, [r3, #24]
 8001dde:	2b02      	cmp	r3, #2
 8001de0:	d141      	bne.n	8001e66 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001de2:	4b31      	ldr	r3, [pc, #196]	@ (8001ea8 <HAL_RCC_OscConfig+0x478>)
 8001de4:	2200      	movs	r2, #0
 8001de6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001de8:	f7ff f884 	bl	8000ef4 <HAL_GetTick>
 8001dec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001dee:	e008      	b.n	8001e02 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001df0:	f7ff f880 	bl	8000ef4 <HAL_GetTick>
 8001df4:	4602      	mov	r2, r0
 8001df6:	693b      	ldr	r3, [r7, #16]
 8001df8:	1ad3      	subs	r3, r2, r3
 8001dfa:	2b02      	cmp	r3, #2
 8001dfc:	d901      	bls.n	8001e02 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001dfe:	2303      	movs	r3, #3
 8001e00:	e087      	b.n	8001f12 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e02:	4b27      	ldr	r3, [pc, #156]	@ (8001ea0 <HAL_RCC_OscConfig+0x470>)
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d1f0      	bne.n	8001df0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	69da      	ldr	r2, [r3, #28]
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	6a1b      	ldr	r3, [r3, #32]
 8001e16:	431a      	orrs	r2, r3
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e1c:	019b      	lsls	r3, r3, #6
 8001e1e:	431a      	orrs	r2, r3
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e24:	085b      	lsrs	r3, r3, #1
 8001e26:	3b01      	subs	r3, #1
 8001e28:	041b      	lsls	r3, r3, #16
 8001e2a:	431a      	orrs	r2, r3
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e30:	061b      	lsls	r3, r3, #24
 8001e32:	491b      	ldr	r1, [pc, #108]	@ (8001ea0 <HAL_RCC_OscConfig+0x470>)
 8001e34:	4313      	orrs	r3, r2
 8001e36:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001e38:	4b1b      	ldr	r3, [pc, #108]	@ (8001ea8 <HAL_RCC_OscConfig+0x478>)
 8001e3a:	2201      	movs	r2, #1
 8001e3c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e3e:	f7ff f859 	bl	8000ef4 <HAL_GetTick>
 8001e42:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e44:	e008      	b.n	8001e58 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e46:	f7ff f855 	bl	8000ef4 <HAL_GetTick>
 8001e4a:	4602      	mov	r2, r0
 8001e4c:	693b      	ldr	r3, [r7, #16]
 8001e4e:	1ad3      	subs	r3, r2, r3
 8001e50:	2b02      	cmp	r3, #2
 8001e52:	d901      	bls.n	8001e58 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001e54:	2303      	movs	r3, #3
 8001e56:	e05c      	b.n	8001f12 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e58:	4b11      	ldr	r3, [pc, #68]	@ (8001ea0 <HAL_RCC_OscConfig+0x470>)
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d0f0      	beq.n	8001e46 <HAL_RCC_OscConfig+0x416>
 8001e64:	e054      	b.n	8001f10 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e66:	4b10      	ldr	r3, [pc, #64]	@ (8001ea8 <HAL_RCC_OscConfig+0x478>)
 8001e68:	2200      	movs	r2, #0
 8001e6a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e6c:	f7ff f842 	bl	8000ef4 <HAL_GetTick>
 8001e70:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e72:	e008      	b.n	8001e86 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e74:	f7ff f83e 	bl	8000ef4 <HAL_GetTick>
 8001e78:	4602      	mov	r2, r0
 8001e7a:	693b      	ldr	r3, [r7, #16]
 8001e7c:	1ad3      	subs	r3, r2, r3
 8001e7e:	2b02      	cmp	r3, #2
 8001e80:	d901      	bls.n	8001e86 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001e82:	2303      	movs	r3, #3
 8001e84:	e045      	b.n	8001f12 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e86:	4b06      	ldr	r3, [pc, #24]	@ (8001ea0 <HAL_RCC_OscConfig+0x470>)
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d1f0      	bne.n	8001e74 <HAL_RCC_OscConfig+0x444>
 8001e92:	e03d      	b.n	8001f10 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	699b      	ldr	r3, [r3, #24]
 8001e98:	2b01      	cmp	r3, #1
 8001e9a:	d107      	bne.n	8001eac <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001e9c:	2301      	movs	r3, #1
 8001e9e:	e038      	b.n	8001f12 <HAL_RCC_OscConfig+0x4e2>
 8001ea0:	40023800 	.word	0x40023800
 8001ea4:	40007000 	.word	0x40007000
 8001ea8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001eac:	4b1b      	ldr	r3, [pc, #108]	@ (8001f1c <HAL_RCC_OscConfig+0x4ec>)
 8001eae:	685b      	ldr	r3, [r3, #4]
 8001eb0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	699b      	ldr	r3, [r3, #24]
 8001eb6:	2b01      	cmp	r3, #1
 8001eb8:	d028      	beq.n	8001f0c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001ec4:	429a      	cmp	r2, r3
 8001ec6:	d121      	bne.n	8001f0c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ed2:	429a      	cmp	r2, r3
 8001ed4:	d11a      	bne.n	8001f0c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001ed6:	68fa      	ldr	r2, [r7, #12]
 8001ed8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001edc:	4013      	ands	r3, r2
 8001ede:	687a      	ldr	r2, [r7, #4]
 8001ee0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001ee2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001ee4:	4293      	cmp	r3, r2
 8001ee6:	d111      	bne.n	8001f0c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ef2:	085b      	lsrs	r3, r3, #1
 8001ef4:	3b01      	subs	r3, #1
 8001ef6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001ef8:	429a      	cmp	r2, r3
 8001efa:	d107      	bne.n	8001f0c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f06:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001f08:	429a      	cmp	r2, r3
 8001f0a:	d001      	beq.n	8001f10 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8001f0c:	2301      	movs	r3, #1
 8001f0e:	e000      	b.n	8001f12 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001f10:	2300      	movs	r3, #0
}
 8001f12:	4618      	mov	r0, r3
 8001f14:	3718      	adds	r7, #24
 8001f16:	46bd      	mov	sp, r7
 8001f18:	bd80      	pop	{r7, pc}
 8001f1a:	bf00      	nop
 8001f1c:	40023800 	.word	0x40023800

08001f20 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	b084      	sub	sp, #16
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]
 8001f28:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d101      	bne.n	8001f34 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001f30:	2301      	movs	r3, #1
 8001f32:	e0cc      	b.n	80020ce <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001f34:	4b68      	ldr	r3, [pc, #416]	@ (80020d8 <HAL_RCC_ClockConfig+0x1b8>)
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f003 0307 	and.w	r3, r3, #7
 8001f3c:	683a      	ldr	r2, [r7, #0]
 8001f3e:	429a      	cmp	r2, r3
 8001f40:	d90c      	bls.n	8001f5c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f42:	4b65      	ldr	r3, [pc, #404]	@ (80020d8 <HAL_RCC_ClockConfig+0x1b8>)
 8001f44:	683a      	ldr	r2, [r7, #0]
 8001f46:	b2d2      	uxtb	r2, r2
 8001f48:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f4a:	4b63      	ldr	r3, [pc, #396]	@ (80020d8 <HAL_RCC_ClockConfig+0x1b8>)
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f003 0307 	and.w	r3, r3, #7
 8001f52:	683a      	ldr	r2, [r7, #0]
 8001f54:	429a      	cmp	r2, r3
 8001f56:	d001      	beq.n	8001f5c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001f58:	2301      	movs	r3, #1
 8001f5a:	e0b8      	b.n	80020ce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	f003 0302 	and.w	r3, r3, #2
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d020      	beq.n	8001faa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	f003 0304 	and.w	r3, r3, #4
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d005      	beq.n	8001f80 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001f74:	4b59      	ldr	r3, [pc, #356]	@ (80020dc <HAL_RCC_ClockConfig+0x1bc>)
 8001f76:	689b      	ldr	r3, [r3, #8]
 8001f78:	4a58      	ldr	r2, [pc, #352]	@ (80020dc <HAL_RCC_ClockConfig+0x1bc>)
 8001f7a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001f7e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f003 0308 	and.w	r3, r3, #8
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d005      	beq.n	8001f98 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001f8c:	4b53      	ldr	r3, [pc, #332]	@ (80020dc <HAL_RCC_ClockConfig+0x1bc>)
 8001f8e:	689b      	ldr	r3, [r3, #8]
 8001f90:	4a52      	ldr	r2, [pc, #328]	@ (80020dc <HAL_RCC_ClockConfig+0x1bc>)
 8001f92:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001f96:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f98:	4b50      	ldr	r3, [pc, #320]	@ (80020dc <HAL_RCC_ClockConfig+0x1bc>)
 8001f9a:	689b      	ldr	r3, [r3, #8]
 8001f9c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	689b      	ldr	r3, [r3, #8]
 8001fa4:	494d      	ldr	r1, [pc, #308]	@ (80020dc <HAL_RCC_ClockConfig+0x1bc>)
 8001fa6:	4313      	orrs	r3, r2
 8001fa8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	f003 0301 	and.w	r3, r3, #1
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d044      	beq.n	8002040 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	685b      	ldr	r3, [r3, #4]
 8001fba:	2b01      	cmp	r3, #1
 8001fbc:	d107      	bne.n	8001fce <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fbe:	4b47      	ldr	r3, [pc, #284]	@ (80020dc <HAL_RCC_ClockConfig+0x1bc>)
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d119      	bne.n	8001ffe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001fca:	2301      	movs	r3, #1
 8001fcc:	e07f      	b.n	80020ce <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	685b      	ldr	r3, [r3, #4]
 8001fd2:	2b02      	cmp	r3, #2
 8001fd4:	d003      	beq.n	8001fde <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001fda:	2b03      	cmp	r3, #3
 8001fdc:	d107      	bne.n	8001fee <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001fde:	4b3f      	ldr	r3, [pc, #252]	@ (80020dc <HAL_RCC_ClockConfig+0x1bc>)
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d109      	bne.n	8001ffe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001fea:	2301      	movs	r3, #1
 8001fec:	e06f      	b.n	80020ce <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fee:	4b3b      	ldr	r3, [pc, #236]	@ (80020dc <HAL_RCC_ClockConfig+0x1bc>)
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f003 0302 	and.w	r3, r3, #2
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d101      	bne.n	8001ffe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ffa:	2301      	movs	r3, #1
 8001ffc:	e067      	b.n	80020ce <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001ffe:	4b37      	ldr	r3, [pc, #220]	@ (80020dc <HAL_RCC_ClockConfig+0x1bc>)
 8002000:	689b      	ldr	r3, [r3, #8]
 8002002:	f023 0203 	bic.w	r2, r3, #3
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	685b      	ldr	r3, [r3, #4]
 800200a:	4934      	ldr	r1, [pc, #208]	@ (80020dc <HAL_RCC_ClockConfig+0x1bc>)
 800200c:	4313      	orrs	r3, r2
 800200e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002010:	f7fe ff70 	bl	8000ef4 <HAL_GetTick>
 8002014:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002016:	e00a      	b.n	800202e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002018:	f7fe ff6c 	bl	8000ef4 <HAL_GetTick>
 800201c:	4602      	mov	r2, r0
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	1ad3      	subs	r3, r2, r3
 8002022:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002026:	4293      	cmp	r3, r2
 8002028:	d901      	bls.n	800202e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800202a:	2303      	movs	r3, #3
 800202c:	e04f      	b.n	80020ce <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800202e:	4b2b      	ldr	r3, [pc, #172]	@ (80020dc <HAL_RCC_ClockConfig+0x1bc>)
 8002030:	689b      	ldr	r3, [r3, #8]
 8002032:	f003 020c 	and.w	r2, r3, #12
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	685b      	ldr	r3, [r3, #4]
 800203a:	009b      	lsls	r3, r3, #2
 800203c:	429a      	cmp	r2, r3
 800203e:	d1eb      	bne.n	8002018 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002040:	4b25      	ldr	r3, [pc, #148]	@ (80020d8 <HAL_RCC_ClockConfig+0x1b8>)
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	f003 0307 	and.w	r3, r3, #7
 8002048:	683a      	ldr	r2, [r7, #0]
 800204a:	429a      	cmp	r2, r3
 800204c:	d20c      	bcs.n	8002068 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800204e:	4b22      	ldr	r3, [pc, #136]	@ (80020d8 <HAL_RCC_ClockConfig+0x1b8>)
 8002050:	683a      	ldr	r2, [r7, #0]
 8002052:	b2d2      	uxtb	r2, r2
 8002054:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002056:	4b20      	ldr	r3, [pc, #128]	@ (80020d8 <HAL_RCC_ClockConfig+0x1b8>)
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f003 0307 	and.w	r3, r3, #7
 800205e:	683a      	ldr	r2, [r7, #0]
 8002060:	429a      	cmp	r2, r3
 8002062:	d001      	beq.n	8002068 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002064:	2301      	movs	r3, #1
 8002066:	e032      	b.n	80020ce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	f003 0304 	and.w	r3, r3, #4
 8002070:	2b00      	cmp	r3, #0
 8002072:	d008      	beq.n	8002086 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002074:	4b19      	ldr	r3, [pc, #100]	@ (80020dc <HAL_RCC_ClockConfig+0x1bc>)
 8002076:	689b      	ldr	r3, [r3, #8]
 8002078:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	68db      	ldr	r3, [r3, #12]
 8002080:	4916      	ldr	r1, [pc, #88]	@ (80020dc <HAL_RCC_ClockConfig+0x1bc>)
 8002082:	4313      	orrs	r3, r2
 8002084:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f003 0308 	and.w	r3, r3, #8
 800208e:	2b00      	cmp	r3, #0
 8002090:	d009      	beq.n	80020a6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002092:	4b12      	ldr	r3, [pc, #72]	@ (80020dc <HAL_RCC_ClockConfig+0x1bc>)
 8002094:	689b      	ldr	r3, [r3, #8]
 8002096:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	691b      	ldr	r3, [r3, #16]
 800209e:	00db      	lsls	r3, r3, #3
 80020a0:	490e      	ldr	r1, [pc, #56]	@ (80020dc <HAL_RCC_ClockConfig+0x1bc>)
 80020a2:	4313      	orrs	r3, r2
 80020a4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80020a6:	f000 f821 	bl	80020ec <HAL_RCC_GetSysClockFreq>
 80020aa:	4602      	mov	r2, r0
 80020ac:	4b0b      	ldr	r3, [pc, #44]	@ (80020dc <HAL_RCC_ClockConfig+0x1bc>)
 80020ae:	689b      	ldr	r3, [r3, #8]
 80020b0:	091b      	lsrs	r3, r3, #4
 80020b2:	f003 030f 	and.w	r3, r3, #15
 80020b6:	490a      	ldr	r1, [pc, #40]	@ (80020e0 <HAL_RCC_ClockConfig+0x1c0>)
 80020b8:	5ccb      	ldrb	r3, [r1, r3]
 80020ba:	fa22 f303 	lsr.w	r3, r2, r3
 80020be:	4a09      	ldr	r2, [pc, #36]	@ (80020e4 <HAL_RCC_ClockConfig+0x1c4>)
 80020c0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80020c2:	4b09      	ldr	r3, [pc, #36]	@ (80020e8 <HAL_RCC_ClockConfig+0x1c8>)
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	4618      	mov	r0, r3
 80020c8:	f7fe fed0 	bl	8000e6c <HAL_InitTick>

  return HAL_OK;
 80020cc:	2300      	movs	r3, #0
}
 80020ce:	4618      	mov	r0, r3
 80020d0:	3710      	adds	r7, #16
 80020d2:	46bd      	mov	sp, r7
 80020d4:	bd80      	pop	{r7, pc}
 80020d6:	bf00      	nop
 80020d8:	40023c00 	.word	0x40023c00
 80020dc:	40023800 	.word	0x40023800
 80020e0:	08004ee8 	.word	0x08004ee8
 80020e4:	20000000 	.word	0x20000000
 80020e8:	20000004 	.word	0x20000004

080020ec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80020ec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80020f0:	b090      	sub	sp, #64	@ 0x40
 80020f2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80020f4:	2300      	movs	r3, #0
 80020f6:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 80020f8:	2300      	movs	r3, #0
 80020fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 80020fc:	2300      	movs	r3, #0
 80020fe:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8002100:	2300      	movs	r3, #0
 8002102:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002104:	4b59      	ldr	r3, [pc, #356]	@ (800226c <HAL_RCC_GetSysClockFreq+0x180>)
 8002106:	689b      	ldr	r3, [r3, #8]
 8002108:	f003 030c 	and.w	r3, r3, #12
 800210c:	2b08      	cmp	r3, #8
 800210e:	d00d      	beq.n	800212c <HAL_RCC_GetSysClockFreq+0x40>
 8002110:	2b08      	cmp	r3, #8
 8002112:	f200 80a1 	bhi.w	8002258 <HAL_RCC_GetSysClockFreq+0x16c>
 8002116:	2b00      	cmp	r3, #0
 8002118:	d002      	beq.n	8002120 <HAL_RCC_GetSysClockFreq+0x34>
 800211a:	2b04      	cmp	r3, #4
 800211c:	d003      	beq.n	8002126 <HAL_RCC_GetSysClockFreq+0x3a>
 800211e:	e09b      	b.n	8002258 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002120:	4b53      	ldr	r3, [pc, #332]	@ (8002270 <HAL_RCC_GetSysClockFreq+0x184>)
 8002122:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002124:	e09b      	b.n	800225e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002126:	4b53      	ldr	r3, [pc, #332]	@ (8002274 <HAL_RCC_GetSysClockFreq+0x188>)
 8002128:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800212a:	e098      	b.n	800225e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800212c:	4b4f      	ldr	r3, [pc, #316]	@ (800226c <HAL_RCC_GetSysClockFreq+0x180>)
 800212e:	685b      	ldr	r3, [r3, #4]
 8002130:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002134:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002136:	4b4d      	ldr	r3, [pc, #308]	@ (800226c <HAL_RCC_GetSysClockFreq+0x180>)
 8002138:	685b      	ldr	r3, [r3, #4]
 800213a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800213e:	2b00      	cmp	r3, #0
 8002140:	d028      	beq.n	8002194 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002142:	4b4a      	ldr	r3, [pc, #296]	@ (800226c <HAL_RCC_GetSysClockFreq+0x180>)
 8002144:	685b      	ldr	r3, [r3, #4]
 8002146:	099b      	lsrs	r3, r3, #6
 8002148:	2200      	movs	r2, #0
 800214a:	623b      	str	r3, [r7, #32]
 800214c:	627a      	str	r2, [r7, #36]	@ 0x24
 800214e:	6a3b      	ldr	r3, [r7, #32]
 8002150:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002154:	2100      	movs	r1, #0
 8002156:	4b47      	ldr	r3, [pc, #284]	@ (8002274 <HAL_RCC_GetSysClockFreq+0x188>)
 8002158:	fb03 f201 	mul.w	r2, r3, r1
 800215c:	2300      	movs	r3, #0
 800215e:	fb00 f303 	mul.w	r3, r0, r3
 8002162:	4413      	add	r3, r2
 8002164:	4a43      	ldr	r2, [pc, #268]	@ (8002274 <HAL_RCC_GetSysClockFreq+0x188>)
 8002166:	fba0 1202 	umull	r1, r2, r0, r2
 800216a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800216c:	460a      	mov	r2, r1
 800216e:	62ba      	str	r2, [r7, #40]	@ 0x28
 8002170:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002172:	4413      	add	r3, r2
 8002174:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002176:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002178:	2200      	movs	r2, #0
 800217a:	61bb      	str	r3, [r7, #24]
 800217c:	61fa      	str	r2, [r7, #28]
 800217e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002182:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8002186:	f7fe f825 	bl	80001d4 <__aeabi_uldivmod>
 800218a:	4602      	mov	r2, r0
 800218c:	460b      	mov	r3, r1
 800218e:	4613      	mov	r3, r2
 8002190:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002192:	e053      	b.n	800223c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002194:	4b35      	ldr	r3, [pc, #212]	@ (800226c <HAL_RCC_GetSysClockFreq+0x180>)
 8002196:	685b      	ldr	r3, [r3, #4]
 8002198:	099b      	lsrs	r3, r3, #6
 800219a:	2200      	movs	r2, #0
 800219c:	613b      	str	r3, [r7, #16]
 800219e:	617a      	str	r2, [r7, #20]
 80021a0:	693b      	ldr	r3, [r7, #16]
 80021a2:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80021a6:	f04f 0b00 	mov.w	fp, #0
 80021aa:	4652      	mov	r2, sl
 80021ac:	465b      	mov	r3, fp
 80021ae:	f04f 0000 	mov.w	r0, #0
 80021b2:	f04f 0100 	mov.w	r1, #0
 80021b6:	0159      	lsls	r1, r3, #5
 80021b8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80021bc:	0150      	lsls	r0, r2, #5
 80021be:	4602      	mov	r2, r0
 80021c0:	460b      	mov	r3, r1
 80021c2:	ebb2 080a 	subs.w	r8, r2, sl
 80021c6:	eb63 090b 	sbc.w	r9, r3, fp
 80021ca:	f04f 0200 	mov.w	r2, #0
 80021ce:	f04f 0300 	mov.w	r3, #0
 80021d2:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80021d6:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80021da:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80021de:	ebb2 0408 	subs.w	r4, r2, r8
 80021e2:	eb63 0509 	sbc.w	r5, r3, r9
 80021e6:	f04f 0200 	mov.w	r2, #0
 80021ea:	f04f 0300 	mov.w	r3, #0
 80021ee:	00eb      	lsls	r3, r5, #3
 80021f0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80021f4:	00e2      	lsls	r2, r4, #3
 80021f6:	4614      	mov	r4, r2
 80021f8:	461d      	mov	r5, r3
 80021fa:	eb14 030a 	adds.w	r3, r4, sl
 80021fe:	603b      	str	r3, [r7, #0]
 8002200:	eb45 030b 	adc.w	r3, r5, fp
 8002204:	607b      	str	r3, [r7, #4]
 8002206:	f04f 0200 	mov.w	r2, #0
 800220a:	f04f 0300 	mov.w	r3, #0
 800220e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002212:	4629      	mov	r1, r5
 8002214:	028b      	lsls	r3, r1, #10
 8002216:	4621      	mov	r1, r4
 8002218:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800221c:	4621      	mov	r1, r4
 800221e:	028a      	lsls	r2, r1, #10
 8002220:	4610      	mov	r0, r2
 8002222:	4619      	mov	r1, r3
 8002224:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002226:	2200      	movs	r2, #0
 8002228:	60bb      	str	r3, [r7, #8]
 800222a:	60fa      	str	r2, [r7, #12]
 800222c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002230:	f7fd ffd0 	bl	80001d4 <__aeabi_uldivmod>
 8002234:	4602      	mov	r2, r0
 8002236:	460b      	mov	r3, r1
 8002238:	4613      	mov	r3, r2
 800223a:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800223c:	4b0b      	ldr	r3, [pc, #44]	@ (800226c <HAL_RCC_GetSysClockFreq+0x180>)
 800223e:	685b      	ldr	r3, [r3, #4]
 8002240:	0c1b      	lsrs	r3, r3, #16
 8002242:	f003 0303 	and.w	r3, r3, #3
 8002246:	3301      	adds	r3, #1
 8002248:	005b      	lsls	r3, r3, #1
 800224a:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 800224c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800224e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002250:	fbb2 f3f3 	udiv	r3, r2, r3
 8002254:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002256:	e002      	b.n	800225e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002258:	4b05      	ldr	r3, [pc, #20]	@ (8002270 <HAL_RCC_GetSysClockFreq+0x184>)
 800225a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800225c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800225e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8002260:	4618      	mov	r0, r3
 8002262:	3740      	adds	r7, #64	@ 0x40
 8002264:	46bd      	mov	sp, r7
 8002266:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800226a:	bf00      	nop
 800226c:	40023800 	.word	0x40023800
 8002270:	00f42400 	.word	0x00f42400
 8002274:	017d7840 	.word	0x017d7840

08002278 <memset>:
 8002278:	4402      	add	r2, r0
 800227a:	4603      	mov	r3, r0
 800227c:	4293      	cmp	r3, r2
 800227e:	d100      	bne.n	8002282 <memset+0xa>
 8002280:	4770      	bx	lr
 8002282:	f803 1b01 	strb.w	r1, [r3], #1
 8002286:	e7f9      	b.n	800227c <memset+0x4>

08002288 <__libc_init_array>:
 8002288:	b570      	push	{r4, r5, r6, lr}
 800228a:	4d0d      	ldr	r5, [pc, #52]	@ (80022c0 <__libc_init_array+0x38>)
 800228c:	4c0d      	ldr	r4, [pc, #52]	@ (80022c4 <__libc_init_array+0x3c>)
 800228e:	1b64      	subs	r4, r4, r5
 8002290:	10a4      	asrs	r4, r4, #2
 8002292:	2600      	movs	r6, #0
 8002294:	42a6      	cmp	r6, r4
 8002296:	d109      	bne.n	80022ac <__libc_init_array+0x24>
 8002298:	4d0b      	ldr	r5, [pc, #44]	@ (80022c8 <__libc_init_array+0x40>)
 800229a:	4c0c      	ldr	r4, [pc, #48]	@ (80022cc <__libc_init_array+0x44>)
 800229c:	f000 f818 	bl	80022d0 <_init>
 80022a0:	1b64      	subs	r4, r4, r5
 80022a2:	10a4      	asrs	r4, r4, #2
 80022a4:	2600      	movs	r6, #0
 80022a6:	42a6      	cmp	r6, r4
 80022a8:	d105      	bne.n	80022b6 <__libc_init_array+0x2e>
 80022aa:	bd70      	pop	{r4, r5, r6, pc}
 80022ac:	f855 3b04 	ldr.w	r3, [r5], #4
 80022b0:	4798      	blx	r3
 80022b2:	3601      	adds	r6, #1
 80022b4:	e7ee      	b.n	8002294 <__libc_init_array+0xc>
 80022b6:	f855 3b04 	ldr.w	r3, [r5], #4
 80022ba:	4798      	blx	r3
 80022bc:	3601      	adds	r6, #1
 80022be:	e7f2      	b.n	80022a6 <__libc_init_array+0x1e>
 80022c0:	08004f00 	.word	0x08004f00
 80022c4:	08004f00 	.word	0x08004f00
 80022c8:	08004f00 	.word	0x08004f00
 80022cc:	08004f04 	.word	0x08004f04

080022d0 <_init>:
 80022d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80022d2:	bf00      	nop
 80022d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80022d6:	bc08      	pop	{r3}
 80022d8:	469e      	mov	lr, r3
 80022da:	4770      	bx	lr

080022dc <_fini>:
 80022dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80022de:	bf00      	nop
 80022e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80022e2:	bc08      	pop	{r3}
 80022e4:	469e      	mov	lr, r3
 80022e6:	4770      	bx	lr
