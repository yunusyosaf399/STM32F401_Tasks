/**
 ******************************************************************************
 * @file           : main.c
 * @author         : Auto-generated by STM32CubeIDE
 * @brief          : Main program body
 ******************************************************************************
 * @attention
 *
 * Copyright (c) 2025 STMicroelectronics.
 * All rights reserved.
 *
 * This software is licensed under terms that can be found in the LICENSE file
 * in the root directory of this software component.
 * If no LICENSE file comes with this software, it is provided AS-IS.
 *
 ******************************************************************************
 */

#include <stdint.h>

void RCC_Init(void) {
    // Enable clock to USART1 (APB2)
    RCC->APB2ENR |= RCC_APB2ENR_USART1EN;   // USART1 Clock Enable
    // Enable clock to GPIOA (Assuming PA9 is TX and PA10 is RX)
    RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN;    // GPIOA Clock Enable
}
void GPIO_Init(void) {
    // Set PA9 and PA10 to alternate function mode (AF7 for USART1)
    GPIOA->MODER &= ~((0x3 << (9 * 2)) | (0x3 << (10 * 2))); // Clear mode bits for PA9, PA10
    GPIOA->MODER |= (0x2 << (9 * 2)) | (0x2 << (10 * 2));    // Set alternate function mode

    // Set PA9 (TX) and PA10 (RX) to AF7 (USART1)
    GPIOA->AFR[1] |= (0x7 << (1 * 4));  // PA9 -> AF7 (USART1_TX)
    GPIOA->AFR[1] |= (0x7 << (2 * 4));  // PA10 -> AF7 (USART1_RX)
}

void UART_Init(void) {
    // Enable USART1
    USART1->CR1 &= ~USART_CR1_UE;  // Disable USART before configuration

    // Set baud rate: (F_CPU / BaudRate)
    // For 9600 baud with 16 MHz system clock:
    USART1->BRR = 25000000 / 115200;

    // Word Length: 8 bits (default)
    USART1->CR1 &= ~USART_CR1_M;

    // Stop bits: 1 stop bit (default)
    USART1->CR1 &= ~USART_CR1_STOP;

    // Enable Transmitter (TE) and Receiver (RE)
    USART1->CR1 |= USART_CR1_TE | USART_CR1_RE;

    // Enable USART1
    USART1->CR1 |= USART_CR1_UE;
}

void UART_SendByte(uint8_t data) {
    // Wait until TXE (Transmit Data Register Empty) is set
    while (!(USART1->SR & USART_SR_TXE)) {
        // Wait until transmit buffer is ready
    }

    // Write data to the data register
    USART1->DR = data;
}


void UART_SendString(const char* str) {
    while (*str) {
        UART_SendByte(*str++);
    }
}

void delay(volatile uint32_t delay_time) {
    while (delay_time--) {
        // Do nothing, just wait
    }
}


int main(void) {
    // Initialize system clock and peripherals
    RCC_Init();
    GPIO_Init();
    UART_Init();

    // Send a string over UART in an infinite loop with a delay
    while (1) {
        UART_SendString("Hello, UART!\n");
        delay(1000000);  // Delay for a while (adjust the number to control the speed)
    }

    return 0;
}
