/* USER CODE BEGIN Header */

/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */

/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */

/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/

/* USER CODE BEGIN PV */
void GPIOB_Setup(void) {
    // Enable GPIOB clock
    RCC->AHB1ENR |= (1U << 1);  // Bit 1 enables GPIOB clock

    // Set PB0 as output mode (MODER register)
    GPIOB->MODER &= ~(3U << (0 * 2)); // Clear bits (0 * 2)
    GPIOB->MODER |= (1U << (0 * 2));  // Set bits to 01 (Output mode)

    // Set PB0 speed to high-speed (OSPEEDR register)
    GPIOB->OSPEEDR &= ~(3U << (0 * 2)); // Clear speed bits
    GPIOB->OSPEEDR |= (2U << (0 * 2));  // Set bits to 10 (High speed)
}

/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
/* USER CODE BEGIN PFP */
void Timer2_Delay_ms(uint32_t delay) {
    // Enable TIM2 clock
    RCC->APB1ENR |= (1U << 0);

    // Configure TIM2
    TIM2->PSC = 83999;  // Prescaler for 1ms tick (TIM2 Clock = 84MHz)
    TIM2->ARR = delay;  // Auto-reload value (delay in ms)

    // Reset counter and start timer
    TIM2->CNT = 0;
    TIM2->CR1 |= (1U << 0);

    // Wait for update flag (UIF) to set
    while (!(TIM2->SR & (1U << 0)));

    // Clear UIF flag
    TIM2->SR &= ~(1U << 0);

    // Stop Timer
    TIM2->CR1 &= ~(1U << 0);
}
void GPIOB_Toggle(void) {
    GPIOB->ODR ^= (1U << 0);  // Toggle PB0
}
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{

  HAL_Init();


  SystemClock_Config();

  MX_GPIO_Init();
  GPIOB_Setup();

     while (1) {
         GPIOB_Toggle();
         Timer2_Delay_ms(1000);  // Exact 1-second delay

     }
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void) {
    // Enable HSE (High-Speed External) Clock
    RCC->CR |= (1U << 16);  // HSEON (Enable External Clock)
    while (!(RCC->CR & (1U << 17))); // Wait for HSE to be Ready (HSERDY)

    // Configure PLL
    RCC->PLLCFGR = (25U << 0)  |  // PLL_M = 25 (Divides 25MHz to 1MHz)
                   (336U << 6) |  // PLL_N = 336 (Multiplies 1MHz to 336MHz)
                   (0U << 16)  |  // PLL_P = 4 (Divides 336MHz to 84MHz)
                   (7U << 24)  |  // PLL_Q = 7 (For USB)
                   (1U << 22);   // Set HSE as PLL Source

    // Enable PLL
    RCC->CR |= (1U << 24);  // PLLON
    while (!(RCC->CR & (1U << 25))); // Wait for PLL to be Ready (PLLRDY)

    // Set System Clock to PLL
    RCC->CFGR |= (2U << 0);  // SW = 2 (Select PLL as System Clock)
    while ((RCC->CFGR & (3U << 2)) != (2U << 2)); // Wait for PLL to be System Clock
}


/**
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}

/* USER CODE BEGIN 4 */

/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
  }
  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */
