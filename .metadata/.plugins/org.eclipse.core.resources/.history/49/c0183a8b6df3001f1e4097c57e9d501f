#include "stm32f4xx.h"

// Define GPIO pins for 7-segment (PB0 to PB7)
#define SEG_A   GPIO_PIN_0
#define SEG_B   GPIO_PIN_1
#define SEG_C   GPIO_PIN_2
#define SEG_D   GPIO_PIN_3
#define SEG_E   GPIO_PIN_4
#define SEG_F   GPIO_PIN_5
#define SEG_G   GPIO_PIN_6
#define DP      GPIO_PIN_7

// 7-Segment Number Display Encoding (Common Cathode)
uint8_t Seven_Segment_Char[10] = {
    0x3F,  // 0
    0x06,  // 1
    0x5B,  // 2
    0x4F,  // 3
    0x66,  // 4
    0x6D,  // 5
    0x7D,  // 6
    0x07,  // 7
    0x7F,  // 8
    0x6F   // 9
};

void GPIO_Init(void) {
    // Enable GPIOB Clock (assuming you're using GPIOB for the 7-segment)
    RCC->AHB1ENR |= RCC_AHB1ENR_GPIOBEN;

    // Set PB0 to PB7 as output
    GPIOB->MODER &= ~(GPIO_MODER_MODE0_Msk | GPIO_MODER_MODE1_Msk | GPIO_MODER_MODE2_Msk | GPIO_MODER_MODE3_Msk |
                      GPIO_MODER_MODE4_Msk | GPIO_MODER_MODE5_Msk | GPIO_MODER_MODE6_Msk | GPIO_MODER_MODE7_Msk);  // Clear MODER bits
    GPIOB->MODER |= (GPIO_MODER_MODE0_0 | GPIO_MODER_MODE1_0 | GPIO_MODER_MODE2_0 | GPIO_MODER_MODE3_0 |
                     GPIO_MODER_MODE4_0 | GPIO_MODER_MODE5_0 | GPIO_MODER_MODE6_0 | GPIO_MODER_MODE7_0);  // Set output mode

    // Set output type to push-pull (default)
    GPIOB->OTYPER &= ~(GPIO_OTYPER_OT_0 | GPIO_OTYPER_OT_1 | GPIO_OTYPER_OT_2 | GPIO_OTYPER_OT_3 |
                       GPIO_OTYPER_OT_4 | GPIO_OTYPER_OT_5 | GPIO_OTYPER_OT_6 | GPIO_OTYPER_OT_7);  // Clear OT bits

    // Set output speed to high (default)
    GPIOB->OSPEEDR |= (GPIO_OSPEEDER_OSPEEDR0_1 | GPIO_OSPEEDER_OSPEEDR1_1 | GPIO_OSPEEDER_OSPEEDR2_1 |
                       GPIO_OSPEEDER_OSPEEDR3_1 | GPIO_OSPEEDER_OSPEEDR4_1 | GPIO_OSPEEDER_OSPEEDR5_1 |
                       GPIO_OSPEEDER_OSPEEDR6_1 | GPIO_OSPEEDER_OSPEEDR7_1);  // Set high speed

    // Set pull-up/pull-down resistors to none (default)
    GPIOB->PUPDR &= ~(GPIO_PUPDR_PUPD0_Msk | GPIO_PUPDR_PUPD1_Msk | GPIO_PUPDR_PUPD2_Msk | GPIO_PUPDR_PUPD3_Msk |
                      GPIO_PUPDR_PUPD4_Msk | GPIO_PUPDR_PUPD5_Msk | GPIO_PUPDR_PUPD6_Msk | GPIO_PUPDR_PUPD7_Msk); // Clear PUPDR bits
}

void Display_On_7_Segment(uint8_t number) {
    // Set the pins to display the number on the 7-segment display
    GPIOB->ODR = (GPIOB->ODR & ~(SEG_A | SEG_B | SEG_C | SEG_D | SEG_E | SEG_F | SEG_G | DP)) |
                 (Seven_Segment_Char[number] & (SEG_A | SEG_B | SEG_C | SEG_D | SEG_E | SEG_F | SEG_G));  // Turn on appropriate segments

    // To turn on the decimal point (DP), use:
    // GPIOB->ODR |= DP;  // Turn on DP (decimal point)
    // To turn off the decimal point (DP), use:
    // GPIOB->ODR &= ~DP;  // Turn off DP (decimal point)
}

int main(void) {
    // Initialize GPIO for 7-segment display
    GPIO_Init();

    // Example: Display number 5
    Display_On_7_Segment(5);

    while (1) {
        // You can add logic to update the display, e.g., counting numbers
    }
}
