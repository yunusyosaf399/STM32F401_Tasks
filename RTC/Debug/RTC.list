
RTC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000035e8  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000090  08003788  08003788  00004788  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003818  08003818  0000505c  2**0
                  CONTENTS
  4 .ARM          00000008  08003818  08003818  00004818  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003820  08003820  0000505c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003820  08003820  00004820  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003824  08003824  00004824  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08003828  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001d4  2000005c  08003884  0000505c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000230  08003884  00005230  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000505c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a0c9  00000000  00000000  0000508c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001ae0  00000000  00000000  0000f155  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000008c8  00000000  00000000  00010c38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000006b5  00000000  00000000  00011500  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001586a  00000000  00000000  00011bb5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b04a  00000000  00000000  0002741f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000894d1  00000000  00000000  00032469  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000bb93a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000287c  00000000  00000000  000bb980  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005f  00000000  00000000  000be1fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000005c 	.word	0x2000005c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08003770 	.word	0x08003770

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000060 	.word	0x20000060
 80001dc:	08003770 	.word	0x08003770

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b96a 	b.w	800057c <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	460c      	mov	r4, r1
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	d14e      	bne.n	800036a <__udivmoddi4+0xaa>
 80002cc:	4694      	mov	ip, r2
 80002ce:	458c      	cmp	ip, r1
 80002d0:	4686      	mov	lr, r0
 80002d2:	fab2 f282 	clz	r2, r2
 80002d6:	d962      	bls.n	800039e <__udivmoddi4+0xde>
 80002d8:	b14a      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002da:	f1c2 0320 	rsb	r3, r2, #32
 80002de:	4091      	lsls	r1, r2
 80002e0:	fa20 f303 	lsr.w	r3, r0, r3
 80002e4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002e8:	4319      	orrs	r1, r3
 80002ea:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f2:	fa1f f68c 	uxth.w	r6, ip
 80002f6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002fe:	fb07 1114 	mls	r1, r7, r4, r1
 8000302:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000306:	fb04 f106 	mul.w	r1, r4, r6
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f104 30ff 	add.w	r0, r4, #4294967295
 8000316:	f080 8112 	bcs.w	800053e <__udivmoddi4+0x27e>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 810f 	bls.w	800053e <__udivmoddi4+0x27e>
 8000320:	3c02      	subs	r4, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a59      	subs	r1, r3, r1
 8000326:	fa1f f38e 	uxth.w	r3, lr
 800032a:	fbb1 f0f7 	udiv	r0, r1, r7
 800032e:	fb07 1110 	mls	r1, r7, r0, r1
 8000332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000336:	fb00 f606 	mul.w	r6, r0, r6
 800033a:	429e      	cmp	r6, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x94>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f100 31ff 	add.w	r1, r0, #4294967295
 8000346:	f080 80fc 	bcs.w	8000542 <__udivmoddi4+0x282>
 800034a:	429e      	cmp	r6, r3
 800034c:	f240 80f9 	bls.w	8000542 <__udivmoddi4+0x282>
 8000350:	4463      	add	r3, ip
 8000352:	3802      	subs	r0, #2
 8000354:	1b9b      	subs	r3, r3, r6
 8000356:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800035a:	2100      	movs	r1, #0
 800035c:	b11d      	cbz	r5, 8000366 <__udivmoddi4+0xa6>
 800035e:	40d3      	lsrs	r3, r2
 8000360:	2200      	movs	r2, #0
 8000362:	e9c5 3200 	strd	r3, r2, [r5]
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d905      	bls.n	800037a <__udivmoddi4+0xba>
 800036e:	b10d      	cbz	r5, 8000374 <__udivmoddi4+0xb4>
 8000370:	e9c5 0100 	strd	r0, r1, [r5]
 8000374:	2100      	movs	r1, #0
 8000376:	4608      	mov	r0, r1
 8000378:	e7f5      	b.n	8000366 <__udivmoddi4+0xa6>
 800037a:	fab3 f183 	clz	r1, r3
 800037e:	2900      	cmp	r1, #0
 8000380:	d146      	bne.n	8000410 <__udivmoddi4+0x150>
 8000382:	42a3      	cmp	r3, r4
 8000384:	d302      	bcc.n	800038c <__udivmoddi4+0xcc>
 8000386:	4290      	cmp	r0, r2
 8000388:	f0c0 80f0 	bcc.w	800056c <__udivmoddi4+0x2ac>
 800038c:	1a86      	subs	r6, r0, r2
 800038e:	eb64 0303 	sbc.w	r3, r4, r3
 8000392:	2001      	movs	r0, #1
 8000394:	2d00      	cmp	r5, #0
 8000396:	d0e6      	beq.n	8000366 <__udivmoddi4+0xa6>
 8000398:	e9c5 6300 	strd	r6, r3, [r5]
 800039c:	e7e3      	b.n	8000366 <__udivmoddi4+0xa6>
 800039e:	2a00      	cmp	r2, #0
 80003a0:	f040 8090 	bne.w	80004c4 <__udivmoddi4+0x204>
 80003a4:	eba1 040c 	sub.w	r4, r1, ip
 80003a8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003ac:	fa1f f78c 	uxth.w	r7, ip
 80003b0:	2101      	movs	r1, #1
 80003b2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003b6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ba:	fb08 4416 	mls	r4, r8, r6, r4
 80003be:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003c2:	fb07 f006 	mul.w	r0, r7, r6
 80003c6:	4298      	cmp	r0, r3
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x11c>
 80003ca:	eb1c 0303 	adds.w	r3, ip, r3
 80003ce:	f106 34ff 	add.w	r4, r6, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x11a>
 80003d4:	4298      	cmp	r0, r3
 80003d6:	f200 80cd 	bhi.w	8000574 <__udivmoddi4+0x2b4>
 80003da:	4626      	mov	r6, r4
 80003dc:	1a1c      	subs	r4, r3, r0
 80003de:	fa1f f38e 	uxth.w	r3, lr
 80003e2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003e6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ee:	fb00 f707 	mul.w	r7, r0, r7
 80003f2:	429f      	cmp	r7, r3
 80003f4:	d908      	bls.n	8000408 <__udivmoddi4+0x148>
 80003f6:	eb1c 0303 	adds.w	r3, ip, r3
 80003fa:	f100 34ff 	add.w	r4, r0, #4294967295
 80003fe:	d202      	bcs.n	8000406 <__udivmoddi4+0x146>
 8000400:	429f      	cmp	r7, r3
 8000402:	f200 80b0 	bhi.w	8000566 <__udivmoddi4+0x2a6>
 8000406:	4620      	mov	r0, r4
 8000408:	1bdb      	subs	r3, r3, r7
 800040a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800040e:	e7a5      	b.n	800035c <__udivmoddi4+0x9c>
 8000410:	f1c1 0620 	rsb	r6, r1, #32
 8000414:	408b      	lsls	r3, r1
 8000416:	fa22 f706 	lsr.w	r7, r2, r6
 800041a:	431f      	orrs	r7, r3
 800041c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000420:	fa04 f301 	lsl.w	r3, r4, r1
 8000424:	ea43 030c 	orr.w	r3, r3, ip
 8000428:	40f4      	lsrs	r4, r6
 800042a:	fa00 f801 	lsl.w	r8, r0, r1
 800042e:	0c38      	lsrs	r0, r7, #16
 8000430:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000434:	fbb4 fef0 	udiv	lr, r4, r0
 8000438:	fa1f fc87 	uxth.w	ip, r7
 800043c:	fb00 441e 	mls	r4, r0, lr, r4
 8000440:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000444:	fb0e f90c 	mul.w	r9, lr, ip
 8000448:	45a1      	cmp	r9, r4
 800044a:	fa02 f201 	lsl.w	r2, r2, r1
 800044e:	d90a      	bls.n	8000466 <__udivmoddi4+0x1a6>
 8000450:	193c      	adds	r4, r7, r4
 8000452:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000456:	f080 8084 	bcs.w	8000562 <__udivmoddi4+0x2a2>
 800045a:	45a1      	cmp	r9, r4
 800045c:	f240 8081 	bls.w	8000562 <__udivmoddi4+0x2a2>
 8000460:	f1ae 0e02 	sub.w	lr, lr, #2
 8000464:	443c      	add	r4, r7
 8000466:	eba4 0409 	sub.w	r4, r4, r9
 800046a:	fa1f f983 	uxth.w	r9, r3
 800046e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000472:	fb00 4413 	mls	r4, r0, r3, r4
 8000476:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800047a:	fb03 fc0c 	mul.w	ip, r3, ip
 800047e:	45a4      	cmp	ip, r4
 8000480:	d907      	bls.n	8000492 <__udivmoddi4+0x1d2>
 8000482:	193c      	adds	r4, r7, r4
 8000484:	f103 30ff 	add.w	r0, r3, #4294967295
 8000488:	d267      	bcs.n	800055a <__udivmoddi4+0x29a>
 800048a:	45a4      	cmp	ip, r4
 800048c:	d965      	bls.n	800055a <__udivmoddi4+0x29a>
 800048e:	3b02      	subs	r3, #2
 8000490:	443c      	add	r4, r7
 8000492:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000496:	fba0 9302 	umull	r9, r3, r0, r2
 800049a:	eba4 040c 	sub.w	r4, r4, ip
 800049e:	429c      	cmp	r4, r3
 80004a0:	46ce      	mov	lr, r9
 80004a2:	469c      	mov	ip, r3
 80004a4:	d351      	bcc.n	800054a <__udivmoddi4+0x28a>
 80004a6:	d04e      	beq.n	8000546 <__udivmoddi4+0x286>
 80004a8:	b155      	cbz	r5, 80004c0 <__udivmoddi4+0x200>
 80004aa:	ebb8 030e 	subs.w	r3, r8, lr
 80004ae:	eb64 040c 	sbc.w	r4, r4, ip
 80004b2:	fa04 f606 	lsl.w	r6, r4, r6
 80004b6:	40cb      	lsrs	r3, r1
 80004b8:	431e      	orrs	r6, r3
 80004ba:	40cc      	lsrs	r4, r1
 80004bc:	e9c5 6400 	strd	r6, r4, [r5]
 80004c0:	2100      	movs	r1, #0
 80004c2:	e750      	b.n	8000366 <__udivmoddi4+0xa6>
 80004c4:	f1c2 0320 	rsb	r3, r2, #32
 80004c8:	fa20 f103 	lsr.w	r1, r0, r3
 80004cc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d0:	fa24 f303 	lsr.w	r3, r4, r3
 80004d4:	4094      	lsls	r4, r2
 80004d6:	430c      	orrs	r4, r1
 80004d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004dc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004e0:	fa1f f78c 	uxth.w	r7, ip
 80004e4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004e8:	fb08 3110 	mls	r1, r8, r0, r3
 80004ec:	0c23      	lsrs	r3, r4, #16
 80004ee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004f2:	fb00 f107 	mul.w	r1, r0, r7
 80004f6:	4299      	cmp	r1, r3
 80004f8:	d908      	bls.n	800050c <__udivmoddi4+0x24c>
 80004fa:	eb1c 0303 	adds.w	r3, ip, r3
 80004fe:	f100 36ff 	add.w	r6, r0, #4294967295
 8000502:	d22c      	bcs.n	800055e <__udivmoddi4+0x29e>
 8000504:	4299      	cmp	r1, r3
 8000506:	d92a      	bls.n	800055e <__udivmoddi4+0x29e>
 8000508:	3802      	subs	r0, #2
 800050a:	4463      	add	r3, ip
 800050c:	1a5b      	subs	r3, r3, r1
 800050e:	b2a4      	uxth	r4, r4
 8000510:	fbb3 f1f8 	udiv	r1, r3, r8
 8000514:	fb08 3311 	mls	r3, r8, r1, r3
 8000518:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800051c:	fb01 f307 	mul.w	r3, r1, r7
 8000520:	42a3      	cmp	r3, r4
 8000522:	d908      	bls.n	8000536 <__udivmoddi4+0x276>
 8000524:	eb1c 0404 	adds.w	r4, ip, r4
 8000528:	f101 36ff 	add.w	r6, r1, #4294967295
 800052c:	d213      	bcs.n	8000556 <__udivmoddi4+0x296>
 800052e:	42a3      	cmp	r3, r4
 8000530:	d911      	bls.n	8000556 <__udivmoddi4+0x296>
 8000532:	3902      	subs	r1, #2
 8000534:	4464      	add	r4, ip
 8000536:	1ae4      	subs	r4, r4, r3
 8000538:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800053c:	e739      	b.n	80003b2 <__udivmoddi4+0xf2>
 800053e:	4604      	mov	r4, r0
 8000540:	e6f0      	b.n	8000324 <__udivmoddi4+0x64>
 8000542:	4608      	mov	r0, r1
 8000544:	e706      	b.n	8000354 <__udivmoddi4+0x94>
 8000546:	45c8      	cmp	r8, r9
 8000548:	d2ae      	bcs.n	80004a8 <__udivmoddi4+0x1e8>
 800054a:	ebb9 0e02 	subs.w	lr, r9, r2
 800054e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000552:	3801      	subs	r0, #1
 8000554:	e7a8      	b.n	80004a8 <__udivmoddi4+0x1e8>
 8000556:	4631      	mov	r1, r6
 8000558:	e7ed      	b.n	8000536 <__udivmoddi4+0x276>
 800055a:	4603      	mov	r3, r0
 800055c:	e799      	b.n	8000492 <__udivmoddi4+0x1d2>
 800055e:	4630      	mov	r0, r6
 8000560:	e7d4      	b.n	800050c <__udivmoddi4+0x24c>
 8000562:	46d6      	mov	lr, sl
 8000564:	e77f      	b.n	8000466 <__udivmoddi4+0x1a6>
 8000566:	4463      	add	r3, ip
 8000568:	3802      	subs	r0, #2
 800056a:	e74d      	b.n	8000408 <__udivmoddi4+0x148>
 800056c:	4606      	mov	r6, r0
 800056e:	4623      	mov	r3, r4
 8000570:	4608      	mov	r0, r1
 8000572:	e70f      	b.n	8000394 <__udivmoddi4+0xd4>
 8000574:	3e02      	subs	r6, #2
 8000576:	4463      	add	r3, ip
 8000578:	e730      	b.n	80003dc <__udivmoddi4+0x11c>
 800057a:	bf00      	nop

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <Send_RTC_Time>:
RTC_HandleTypeDef hrtc;

UART_HandleTypeDef huart1;


void Send_RTC_Time(void) {
 8000580:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000582:	b09b      	sub	sp, #108	@ 0x6c
 8000584:	af06      	add	r7, sp, #24
    RTC_TimeTypeDef sTime;
    RTC_DateTypeDef sDate;
    char buffer[50];

    // Get the RTC current time and date
    HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8000586:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800058a:	2200      	movs	r2, #0
 800058c:	4619      	mov	r1, r3
 800058e:	481a      	ldr	r0, [pc, #104]	@ (80005f8 <Send_RTC_Time+0x78>)
 8000590:	f001 fcab 	bl	8001eea <HAL_RTC_GetTime>
    HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN); // Necessary to unlock RTC shadow registers
 8000594:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000598:	2200      	movs	r2, #0
 800059a:	4619      	mov	r1, r3
 800059c:	4816      	ldr	r0, [pc, #88]	@ (80005f8 <Send_RTC_Time+0x78>)
 800059e:	f001 fd86 	bl	80020ae <HAL_RTC_GetDate>

    // Format the string
    snprintf(buffer, sizeof(buffer), "Time: %02d:%02d:%02d Date: %02d-%02d-20%02d\r\n",
             sTime.Hours, sTime.Minutes, sTime.Seconds,
 80005a2:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
    snprintf(buffer, sizeof(buffer), "Time: %02d:%02d:%02d Date: %02d-%02d-20%02d\r\n",
 80005a6:	461e      	mov	r6, r3
             sTime.Hours, sTime.Minutes, sTime.Seconds,
 80005a8:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 80005ac:	f897 203e 	ldrb.w	r2, [r7, #62]	@ 0x3e
             sDate.Date, sDate.Month, sDate.Year);
 80005b0:	f897 103a 	ldrb.w	r1, [r7, #58]	@ 0x3a
 80005b4:	f897 0039 	ldrb.w	r0, [r7, #57]	@ 0x39
    snprintf(buffer, sizeof(buffer), "Time: %02d:%02d:%02d Date: %02d-%02d-20%02d\r\n",
 80005b8:	4604      	mov	r4, r0
             sDate.Date, sDate.Month, sDate.Year);
 80005ba:	f897 003b 	ldrb.w	r0, [r7, #59]	@ 0x3b
    snprintf(buffer, sizeof(buffer), "Time: %02d:%02d:%02d Date: %02d-%02d-20%02d\r\n",
 80005be:	4605      	mov	r5, r0
 80005c0:	1d38      	adds	r0, r7, #4
 80005c2:	9504      	str	r5, [sp, #16]
 80005c4:	9403      	str	r4, [sp, #12]
 80005c6:	9102      	str	r1, [sp, #8]
 80005c8:	9201      	str	r2, [sp, #4]
 80005ca:	9300      	str	r3, [sp, #0]
 80005cc:	4633      	mov	r3, r6
 80005ce:	4a0b      	ldr	r2, [pc, #44]	@ (80005fc <Send_RTC_Time+0x7c>)
 80005d0:	2132      	movs	r1, #50	@ 0x32
 80005d2:	f002 fc19 	bl	8002e08 <sniprintf>

    // Send it over UART
    HAL_UART_Transmit(&huart1, (uint8_t *)buffer, strlen(buffer), HAL_MAX_DELAY);
 80005d6:	1d3b      	adds	r3, r7, #4
 80005d8:	4618      	mov	r0, r3
 80005da:	f7ff fe01 	bl	80001e0 <strlen>
 80005de:	4603      	mov	r3, r0
 80005e0:	b29a      	uxth	r2, r3
 80005e2:	1d39      	adds	r1, r7, #4
 80005e4:	f04f 33ff 	mov.w	r3, #4294967295
 80005e8:	4805      	ldr	r0, [pc, #20]	@ (8000600 <Send_RTC_Time+0x80>)
 80005ea:	f002 f851 	bl	8002690 <HAL_UART_Transmit>
}
 80005ee:	bf00      	nop
 80005f0:	3754      	adds	r7, #84	@ 0x54
 80005f2:	46bd      	mov	sp, r7
 80005f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80005f6:	bf00      	nop
 80005f8:	20000078 	.word	0x20000078
 80005fc:	08003788 	.word	0x08003788
 8000600:	20000098 	.word	0x20000098

08000604 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000608:	f000 fae0 	bl	8000bcc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800060c:	f000 f80e 	bl	800062c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000610:	f000 f92a 	bl	8000868 <MX_GPIO_Init>
  MX_RTC_Init();
 8000614:	f000 f86c 	bl	80006f0 <MX_RTC_Init>
  MX_USART1_UART_Init();
 8000618:	f000 f8fc 	bl	8000814 <MX_USART1_UART_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  Send_RTC_Time(); // Send RTC time over UART
 800061c:	f7ff ffb0 	bl	8000580 <Send_RTC_Time>
	  HAL_Delay(1000); // Wait 1 second
 8000620:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000624:	f000 fb44 	bl	8000cb0 <HAL_Delay>
	  Send_RTC_Time(); // Send RTC time over UART
 8000628:	bf00      	nop
 800062a:	e7f7      	b.n	800061c <main+0x18>

0800062c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	b094      	sub	sp, #80	@ 0x50
 8000630:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000632:	f107 0320 	add.w	r3, r7, #32
 8000636:	2230      	movs	r2, #48	@ 0x30
 8000638:	2100      	movs	r1, #0
 800063a:	4618      	mov	r0, r3
 800063c:	f002 fc18 	bl	8002e70 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000640:	f107 030c 	add.w	r3, r7, #12
 8000644:	2200      	movs	r2, #0
 8000646:	601a      	str	r2, [r3, #0]
 8000648:	605a      	str	r2, [r3, #4]
 800064a:	609a      	str	r2, [r3, #8]
 800064c:	60da      	str	r2, [r3, #12]
 800064e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000650:	2300      	movs	r3, #0
 8000652:	60bb      	str	r3, [r7, #8]
 8000654:	4b24      	ldr	r3, [pc, #144]	@ (80006e8 <SystemClock_Config+0xbc>)
 8000656:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000658:	4a23      	ldr	r2, [pc, #140]	@ (80006e8 <SystemClock_Config+0xbc>)
 800065a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800065e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000660:	4b21      	ldr	r3, [pc, #132]	@ (80006e8 <SystemClock_Config+0xbc>)
 8000662:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000664:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000668:	60bb      	str	r3, [r7, #8]
 800066a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800066c:	2300      	movs	r3, #0
 800066e:	607b      	str	r3, [r7, #4]
 8000670:	4b1e      	ldr	r3, [pc, #120]	@ (80006ec <SystemClock_Config+0xc0>)
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000678:	4a1c      	ldr	r2, [pc, #112]	@ (80006ec <SystemClock_Config+0xc0>)
 800067a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800067e:	6013      	str	r3, [r2, #0]
 8000680:	4b1a      	ldr	r3, [pc, #104]	@ (80006ec <SystemClock_Config+0xc0>)
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000688:	607b      	str	r3, [r7, #4]
 800068a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 800068c:	230a      	movs	r3, #10
 800068e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000690:	2301      	movs	r3, #1
 8000692:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000694:	2310      	movs	r3, #16
 8000696:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000698:	2301      	movs	r3, #1
 800069a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800069c:	2300      	movs	r3, #0
 800069e:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006a0:	f107 0320 	add.w	r3, r7, #32
 80006a4:	4618      	mov	r0, r3
 80006a6:	f000 fdbd 	bl	8001224 <HAL_RCC_OscConfig>
 80006aa:	4603      	mov	r3, r0
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	d001      	beq.n	80006b4 <SystemClock_Config+0x88>
  {
    Error_Handler();
 80006b0:	f000 f936 	bl	8000920 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006b4:	230f      	movs	r3, #15
 80006b6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80006b8:	2300      	movs	r3, #0
 80006ba:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006bc:	2300      	movs	r3, #0
 80006be:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006c0:	2300      	movs	r3, #0
 80006c2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006c4:	2300      	movs	r3, #0
 80006c6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80006c8:	f107 030c 	add.w	r3, r7, #12
 80006cc:	2100      	movs	r1, #0
 80006ce:	4618      	mov	r0, r3
 80006d0:	f001 f820 	bl	8001714 <HAL_RCC_ClockConfig>
 80006d4:	4603      	mov	r3, r0
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	d001      	beq.n	80006de <SystemClock_Config+0xb2>
  {
    Error_Handler();
 80006da:	f000 f921 	bl	8000920 <Error_Handler>
  }
}
 80006de:	bf00      	nop
 80006e0:	3750      	adds	r7, #80	@ 0x50
 80006e2:	46bd      	mov	sp, r7
 80006e4:	bd80      	pop	{r7, pc}
 80006e6:	bf00      	nop
 80006e8:	40023800 	.word	0x40023800
 80006ec:	40007000 	.word	0x40007000

080006f0 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b090      	sub	sp, #64	@ 0x40
 80006f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80006f6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80006fa:	2200      	movs	r2, #0
 80006fc:	601a      	str	r2, [r3, #0]
 80006fe:	605a      	str	r2, [r3, #4]
 8000700:	609a      	str	r2, [r3, #8]
 8000702:	60da      	str	r2, [r3, #12]
 8000704:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8000706:	2300      	movs	r3, #0
 8000708:	62bb      	str	r3, [r7, #40]	@ 0x28
  RTC_AlarmTypeDef sAlarm = {0};
 800070a:	463b      	mov	r3, r7
 800070c:	2228      	movs	r2, #40	@ 0x28
 800070e:	2100      	movs	r1, #0
 8000710:	4618      	mov	r0, r3
 8000712:	f002 fbad 	bl	8002e70 <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000716:	4b3d      	ldr	r3, [pc, #244]	@ (800080c <MX_RTC_Init+0x11c>)
 8000718:	4a3d      	ldr	r2, [pc, #244]	@ (8000810 <MX_RTC_Init+0x120>)
 800071a:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_12;
 800071c:	4b3b      	ldr	r3, [pc, #236]	@ (800080c <MX_RTC_Init+0x11c>)
 800071e:	2240      	movs	r2, #64	@ 0x40
 8000720:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000722:	4b3a      	ldr	r3, [pc, #232]	@ (800080c <MX_RTC_Init+0x11c>)
 8000724:	227f      	movs	r2, #127	@ 0x7f
 8000726:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000728:	4b38      	ldr	r3, [pc, #224]	@ (800080c <MX_RTC_Init+0x11c>)
 800072a:	22ff      	movs	r2, #255	@ 0xff
 800072c:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800072e:	4b37      	ldr	r3, [pc, #220]	@ (800080c <MX_RTC_Init+0x11c>)
 8000730:	2200      	movs	r2, #0
 8000732:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000734:	4b35      	ldr	r3, [pc, #212]	@ (800080c <MX_RTC_Init+0x11c>)
 8000736:	2200      	movs	r2, #0
 8000738:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800073a:	4b34      	ldr	r3, [pc, #208]	@ (800080c <MX_RTC_Init+0x11c>)
 800073c:	2200      	movs	r2, #0
 800073e:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000740:	4832      	ldr	r0, [pc, #200]	@ (800080c <MX_RTC_Init+0x11c>)
 8000742:	f001 fab5 	bl	8001cb0 <HAL_RTC_Init>
 8000746:	4603      	mov	r3, r0
 8000748:	2b00      	cmp	r3, #0
 800074a:	d001      	beq.n	8000750 <MX_RTC_Init+0x60>
  {
    Error_Handler();
 800074c:	f000 f8e8 	bl	8000920 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x1;
 8000750:	2301      	movs	r3, #1
 8000752:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  sTime.Minutes = 0x0;
 8000756:	2300      	movs	r3, #0
 8000758:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  sTime.Seconds = 0x0;
 800075c:	2300      	movs	r3, #0
 800075e:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
  sTime.TimeFormat = RTC_HOURFORMAT12_AM;
 8000762:	2300      	movs	r3, #0
 8000764:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000768:	2300      	movs	r3, #0
 800076a:	63bb      	str	r3, [r7, #56]	@ 0x38
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800076c:	2300      	movs	r3, #0
 800076e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8000770:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000774:	2201      	movs	r2, #1
 8000776:	4619      	mov	r1, r3
 8000778:	4824      	ldr	r0, [pc, #144]	@ (800080c <MX_RTC_Init+0x11c>)
 800077a:	f001 fb1c 	bl	8001db6 <HAL_RTC_SetTime>
 800077e:	4603      	mov	r3, r0
 8000780:	2b00      	cmp	r3, #0
 8000782:	d001      	beq.n	8000788 <MX_RTC_Init+0x98>
  {
    Error_Handler();
 8000784:	f000 f8cc 	bl	8000920 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000788:	2301      	movs	r3, #1
 800078a:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
  sDate.Month = RTC_MONTH_JANUARY;
 800078e:	2301      	movs	r3, #1
 8000790:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
  sDate.Date = 0x1;
 8000794:	2301      	movs	r3, #1
 8000796:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  sDate.Year = 0x0;
 800079a:	2300      	movs	r3, #0
 800079c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 80007a0:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80007a4:	2201      	movs	r2, #1
 80007a6:	4619      	mov	r1, r3
 80007a8:	4818      	ldr	r0, [pc, #96]	@ (800080c <MX_RTC_Init+0x11c>)
 80007aa:	f001 fbfc 	bl	8001fa6 <HAL_RTC_SetDate>
 80007ae:	4603      	mov	r3, r0
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	d001      	beq.n	80007b8 <MX_RTC_Init+0xc8>
  {
    Error_Handler();
 80007b4:	f000 f8b4 	bl	8000920 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x1;
 80007b8:	2301      	movs	r3, #1
 80007ba:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 80007bc:	2300      	movs	r3, #0
 80007be:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 80007c0:	2300      	movs	r3, #0
 80007c2:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 80007c4:	2300      	movs	r3, #0
 80007c6:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.TimeFormat = RTC_HOURFORMAT12_AM;
 80007c8:	2300      	movs	r3, #0
 80007ca:	70fb      	strb	r3, [r7, #3]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80007cc:	2300      	movs	r3, #0
 80007ce:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80007d0:	2300      	movs	r3, #0
 80007d2:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 80007d4:	2300      	movs	r3, #0
 80007d6:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 80007d8:	2300      	movs	r3, #0
 80007da:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 80007dc:	2300      	movs	r3, #0
 80007de:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDay = 0x1;
 80007e0:	2301      	movs	r3, #1
 80007e2:	f887 3020 	strb.w	r3, [r7, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 80007e6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80007ea:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 80007ec:	463b      	mov	r3, r7
 80007ee:	2201      	movs	r2, #1
 80007f0:	4619      	mov	r1, r3
 80007f2:	4806      	ldr	r0, [pc, #24]	@ (800080c <MX_RTC_Init+0x11c>)
 80007f4:	f001 fcaa 	bl	800214c <HAL_RTC_SetAlarm_IT>
 80007f8:	4603      	mov	r3, r0
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d001      	beq.n	8000802 <MX_RTC_Init+0x112>
  {
    Error_Handler();
 80007fe:	f000 f88f 	bl	8000920 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000802:	bf00      	nop
 8000804:	3740      	adds	r7, #64	@ 0x40
 8000806:	46bd      	mov	sp, r7
 8000808:	bd80      	pop	{r7, pc}
 800080a:	bf00      	nop
 800080c:	20000078 	.word	0x20000078
 8000810:	40002800 	.word	0x40002800

08000814 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000818:	4b11      	ldr	r3, [pc, #68]	@ (8000860 <MX_USART1_UART_Init+0x4c>)
 800081a:	4a12      	ldr	r2, [pc, #72]	@ (8000864 <MX_USART1_UART_Init+0x50>)
 800081c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800081e:	4b10      	ldr	r3, [pc, #64]	@ (8000860 <MX_USART1_UART_Init+0x4c>)
 8000820:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000824:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000826:	4b0e      	ldr	r3, [pc, #56]	@ (8000860 <MX_USART1_UART_Init+0x4c>)
 8000828:	2200      	movs	r2, #0
 800082a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800082c:	4b0c      	ldr	r3, [pc, #48]	@ (8000860 <MX_USART1_UART_Init+0x4c>)
 800082e:	2200      	movs	r2, #0
 8000830:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000832:	4b0b      	ldr	r3, [pc, #44]	@ (8000860 <MX_USART1_UART_Init+0x4c>)
 8000834:	2200      	movs	r2, #0
 8000836:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000838:	4b09      	ldr	r3, [pc, #36]	@ (8000860 <MX_USART1_UART_Init+0x4c>)
 800083a:	220c      	movs	r2, #12
 800083c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800083e:	4b08      	ldr	r3, [pc, #32]	@ (8000860 <MX_USART1_UART_Init+0x4c>)
 8000840:	2200      	movs	r2, #0
 8000842:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000844:	4b06      	ldr	r3, [pc, #24]	@ (8000860 <MX_USART1_UART_Init+0x4c>)
 8000846:	2200      	movs	r2, #0
 8000848:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800084a:	4805      	ldr	r0, [pc, #20]	@ (8000860 <MX_USART1_UART_Init+0x4c>)
 800084c:	f001 fed0 	bl	80025f0 <HAL_UART_Init>
 8000850:	4603      	mov	r3, r0
 8000852:	2b00      	cmp	r3, #0
 8000854:	d001      	beq.n	800085a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000856:	f000 f863 	bl	8000920 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800085a:	bf00      	nop
 800085c:	bd80      	pop	{r7, pc}
 800085e:	bf00      	nop
 8000860:	20000098 	.word	0x20000098
 8000864:	40011000 	.word	0x40011000

08000868 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000868:	b480      	push	{r7}
 800086a:	b085      	sub	sp, #20
 800086c:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800086e:	2300      	movs	r3, #0
 8000870:	60fb      	str	r3, [r7, #12]
 8000872:	4b17      	ldr	r3, [pc, #92]	@ (80008d0 <MX_GPIO_Init+0x68>)
 8000874:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000876:	4a16      	ldr	r2, [pc, #88]	@ (80008d0 <MX_GPIO_Init+0x68>)
 8000878:	f043 0304 	orr.w	r3, r3, #4
 800087c:	6313      	str	r3, [r2, #48]	@ 0x30
 800087e:	4b14      	ldr	r3, [pc, #80]	@ (80008d0 <MX_GPIO_Init+0x68>)
 8000880:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000882:	f003 0304 	and.w	r3, r3, #4
 8000886:	60fb      	str	r3, [r7, #12]
 8000888:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800088a:	2300      	movs	r3, #0
 800088c:	60bb      	str	r3, [r7, #8]
 800088e:	4b10      	ldr	r3, [pc, #64]	@ (80008d0 <MX_GPIO_Init+0x68>)
 8000890:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000892:	4a0f      	ldr	r2, [pc, #60]	@ (80008d0 <MX_GPIO_Init+0x68>)
 8000894:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000898:	6313      	str	r3, [r2, #48]	@ 0x30
 800089a:	4b0d      	ldr	r3, [pc, #52]	@ (80008d0 <MX_GPIO_Init+0x68>)
 800089c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800089e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80008a2:	60bb      	str	r3, [r7, #8]
 80008a4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008a6:	2300      	movs	r3, #0
 80008a8:	607b      	str	r3, [r7, #4]
 80008aa:	4b09      	ldr	r3, [pc, #36]	@ (80008d0 <MX_GPIO_Init+0x68>)
 80008ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ae:	4a08      	ldr	r2, [pc, #32]	@ (80008d0 <MX_GPIO_Init+0x68>)
 80008b0:	f043 0301 	orr.w	r3, r3, #1
 80008b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80008b6:	4b06      	ldr	r3, [pc, #24]	@ (80008d0 <MX_GPIO_Init+0x68>)
 80008b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ba:	f003 0301 	and.w	r3, r3, #1
 80008be:	607b      	str	r3, [r7, #4]
 80008c0:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80008c2:	bf00      	nop
 80008c4:	3714      	adds	r7, #20
 80008c6:	46bd      	mov	sp, r7
 80008c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008cc:	4770      	bx	lr
 80008ce:	bf00      	nop
 80008d0:	40023800 	.word	0x40023800

080008d4 <HAL_RTC_AlarmAEventCallback>:

/* USER CODE BEGIN 4 */
void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc) {
 80008d4:	b5b0      	push	{r4, r5, r7, lr}
 80008d6:	b088      	sub	sp, #32
 80008d8:	af00      	add	r7, sp, #0
 80008da:	6078      	str	r0, [r7, #4]
    char msg[] = "ALARM TRIGGERED!\r\n";
 80008dc:	4b0e      	ldr	r3, [pc, #56]	@ (8000918 <HAL_RTC_AlarmAEventCallback+0x44>)
 80008de:	f107 040c 	add.w	r4, r7, #12
 80008e2:	461d      	mov	r5, r3
 80008e4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80008e6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80008e8:	682b      	ldr	r3, [r5, #0]
 80008ea:	461a      	mov	r2, r3
 80008ec:	8022      	strh	r2, [r4, #0]
 80008ee:	3402      	adds	r4, #2
 80008f0:	0c1b      	lsrs	r3, r3, #16
 80008f2:	7023      	strb	r3, [r4, #0]
    HAL_UART_Transmit(&huart1, (uint8_t *)msg, strlen(msg), HAL_MAX_DELAY);
 80008f4:	f107 030c 	add.w	r3, r7, #12
 80008f8:	4618      	mov	r0, r3
 80008fa:	f7ff fc71 	bl	80001e0 <strlen>
 80008fe:	4603      	mov	r3, r0
 8000900:	b29a      	uxth	r2, r3
 8000902:	f107 010c 	add.w	r1, r7, #12
 8000906:	f04f 33ff 	mov.w	r3, #4294967295
 800090a:	4804      	ldr	r0, [pc, #16]	@ (800091c <HAL_RTC_AlarmAEventCallback+0x48>)
 800090c:	f001 fec0 	bl	8002690 <HAL_UART_Transmit>
}
 8000910:	bf00      	nop
 8000912:	3720      	adds	r7, #32
 8000914:	46bd      	mov	sp, r7
 8000916:	bdb0      	pop	{r4, r5, r7, pc}
 8000918:	080037b8 	.word	0x080037b8
 800091c:	20000098 	.word	0x20000098

08000920 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000920:	b480      	push	{r7}
 8000922:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000924:	b672      	cpsid	i
}
 8000926:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000928:	bf00      	nop
 800092a:	e7fd      	b.n	8000928 <Error_Handler+0x8>

0800092c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800092c:	b480      	push	{r7}
 800092e:	b083      	sub	sp, #12
 8000930:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000932:	2300      	movs	r3, #0
 8000934:	607b      	str	r3, [r7, #4]
 8000936:	4b10      	ldr	r3, [pc, #64]	@ (8000978 <HAL_MspInit+0x4c>)
 8000938:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800093a:	4a0f      	ldr	r2, [pc, #60]	@ (8000978 <HAL_MspInit+0x4c>)
 800093c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000940:	6453      	str	r3, [r2, #68]	@ 0x44
 8000942:	4b0d      	ldr	r3, [pc, #52]	@ (8000978 <HAL_MspInit+0x4c>)
 8000944:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000946:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800094a:	607b      	str	r3, [r7, #4]
 800094c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800094e:	2300      	movs	r3, #0
 8000950:	603b      	str	r3, [r7, #0]
 8000952:	4b09      	ldr	r3, [pc, #36]	@ (8000978 <HAL_MspInit+0x4c>)
 8000954:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000956:	4a08      	ldr	r2, [pc, #32]	@ (8000978 <HAL_MspInit+0x4c>)
 8000958:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800095c:	6413      	str	r3, [r2, #64]	@ 0x40
 800095e:	4b06      	ldr	r3, [pc, #24]	@ (8000978 <HAL_MspInit+0x4c>)
 8000960:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000962:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000966:	603b      	str	r3, [r7, #0]
 8000968:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800096a:	bf00      	nop
 800096c:	370c      	adds	r7, #12
 800096e:	46bd      	mov	sp, r7
 8000970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop
 8000978:	40023800 	.word	0x40023800

0800097c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	b088      	sub	sp, #32
 8000980:	af00      	add	r7, sp, #0
 8000982:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000984:	f107 030c 	add.w	r3, r7, #12
 8000988:	2200      	movs	r2, #0
 800098a:	601a      	str	r2, [r3, #0]
 800098c:	605a      	str	r2, [r3, #4]
 800098e:	609a      	str	r2, [r3, #8]
 8000990:	60da      	str	r2, [r3, #12]
 8000992:	611a      	str	r2, [r3, #16]
  if(hrtc->Instance==RTC)
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	681b      	ldr	r3, [r3, #0]
 8000998:	4a10      	ldr	r2, [pc, #64]	@ (80009dc <HAL_RTC_MspInit+0x60>)
 800099a:	4293      	cmp	r3, r2
 800099c:	d119      	bne.n	80009d2 <HAL_RTC_MspInit+0x56>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800099e:	2302      	movs	r3, #2
 80009a0:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80009a2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80009a6:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80009a8:	f107 030c 	add.w	r3, r7, #12
 80009ac:	4618      	mov	r0, r3
 80009ae:	f001 f891 	bl	8001ad4 <HAL_RCCEx_PeriphCLKConfig>
 80009b2:	4603      	mov	r3, r0
 80009b4:	2b00      	cmp	r3, #0
 80009b6:	d001      	beq.n	80009bc <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 80009b8:	f7ff ffb2 	bl	8000920 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80009bc:	4b08      	ldr	r3, [pc, #32]	@ (80009e0 <HAL_RTC_MspInit+0x64>)
 80009be:	2201      	movs	r2, #1
 80009c0:	601a      	str	r2, [r3, #0]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 80009c2:	2200      	movs	r2, #0
 80009c4:	2100      	movs	r1, #0
 80009c6:	2029      	movs	r0, #41	@ 0x29
 80009c8:	f000 fa71 	bl	8000eae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 80009cc:	2029      	movs	r0, #41	@ 0x29
 80009ce:	f000 fa8a 	bl	8000ee6 <HAL_NVIC_EnableIRQ>

  /* USER CODE END RTC_MspInit 1 */

  }

}
 80009d2:	bf00      	nop
 80009d4:	3720      	adds	r7, #32
 80009d6:	46bd      	mov	sp, r7
 80009d8:	bd80      	pop	{r7, pc}
 80009da:	bf00      	nop
 80009dc:	40002800 	.word	0x40002800
 80009e0:	42470e3c 	.word	0x42470e3c

080009e4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b08a      	sub	sp, #40	@ 0x28
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009ec:	f107 0314 	add.w	r3, r7, #20
 80009f0:	2200      	movs	r2, #0
 80009f2:	601a      	str	r2, [r3, #0]
 80009f4:	605a      	str	r2, [r3, #4]
 80009f6:	609a      	str	r2, [r3, #8]
 80009f8:	60da      	str	r2, [r3, #12]
 80009fa:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	4a19      	ldr	r2, [pc, #100]	@ (8000a68 <HAL_UART_MspInit+0x84>)
 8000a02:	4293      	cmp	r3, r2
 8000a04:	d12c      	bne.n	8000a60 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000a06:	2300      	movs	r3, #0
 8000a08:	613b      	str	r3, [r7, #16]
 8000a0a:	4b18      	ldr	r3, [pc, #96]	@ (8000a6c <HAL_UART_MspInit+0x88>)
 8000a0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a0e:	4a17      	ldr	r2, [pc, #92]	@ (8000a6c <HAL_UART_MspInit+0x88>)
 8000a10:	f043 0310 	orr.w	r3, r3, #16
 8000a14:	6453      	str	r3, [r2, #68]	@ 0x44
 8000a16:	4b15      	ldr	r3, [pc, #84]	@ (8000a6c <HAL_UART_MspInit+0x88>)
 8000a18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a1a:	f003 0310 	and.w	r3, r3, #16
 8000a1e:	613b      	str	r3, [r7, #16]
 8000a20:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a22:	2300      	movs	r3, #0
 8000a24:	60fb      	str	r3, [r7, #12]
 8000a26:	4b11      	ldr	r3, [pc, #68]	@ (8000a6c <HAL_UART_MspInit+0x88>)
 8000a28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a2a:	4a10      	ldr	r2, [pc, #64]	@ (8000a6c <HAL_UART_MspInit+0x88>)
 8000a2c:	f043 0301 	orr.w	r3, r3, #1
 8000a30:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a32:	4b0e      	ldr	r3, [pc, #56]	@ (8000a6c <HAL_UART_MspInit+0x88>)
 8000a34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a36:	f003 0301 	and.w	r3, r3, #1
 8000a3a:	60fb      	str	r3, [r7, #12]
 8000a3c:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000a3e:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000a42:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a44:	2302      	movs	r3, #2
 8000a46:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a48:	2300      	movs	r3, #0
 8000a4a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a4c:	2303      	movs	r3, #3
 8000a4e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000a50:	2307      	movs	r3, #7
 8000a52:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a54:	f107 0314 	add.w	r3, r7, #20
 8000a58:	4619      	mov	r1, r3
 8000a5a:	4805      	ldr	r0, [pc, #20]	@ (8000a70 <HAL_UART_MspInit+0x8c>)
 8000a5c:	f000 fa5e 	bl	8000f1c <HAL_GPIO_Init>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8000a60:	bf00      	nop
 8000a62:	3728      	adds	r7, #40	@ 0x28
 8000a64:	46bd      	mov	sp, r7
 8000a66:	bd80      	pop	{r7, pc}
 8000a68:	40011000 	.word	0x40011000
 8000a6c:	40023800 	.word	0x40023800
 8000a70:	40020000 	.word	0x40020000

08000a74 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a74:	b480      	push	{r7}
 8000a76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000a78:	bf00      	nop
 8000a7a:	e7fd      	b.n	8000a78 <NMI_Handler+0x4>

08000a7c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a7c:	b480      	push	{r7}
 8000a7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a80:	bf00      	nop
 8000a82:	e7fd      	b.n	8000a80 <HardFault_Handler+0x4>

08000a84 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a84:	b480      	push	{r7}
 8000a86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a88:	bf00      	nop
 8000a8a:	e7fd      	b.n	8000a88 <MemManage_Handler+0x4>

08000a8c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a8c:	b480      	push	{r7}
 8000a8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a90:	bf00      	nop
 8000a92:	e7fd      	b.n	8000a90 <BusFault_Handler+0x4>

08000a94 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a94:	b480      	push	{r7}
 8000a96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a98:	bf00      	nop
 8000a9a:	e7fd      	b.n	8000a98 <UsageFault_Handler+0x4>

08000a9c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a9c:	b480      	push	{r7}
 8000a9e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000aa0:	bf00      	nop
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa8:	4770      	bx	lr

08000aaa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000aaa:	b480      	push	{r7}
 8000aac:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000aae:	bf00      	nop
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab6:	4770      	bx	lr

08000ab8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ab8:	b480      	push	{r7}
 8000aba:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000abc:	bf00      	nop
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac4:	4770      	bx	lr

08000ac6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ac6:	b580      	push	{r7, lr}
 8000ac8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000aca:	f000 f8d1 	bl	8000c70 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ace:	bf00      	nop
 8000ad0:	bd80      	pop	{r7, pc}
	...

08000ad4 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC alarms A and B interrupt through EXTI line 17.
  */
void RTC_Alarm_IRQHandler(void)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8000ad8:	4802      	ldr	r0, [pc, #8]	@ (8000ae4 <RTC_Alarm_IRQHandler+0x10>)
 8000ada:	f001 fc7b 	bl	80023d4 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 8000ade:	bf00      	nop
 8000ae0:	bd80      	pop	{r7, pc}
 8000ae2:	bf00      	nop
 8000ae4:	20000078 	.word	0x20000078

08000ae8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b086      	sub	sp, #24
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000af0:	4a14      	ldr	r2, [pc, #80]	@ (8000b44 <_sbrk+0x5c>)
 8000af2:	4b15      	ldr	r3, [pc, #84]	@ (8000b48 <_sbrk+0x60>)
 8000af4:	1ad3      	subs	r3, r2, r3
 8000af6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000af8:	697b      	ldr	r3, [r7, #20]
 8000afa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000afc:	4b13      	ldr	r3, [pc, #76]	@ (8000b4c <_sbrk+0x64>)
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	d102      	bne.n	8000b0a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b04:	4b11      	ldr	r3, [pc, #68]	@ (8000b4c <_sbrk+0x64>)
 8000b06:	4a12      	ldr	r2, [pc, #72]	@ (8000b50 <_sbrk+0x68>)
 8000b08:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b0a:	4b10      	ldr	r3, [pc, #64]	@ (8000b4c <_sbrk+0x64>)
 8000b0c:	681a      	ldr	r2, [r3, #0]
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	4413      	add	r3, r2
 8000b12:	693a      	ldr	r2, [r7, #16]
 8000b14:	429a      	cmp	r2, r3
 8000b16:	d207      	bcs.n	8000b28 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b18:	f002 f9b2 	bl	8002e80 <__errno>
 8000b1c:	4603      	mov	r3, r0
 8000b1e:	220c      	movs	r2, #12
 8000b20:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b22:	f04f 33ff 	mov.w	r3, #4294967295
 8000b26:	e009      	b.n	8000b3c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b28:	4b08      	ldr	r3, [pc, #32]	@ (8000b4c <_sbrk+0x64>)
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b2e:	4b07      	ldr	r3, [pc, #28]	@ (8000b4c <_sbrk+0x64>)
 8000b30:	681a      	ldr	r2, [r3, #0]
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	4413      	add	r3, r2
 8000b36:	4a05      	ldr	r2, [pc, #20]	@ (8000b4c <_sbrk+0x64>)
 8000b38:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b3a:	68fb      	ldr	r3, [r7, #12]
}
 8000b3c:	4618      	mov	r0, r3
 8000b3e:	3718      	adds	r7, #24
 8000b40:	46bd      	mov	sp, r7
 8000b42:	bd80      	pop	{r7, pc}
 8000b44:	20010000 	.word	0x20010000
 8000b48:	00000400 	.word	0x00000400
 8000b4c:	200000e0 	.word	0x200000e0
 8000b50:	20000230 	.word	0x20000230

08000b54 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b54:	b480      	push	{r7}
 8000b56:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b58:	4b06      	ldr	r3, [pc, #24]	@ (8000b74 <SystemInit+0x20>)
 8000b5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000b5e:	4a05      	ldr	r2, [pc, #20]	@ (8000b74 <SystemInit+0x20>)
 8000b60:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000b64:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b68:	bf00      	nop
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b70:	4770      	bx	lr
 8000b72:	bf00      	nop
 8000b74:	e000ed00 	.word	0xe000ed00

08000b78 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000b78:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000bb0 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000b7c:	f7ff ffea 	bl	8000b54 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000b80:	480c      	ldr	r0, [pc, #48]	@ (8000bb4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000b82:	490d      	ldr	r1, [pc, #52]	@ (8000bb8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000b84:	4a0d      	ldr	r2, [pc, #52]	@ (8000bbc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000b86:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b88:	e002      	b.n	8000b90 <LoopCopyDataInit>

08000b8a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b8a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b8c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b8e:	3304      	adds	r3, #4

08000b90 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b90:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b92:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b94:	d3f9      	bcc.n	8000b8a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b96:	4a0a      	ldr	r2, [pc, #40]	@ (8000bc0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000b98:	4c0a      	ldr	r4, [pc, #40]	@ (8000bc4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000b9a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b9c:	e001      	b.n	8000ba2 <LoopFillZerobss>

08000b9e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b9e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ba0:	3204      	adds	r2, #4

08000ba2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ba2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ba4:	d3fb      	bcc.n	8000b9e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000ba6:	f002 f971 	bl	8002e8c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000baa:	f7ff fd2b 	bl	8000604 <main>
  bx  lr    
 8000bae:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000bb0:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000bb4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000bb8:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000bbc:	08003828 	.word	0x08003828
  ldr r2, =_sbss
 8000bc0:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000bc4:	20000230 	.word	0x20000230

08000bc8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000bc8:	e7fe      	b.n	8000bc8 <ADC_IRQHandler>
	...

08000bcc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000bd0:	4b0e      	ldr	r3, [pc, #56]	@ (8000c0c <HAL_Init+0x40>)
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	4a0d      	ldr	r2, [pc, #52]	@ (8000c0c <HAL_Init+0x40>)
 8000bd6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000bda:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000bdc:	4b0b      	ldr	r3, [pc, #44]	@ (8000c0c <HAL_Init+0x40>)
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	4a0a      	ldr	r2, [pc, #40]	@ (8000c0c <HAL_Init+0x40>)
 8000be2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000be6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000be8:	4b08      	ldr	r3, [pc, #32]	@ (8000c0c <HAL_Init+0x40>)
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	4a07      	ldr	r2, [pc, #28]	@ (8000c0c <HAL_Init+0x40>)
 8000bee:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000bf2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000bf4:	2003      	movs	r0, #3
 8000bf6:	f000 f94f 	bl	8000e98 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000bfa:	200f      	movs	r0, #15
 8000bfc:	f000 f808 	bl	8000c10 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c00:	f7ff fe94 	bl	800092c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c04:	2300      	movs	r3, #0
}
 8000c06:	4618      	mov	r0, r3
 8000c08:	bd80      	pop	{r7, pc}
 8000c0a:	bf00      	nop
 8000c0c:	40023c00 	.word	0x40023c00

08000c10 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b082      	sub	sp, #8
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c18:	4b12      	ldr	r3, [pc, #72]	@ (8000c64 <HAL_InitTick+0x54>)
 8000c1a:	681a      	ldr	r2, [r3, #0]
 8000c1c:	4b12      	ldr	r3, [pc, #72]	@ (8000c68 <HAL_InitTick+0x58>)
 8000c1e:	781b      	ldrb	r3, [r3, #0]
 8000c20:	4619      	mov	r1, r3
 8000c22:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000c26:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c2e:	4618      	mov	r0, r3
 8000c30:	f000 f967 	bl	8000f02 <HAL_SYSTICK_Config>
 8000c34:	4603      	mov	r3, r0
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d001      	beq.n	8000c3e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000c3a:	2301      	movs	r3, #1
 8000c3c:	e00e      	b.n	8000c5c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	2b0f      	cmp	r3, #15
 8000c42:	d80a      	bhi.n	8000c5a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c44:	2200      	movs	r2, #0
 8000c46:	6879      	ldr	r1, [r7, #4]
 8000c48:	f04f 30ff 	mov.w	r0, #4294967295
 8000c4c:	f000 f92f 	bl	8000eae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c50:	4a06      	ldr	r2, [pc, #24]	@ (8000c6c <HAL_InitTick+0x5c>)
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000c56:	2300      	movs	r3, #0
 8000c58:	e000      	b.n	8000c5c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000c5a:	2301      	movs	r3, #1
}
 8000c5c:	4618      	mov	r0, r3
 8000c5e:	3708      	adds	r7, #8
 8000c60:	46bd      	mov	sp, r7
 8000c62:	bd80      	pop	{r7, pc}
 8000c64:	20000000 	.word	0x20000000
 8000c68:	20000008 	.word	0x20000008
 8000c6c:	20000004 	.word	0x20000004

08000c70 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c70:	b480      	push	{r7}
 8000c72:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c74:	4b06      	ldr	r3, [pc, #24]	@ (8000c90 <HAL_IncTick+0x20>)
 8000c76:	781b      	ldrb	r3, [r3, #0]
 8000c78:	461a      	mov	r2, r3
 8000c7a:	4b06      	ldr	r3, [pc, #24]	@ (8000c94 <HAL_IncTick+0x24>)
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	4413      	add	r3, r2
 8000c80:	4a04      	ldr	r2, [pc, #16]	@ (8000c94 <HAL_IncTick+0x24>)
 8000c82:	6013      	str	r3, [r2, #0]
}
 8000c84:	bf00      	nop
 8000c86:	46bd      	mov	sp, r7
 8000c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8c:	4770      	bx	lr
 8000c8e:	bf00      	nop
 8000c90:	20000008 	.word	0x20000008
 8000c94:	200000e4 	.word	0x200000e4

08000c98 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	af00      	add	r7, sp, #0
  return uwTick;
 8000c9c:	4b03      	ldr	r3, [pc, #12]	@ (8000cac <HAL_GetTick+0x14>)
 8000c9e:	681b      	ldr	r3, [r3, #0]
}
 8000ca0:	4618      	mov	r0, r3
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca8:	4770      	bx	lr
 8000caa:	bf00      	nop
 8000cac:	200000e4 	.word	0x200000e4

08000cb0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b084      	sub	sp, #16
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000cb8:	f7ff ffee 	bl	8000c98 <HAL_GetTick>
 8000cbc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000cc2:	68fb      	ldr	r3, [r7, #12]
 8000cc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000cc8:	d005      	beq.n	8000cd6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000cca:	4b0a      	ldr	r3, [pc, #40]	@ (8000cf4 <HAL_Delay+0x44>)
 8000ccc:	781b      	ldrb	r3, [r3, #0]
 8000cce:	461a      	mov	r2, r3
 8000cd0:	68fb      	ldr	r3, [r7, #12]
 8000cd2:	4413      	add	r3, r2
 8000cd4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000cd6:	bf00      	nop
 8000cd8:	f7ff ffde 	bl	8000c98 <HAL_GetTick>
 8000cdc:	4602      	mov	r2, r0
 8000cde:	68bb      	ldr	r3, [r7, #8]
 8000ce0:	1ad3      	subs	r3, r2, r3
 8000ce2:	68fa      	ldr	r2, [r7, #12]
 8000ce4:	429a      	cmp	r2, r3
 8000ce6:	d8f7      	bhi.n	8000cd8 <HAL_Delay+0x28>
  {
  }
}
 8000ce8:	bf00      	nop
 8000cea:	bf00      	nop
 8000cec:	3710      	adds	r7, #16
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	bd80      	pop	{r7, pc}
 8000cf2:	bf00      	nop
 8000cf4:	20000008 	.word	0x20000008

08000cf8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cf8:	b480      	push	{r7}
 8000cfa:	b085      	sub	sp, #20
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	f003 0307 	and.w	r3, r3, #7
 8000d06:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d08:	4b0c      	ldr	r3, [pc, #48]	@ (8000d3c <__NVIC_SetPriorityGrouping+0x44>)
 8000d0a:	68db      	ldr	r3, [r3, #12]
 8000d0c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d0e:	68ba      	ldr	r2, [r7, #8]
 8000d10:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000d14:	4013      	ands	r3, r2
 8000d16:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d18:	68fb      	ldr	r3, [r7, #12]
 8000d1a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d1c:	68bb      	ldr	r3, [r7, #8]
 8000d1e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d20:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000d24:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000d28:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d2a:	4a04      	ldr	r2, [pc, #16]	@ (8000d3c <__NVIC_SetPriorityGrouping+0x44>)
 8000d2c:	68bb      	ldr	r3, [r7, #8]
 8000d2e:	60d3      	str	r3, [r2, #12]
}
 8000d30:	bf00      	nop
 8000d32:	3714      	adds	r7, #20
 8000d34:	46bd      	mov	sp, r7
 8000d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3a:	4770      	bx	lr
 8000d3c:	e000ed00 	.word	0xe000ed00

08000d40 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d40:	b480      	push	{r7}
 8000d42:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d44:	4b04      	ldr	r3, [pc, #16]	@ (8000d58 <__NVIC_GetPriorityGrouping+0x18>)
 8000d46:	68db      	ldr	r3, [r3, #12]
 8000d48:	0a1b      	lsrs	r3, r3, #8
 8000d4a:	f003 0307 	and.w	r3, r3, #7
}
 8000d4e:	4618      	mov	r0, r3
 8000d50:	46bd      	mov	sp, r7
 8000d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d56:	4770      	bx	lr
 8000d58:	e000ed00 	.word	0xe000ed00

08000d5c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	b083      	sub	sp, #12
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	4603      	mov	r3, r0
 8000d64:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	db0b      	blt.n	8000d86 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d6e:	79fb      	ldrb	r3, [r7, #7]
 8000d70:	f003 021f 	and.w	r2, r3, #31
 8000d74:	4907      	ldr	r1, [pc, #28]	@ (8000d94 <__NVIC_EnableIRQ+0x38>)
 8000d76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d7a:	095b      	lsrs	r3, r3, #5
 8000d7c:	2001      	movs	r0, #1
 8000d7e:	fa00 f202 	lsl.w	r2, r0, r2
 8000d82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000d86:	bf00      	nop
 8000d88:	370c      	adds	r7, #12
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d90:	4770      	bx	lr
 8000d92:	bf00      	nop
 8000d94:	e000e100 	.word	0xe000e100

08000d98 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d98:	b480      	push	{r7}
 8000d9a:	b083      	sub	sp, #12
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	4603      	mov	r3, r0
 8000da0:	6039      	str	r1, [r7, #0]
 8000da2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000da4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	db0a      	blt.n	8000dc2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dac:	683b      	ldr	r3, [r7, #0]
 8000dae:	b2da      	uxtb	r2, r3
 8000db0:	490c      	ldr	r1, [pc, #48]	@ (8000de4 <__NVIC_SetPriority+0x4c>)
 8000db2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000db6:	0112      	lsls	r2, r2, #4
 8000db8:	b2d2      	uxtb	r2, r2
 8000dba:	440b      	add	r3, r1
 8000dbc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000dc0:	e00a      	b.n	8000dd8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dc2:	683b      	ldr	r3, [r7, #0]
 8000dc4:	b2da      	uxtb	r2, r3
 8000dc6:	4908      	ldr	r1, [pc, #32]	@ (8000de8 <__NVIC_SetPriority+0x50>)
 8000dc8:	79fb      	ldrb	r3, [r7, #7]
 8000dca:	f003 030f 	and.w	r3, r3, #15
 8000dce:	3b04      	subs	r3, #4
 8000dd0:	0112      	lsls	r2, r2, #4
 8000dd2:	b2d2      	uxtb	r2, r2
 8000dd4:	440b      	add	r3, r1
 8000dd6:	761a      	strb	r2, [r3, #24]
}
 8000dd8:	bf00      	nop
 8000dda:	370c      	adds	r7, #12
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de2:	4770      	bx	lr
 8000de4:	e000e100 	.word	0xe000e100
 8000de8:	e000ed00 	.word	0xe000ed00

08000dec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000dec:	b480      	push	{r7}
 8000dee:	b089      	sub	sp, #36	@ 0x24
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	60f8      	str	r0, [r7, #12]
 8000df4:	60b9      	str	r1, [r7, #8]
 8000df6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000df8:	68fb      	ldr	r3, [r7, #12]
 8000dfa:	f003 0307 	and.w	r3, r3, #7
 8000dfe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e00:	69fb      	ldr	r3, [r7, #28]
 8000e02:	f1c3 0307 	rsb	r3, r3, #7
 8000e06:	2b04      	cmp	r3, #4
 8000e08:	bf28      	it	cs
 8000e0a:	2304      	movcs	r3, #4
 8000e0c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e0e:	69fb      	ldr	r3, [r7, #28]
 8000e10:	3304      	adds	r3, #4
 8000e12:	2b06      	cmp	r3, #6
 8000e14:	d902      	bls.n	8000e1c <NVIC_EncodePriority+0x30>
 8000e16:	69fb      	ldr	r3, [r7, #28]
 8000e18:	3b03      	subs	r3, #3
 8000e1a:	e000      	b.n	8000e1e <NVIC_EncodePriority+0x32>
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e20:	f04f 32ff 	mov.w	r2, #4294967295
 8000e24:	69bb      	ldr	r3, [r7, #24]
 8000e26:	fa02 f303 	lsl.w	r3, r2, r3
 8000e2a:	43da      	mvns	r2, r3
 8000e2c:	68bb      	ldr	r3, [r7, #8]
 8000e2e:	401a      	ands	r2, r3
 8000e30:	697b      	ldr	r3, [r7, #20]
 8000e32:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e34:	f04f 31ff 	mov.w	r1, #4294967295
 8000e38:	697b      	ldr	r3, [r7, #20]
 8000e3a:	fa01 f303 	lsl.w	r3, r1, r3
 8000e3e:	43d9      	mvns	r1, r3
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e44:	4313      	orrs	r3, r2
         );
}
 8000e46:	4618      	mov	r0, r3
 8000e48:	3724      	adds	r7, #36	@ 0x24
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e50:	4770      	bx	lr
	...

08000e54 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b082      	sub	sp, #8
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	3b01      	subs	r3, #1
 8000e60:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000e64:	d301      	bcc.n	8000e6a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e66:	2301      	movs	r3, #1
 8000e68:	e00f      	b.n	8000e8a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e6a:	4a0a      	ldr	r2, [pc, #40]	@ (8000e94 <SysTick_Config+0x40>)
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	3b01      	subs	r3, #1
 8000e70:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e72:	210f      	movs	r1, #15
 8000e74:	f04f 30ff 	mov.w	r0, #4294967295
 8000e78:	f7ff ff8e 	bl	8000d98 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e7c:	4b05      	ldr	r3, [pc, #20]	@ (8000e94 <SysTick_Config+0x40>)
 8000e7e:	2200      	movs	r2, #0
 8000e80:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e82:	4b04      	ldr	r3, [pc, #16]	@ (8000e94 <SysTick_Config+0x40>)
 8000e84:	2207      	movs	r2, #7
 8000e86:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e88:	2300      	movs	r3, #0
}
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	3708      	adds	r7, #8
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	bd80      	pop	{r7, pc}
 8000e92:	bf00      	nop
 8000e94:	e000e010 	.word	0xe000e010

08000e98 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b082      	sub	sp, #8
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ea0:	6878      	ldr	r0, [r7, #4]
 8000ea2:	f7ff ff29 	bl	8000cf8 <__NVIC_SetPriorityGrouping>
}
 8000ea6:	bf00      	nop
 8000ea8:	3708      	adds	r7, #8
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	bd80      	pop	{r7, pc}

08000eae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000eae:	b580      	push	{r7, lr}
 8000eb0:	b086      	sub	sp, #24
 8000eb2:	af00      	add	r7, sp, #0
 8000eb4:	4603      	mov	r3, r0
 8000eb6:	60b9      	str	r1, [r7, #8]
 8000eb8:	607a      	str	r2, [r7, #4]
 8000eba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ec0:	f7ff ff3e 	bl	8000d40 <__NVIC_GetPriorityGrouping>
 8000ec4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ec6:	687a      	ldr	r2, [r7, #4]
 8000ec8:	68b9      	ldr	r1, [r7, #8]
 8000eca:	6978      	ldr	r0, [r7, #20]
 8000ecc:	f7ff ff8e 	bl	8000dec <NVIC_EncodePriority>
 8000ed0:	4602      	mov	r2, r0
 8000ed2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ed6:	4611      	mov	r1, r2
 8000ed8:	4618      	mov	r0, r3
 8000eda:	f7ff ff5d 	bl	8000d98 <__NVIC_SetPriority>
}
 8000ede:	bf00      	nop
 8000ee0:	3718      	adds	r7, #24
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	bd80      	pop	{r7, pc}

08000ee6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ee6:	b580      	push	{r7, lr}
 8000ee8:	b082      	sub	sp, #8
 8000eea:	af00      	add	r7, sp, #0
 8000eec:	4603      	mov	r3, r0
 8000eee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ef0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ef4:	4618      	mov	r0, r3
 8000ef6:	f7ff ff31 	bl	8000d5c <__NVIC_EnableIRQ>
}
 8000efa:	bf00      	nop
 8000efc:	3708      	adds	r7, #8
 8000efe:	46bd      	mov	sp, r7
 8000f00:	bd80      	pop	{r7, pc}

08000f02 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f02:	b580      	push	{r7, lr}
 8000f04:	b082      	sub	sp, #8
 8000f06:	af00      	add	r7, sp, #0
 8000f08:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f0a:	6878      	ldr	r0, [r7, #4]
 8000f0c:	f7ff ffa2 	bl	8000e54 <SysTick_Config>
 8000f10:	4603      	mov	r3, r0
}
 8000f12:	4618      	mov	r0, r3
 8000f14:	3708      	adds	r7, #8
 8000f16:	46bd      	mov	sp, r7
 8000f18:	bd80      	pop	{r7, pc}
	...

08000f1c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	b089      	sub	sp, #36	@ 0x24
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	6078      	str	r0, [r7, #4]
 8000f24:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000f26:	2300      	movs	r3, #0
 8000f28:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000f2e:	2300      	movs	r3, #0
 8000f30:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f32:	2300      	movs	r3, #0
 8000f34:	61fb      	str	r3, [r7, #28]
 8000f36:	e159      	b.n	80011ec <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000f38:	2201      	movs	r2, #1
 8000f3a:	69fb      	ldr	r3, [r7, #28]
 8000f3c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f40:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f42:	683b      	ldr	r3, [r7, #0]
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	697a      	ldr	r2, [r7, #20]
 8000f48:	4013      	ands	r3, r2
 8000f4a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000f4c:	693a      	ldr	r2, [r7, #16]
 8000f4e:	697b      	ldr	r3, [r7, #20]
 8000f50:	429a      	cmp	r2, r3
 8000f52:	f040 8148 	bne.w	80011e6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f56:	683b      	ldr	r3, [r7, #0]
 8000f58:	685b      	ldr	r3, [r3, #4]
 8000f5a:	f003 0303 	and.w	r3, r3, #3
 8000f5e:	2b01      	cmp	r3, #1
 8000f60:	d005      	beq.n	8000f6e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f62:	683b      	ldr	r3, [r7, #0]
 8000f64:	685b      	ldr	r3, [r3, #4]
 8000f66:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f6a:	2b02      	cmp	r3, #2
 8000f6c:	d130      	bne.n	8000fd0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	689b      	ldr	r3, [r3, #8]
 8000f72:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000f74:	69fb      	ldr	r3, [r7, #28]
 8000f76:	005b      	lsls	r3, r3, #1
 8000f78:	2203      	movs	r2, #3
 8000f7a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f7e:	43db      	mvns	r3, r3
 8000f80:	69ba      	ldr	r2, [r7, #24]
 8000f82:	4013      	ands	r3, r2
 8000f84:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000f86:	683b      	ldr	r3, [r7, #0]
 8000f88:	68da      	ldr	r2, [r3, #12]
 8000f8a:	69fb      	ldr	r3, [r7, #28]
 8000f8c:	005b      	lsls	r3, r3, #1
 8000f8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f92:	69ba      	ldr	r2, [r7, #24]
 8000f94:	4313      	orrs	r3, r2
 8000f96:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	69ba      	ldr	r2, [r7, #24]
 8000f9c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	685b      	ldr	r3, [r3, #4]
 8000fa2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000fa4:	2201      	movs	r2, #1
 8000fa6:	69fb      	ldr	r3, [r7, #28]
 8000fa8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fac:	43db      	mvns	r3, r3
 8000fae:	69ba      	ldr	r2, [r7, #24]
 8000fb0:	4013      	ands	r3, r2
 8000fb2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000fb4:	683b      	ldr	r3, [r7, #0]
 8000fb6:	685b      	ldr	r3, [r3, #4]
 8000fb8:	091b      	lsrs	r3, r3, #4
 8000fba:	f003 0201 	and.w	r2, r3, #1
 8000fbe:	69fb      	ldr	r3, [r7, #28]
 8000fc0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc4:	69ba      	ldr	r2, [r7, #24]
 8000fc6:	4313      	orrs	r3, r2
 8000fc8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	69ba      	ldr	r2, [r7, #24]
 8000fce:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000fd0:	683b      	ldr	r3, [r7, #0]
 8000fd2:	685b      	ldr	r3, [r3, #4]
 8000fd4:	f003 0303 	and.w	r3, r3, #3
 8000fd8:	2b03      	cmp	r3, #3
 8000fda:	d017      	beq.n	800100c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	68db      	ldr	r3, [r3, #12]
 8000fe0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000fe2:	69fb      	ldr	r3, [r7, #28]
 8000fe4:	005b      	lsls	r3, r3, #1
 8000fe6:	2203      	movs	r2, #3
 8000fe8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fec:	43db      	mvns	r3, r3
 8000fee:	69ba      	ldr	r2, [r7, #24]
 8000ff0:	4013      	ands	r3, r2
 8000ff2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000ff4:	683b      	ldr	r3, [r7, #0]
 8000ff6:	689a      	ldr	r2, [r3, #8]
 8000ff8:	69fb      	ldr	r3, [r7, #28]
 8000ffa:	005b      	lsls	r3, r3, #1
 8000ffc:	fa02 f303 	lsl.w	r3, r2, r3
 8001000:	69ba      	ldr	r2, [r7, #24]
 8001002:	4313      	orrs	r3, r2
 8001004:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	69ba      	ldr	r2, [r7, #24]
 800100a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800100c:	683b      	ldr	r3, [r7, #0]
 800100e:	685b      	ldr	r3, [r3, #4]
 8001010:	f003 0303 	and.w	r3, r3, #3
 8001014:	2b02      	cmp	r3, #2
 8001016:	d123      	bne.n	8001060 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001018:	69fb      	ldr	r3, [r7, #28]
 800101a:	08da      	lsrs	r2, r3, #3
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	3208      	adds	r2, #8
 8001020:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001024:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001026:	69fb      	ldr	r3, [r7, #28]
 8001028:	f003 0307 	and.w	r3, r3, #7
 800102c:	009b      	lsls	r3, r3, #2
 800102e:	220f      	movs	r2, #15
 8001030:	fa02 f303 	lsl.w	r3, r2, r3
 8001034:	43db      	mvns	r3, r3
 8001036:	69ba      	ldr	r2, [r7, #24]
 8001038:	4013      	ands	r3, r2
 800103a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800103c:	683b      	ldr	r3, [r7, #0]
 800103e:	691a      	ldr	r2, [r3, #16]
 8001040:	69fb      	ldr	r3, [r7, #28]
 8001042:	f003 0307 	and.w	r3, r3, #7
 8001046:	009b      	lsls	r3, r3, #2
 8001048:	fa02 f303 	lsl.w	r3, r2, r3
 800104c:	69ba      	ldr	r2, [r7, #24]
 800104e:	4313      	orrs	r3, r2
 8001050:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001052:	69fb      	ldr	r3, [r7, #28]
 8001054:	08da      	lsrs	r2, r3, #3
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	3208      	adds	r2, #8
 800105a:	69b9      	ldr	r1, [r7, #24]
 800105c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001066:	69fb      	ldr	r3, [r7, #28]
 8001068:	005b      	lsls	r3, r3, #1
 800106a:	2203      	movs	r2, #3
 800106c:	fa02 f303 	lsl.w	r3, r2, r3
 8001070:	43db      	mvns	r3, r3
 8001072:	69ba      	ldr	r2, [r7, #24]
 8001074:	4013      	ands	r3, r2
 8001076:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001078:	683b      	ldr	r3, [r7, #0]
 800107a:	685b      	ldr	r3, [r3, #4]
 800107c:	f003 0203 	and.w	r2, r3, #3
 8001080:	69fb      	ldr	r3, [r7, #28]
 8001082:	005b      	lsls	r3, r3, #1
 8001084:	fa02 f303 	lsl.w	r3, r2, r3
 8001088:	69ba      	ldr	r2, [r7, #24]
 800108a:	4313      	orrs	r3, r2
 800108c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	69ba      	ldr	r2, [r7, #24]
 8001092:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001094:	683b      	ldr	r3, [r7, #0]
 8001096:	685b      	ldr	r3, [r3, #4]
 8001098:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800109c:	2b00      	cmp	r3, #0
 800109e:	f000 80a2 	beq.w	80011e6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010a2:	2300      	movs	r3, #0
 80010a4:	60fb      	str	r3, [r7, #12]
 80010a6:	4b57      	ldr	r3, [pc, #348]	@ (8001204 <HAL_GPIO_Init+0x2e8>)
 80010a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010aa:	4a56      	ldr	r2, [pc, #344]	@ (8001204 <HAL_GPIO_Init+0x2e8>)
 80010ac:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80010b0:	6453      	str	r3, [r2, #68]	@ 0x44
 80010b2:	4b54      	ldr	r3, [pc, #336]	@ (8001204 <HAL_GPIO_Init+0x2e8>)
 80010b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010b6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80010ba:	60fb      	str	r3, [r7, #12]
 80010bc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80010be:	4a52      	ldr	r2, [pc, #328]	@ (8001208 <HAL_GPIO_Init+0x2ec>)
 80010c0:	69fb      	ldr	r3, [r7, #28]
 80010c2:	089b      	lsrs	r3, r3, #2
 80010c4:	3302      	adds	r3, #2
 80010c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80010cc:	69fb      	ldr	r3, [r7, #28]
 80010ce:	f003 0303 	and.w	r3, r3, #3
 80010d2:	009b      	lsls	r3, r3, #2
 80010d4:	220f      	movs	r2, #15
 80010d6:	fa02 f303 	lsl.w	r3, r2, r3
 80010da:	43db      	mvns	r3, r3
 80010dc:	69ba      	ldr	r2, [r7, #24]
 80010de:	4013      	ands	r3, r2
 80010e0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	4a49      	ldr	r2, [pc, #292]	@ (800120c <HAL_GPIO_Init+0x2f0>)
 80010e6:	4293      	cmp	r3, r2
 80010e8:	d019      	beq.n	800111e <HAL_GPIO_Init+0x202>
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	4a48      	ldr	r2, [pc, #288]	@ (8001210 <HAL_GPIO_Init+0x2f4>)
 80010ee:	4293      	cmp	r3, r2
 80010f0:	d013      	beq.n	800111a <HAL_GPIO_Init+0x1fe>
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	4a47      	ldr	r2, [pc, #284]	@ (8001214 <HAL_GPIO_Init+0x2f8>)
 80010f6:	4293      	cmp	r3, r2
 80010f8:	d00d      	beq.n	8001116 <HAL_GPIO_Init+0x1fa>
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	4a46      	ldr	r2, [pc, #280]	@ (8001218 <HAL_GPIO_Init+0x2fc>)
 80010fe:	4293      	cmp	r3, r2
 8001100:	d007      	beq.n	8001112 <HAL_GPIO_Init+0x1f6>
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	4a45      	ldr	r2, [pc, #276]	@ (800121c <HAL_GPIO_Init+0x300>)
 8001106:	4293      	cmp	r3, r2
 8001108:	d101      	bne.n	800110e <HAL_GPIO_Init+0x1f2>
 800110a:	2304      	movs	r3, #4
 800110c:	e008      	b.n	8001120 <HAL_GPIO_Init+0x204>
 800110e:	2307      	movs	r3, #7
 8001110:	e006      	b.n	8001120 <HAL_GPIO_Init+0x204>
 8001112:	2303      	movs	r3, #3
 8001114:	e004      	b.n	8001120 <HAL_GPIO_Init+0x204>
 8001116:	2302      	movs	r3, #2
 8001118:	e002      	b.n	8001120 <HAL_GPIO_Init+0x204>
 800111a:	2301      	movs	r3, #1
 800111c:	e000      	b.n	8001120 <HAL_GPIO_Init+0x204>
 800111e:	2300      	movs	r3, #0
 8001120:	69fa      	ldr	r2, [r7, #28]
 8001122:	f002 0203 	and.w	r2, r2, #3
 8001126:	0092      	lsls	r2, r2, #2
 8001128:	4093      	lsls	r3, r2
 800112a:	69ba      	ldr	r2, [r7, #24]
 800112c:	4313      	orrs	r3, r2
 800112e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001130:	4935      	ldr	r1, [pc, #212]	@ (8001208 <HAL_GPIO_Init+0x2ec>)
 8001132:	69fb      	ldr	r3, [r7, #28]
 8001134:	089b      	lsrs	r3, r3, #2
 8001136:	3302      	adds	r3, #2
 8001138:	69ba      	ldr	r2, [r7, #24]
 800113a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800113e:	4b38      	ldr	r3, [pc, #224]	@ (8001220 <HAL_GPIO_Init+0x304>)
 8001140:	689b      	ldr	r3, [r3, #8]
 8001142:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001144:	693b      	ldr	r3, [r7, #16]
 8001146:	43db      	mvns	r3, r3
 8001148:	69ba      	ldr	r2, [r7, #24]
 800114a:	4013      	ands	r3, r2
 800114c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800114e:	683b      	ldr	r3, [r7, #0]
 8001150:	685b      	ldr	r3, [r3, #4]
 8001152:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001156:	2b00      	cmp	r3, #0
 8001158:	d003      	beq.n	8001162 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800115a:	69ba      	ldr	r2, [r7, #24]
 800115c:	693b      	ldr	r3, [r7, #16]
 800115e:	4313      	orrs	r3, r2
 8001160:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001162:	4a2f      	ldr	r2, [pc, #188]	@ (8001220 <HAL_GPIO_Init+0x304>)
 8001164:	69bb      	ldr	r3, [r7, #24]
 8001166:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001168:	4b2d      	ldr	r3, [pc, #180]	@ (8001220 <HAL_GPIO_Init+0x304>)
 800116a:	68db      	ldr	r3, [r3, #12]
 800116c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800116e:	693b      	ldr	r3, [r7, #16]
 8001170:	43db      	mvns	r3, r3
 8001172:	69ba      	ldr	r2, [r7, #24]
 8001174:	4013      	ands	r3, r2
 8001176:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001178:	683b      	ldr	r3, [r7, #0]
 800117a:	685b      	ldr	r3, [r3, #4]
 800117c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001180:	2b00      	cmp	r3, #0
 8001182:	d003      	beq.n	800118c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001184:	69ba      	ldr	r2, [r7, #24]
 8001186:	693b      	ldr	r3, [r7, #16]
 8001188:	4313      	orrs	r3, r2
 800118a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800118c:	4a24      	ldr	r2, [pc, #144]	@ (8001220 <HAL_GPIO_Init+0x304>)
 800118e:	69bb      	ldr	r3, [r7, #24]
 8001190:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001192:	4b23      	ldr	r3, [pc, #140]	@ (8001220 <HAL_GPIO_Init+0x304>)
 8001194:	685b      	ldr	r3, [r3, #4]
 8001196:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001198:	693b      	ldr	r3, [r7, #16]
 800119a:	43db      	mvns	r3, r3
 800119c:	69ba      	ldr	r2, [r7, #24]
 800119e:	4013      	ands	r3, r2
 80011a0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80011a2:	683b      	ldr	r3, [r7, #0]
 80011a4:	685b      	ldr	r3, [r3, #4]
 80011a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d003      	beq.n	80011b6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80011ae:	69ba      	ldr	r2, [r7, #24]
 80011b0:	693b      	ldr	r3, [r7, #16]
 80011b2:	4313      	orrs	r3, r2
 80011b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80011b6:	4a1a      	ldr	r2, [pc, #104]	@ (8001220 <HAL_GPIO_Init+0x304>)
 80011b8:	69bb      	ldr	r3, [r7, #24]
 80011ba:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80011bc:	4b18      	ldr	r3, [pc, #96]	@ (8001220 <HAL_GPIO_Init+0x304>)
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011c2:	693b      	ldr	r3, [r7, #16]
 80011c4:	43db      	mvns	r3, r3
 80011c6:	69ba      	ldr	r2, [r7, #24]
 80011c8:	4013      	ands	r3, r2
 80011ca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80011cc:	683b      	ldr	r3, [r7, #0]
 80011ce:	685b      	ldr	r3, [r3, #4]
 80011d0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d003      	beq.n	80011e0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80011d8:	69ba      	ldr	r2, [r7, #24]
 80011da:	693b      	ldr	r3, [r7, #16]
 80011dc:	4313      	orrs	r3, r2
 80011de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80011e0:	4a0f      	ldr	r2, [pc, #60]	@ (8001220 <HAL_GPIO_Init+0x304>)
 80011e2:	69bb      	ldr	r3, [r7, #24]
 80011e4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80011e6:	69fb      	ldr	r3, [r7, #28]
 80011e8:	3301      	adds	r3, #1
 80011ea:	61fb      	str	r3, [r7, #28]
 80011ec:	69fb      	ldr	r3, [r7, #28]
 80011ee:	2b0f      	cmp	r3, #15
 80011f0:	f67f aea2 	bls.w	8000f38 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80011f4:	bf00      	nop
 80011f6:	bf00      	nop
 80011f8:	3724      	adds	r7, #36	@ 0x24
 80011fa:	46bd      	mov	sp, r7
 80011fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001200:	4770      	bx	lr
 8001202:	bf00      	nop
 8001204:	40023800 	.word	0x40023800
 8001208:	40013800 	.word	0x40013800
 800120c:	40020000 	.word	0x40020000
 8001210:	40020400 	.word	0x40020400
 8001214:	40020800 	.word	0x40020800
 8001218:	40020c00 	.word	0x40020c00
 800121c:	40021000 	.word	0x40021000
 8001220:	40013c00 	.word	0x40013c00

08001224 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	b086      	sub	sp, #24
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	2b00      	cmp	r3, #0
 8001230:	d101      	bne.n	8001236 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001232:	2301      	movs	r3, #1
 8001234:	e267      	b.n	8001706 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	f003 0301 	and.w	r3, r3, #1
 800123e:	2b00      	cmp	r3, #0
 8001240:	d075      	beq.n	800132e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001242:	4b88      	ldr	r3, [pc, #544]	@ (8001464 <HAL_RCC_OscConfig+0x240>)
 8001244:	689b      	ldr	r3, [r3, #8]
 8001246:	f003 030c 	and.w	r3, r3, #12
 800124a:	2b04      	cmp	r3, #4
 800124c:	d00c      	beq.n	8001268 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800124e:	4b85      	ldr	r3, [pc, #532]	@ (8001464 <HAL_RCC_OscConfig+0x240>)
 8001250:	689b      	ldr	r3, [r3, #8]
 8001252:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001256:	2b08      	cmp	r3, #8
 8001258:	d112      	bne.n	8001280 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800125a:	4b82      	ldr	r3, [pc, #520]	@ (8001464 <HAL_RCC_OscConfig+0x240>)
 800125c:	685b      	ldr	r3, [r3, #4]
 800125e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001262:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001266:	d10b      	bne.n	8001280 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001268:	4b7e      	ldr	r3, [pc, #504]	@ (8001464 <HAL_RCC_OscConfig+0x240>)
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001270:	2b00      	cmp	r3, #0
 8001272:	d05b      	beq.n	800132c <HAL_RCC_OscConfig+0x108>
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	685b      	ldr	r3, [r3, #4]
 8001278:	2b00      	cmp	r3, #0
 800127a:	d157      	bne.n	800132c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800127c:	2301      	movs	r3, #1
 800127e:	e242      	b.n	8001706 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	685b      	ldr	r3, [r3, #4]
 8001284:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001288:	d106      	bne.n	8001298 <HAL_RCC_OscConfig+0x74>
 800128a:	4b76      	ldr	r3, [pc, #472]	@ (8001464 <HAL_RCC_OscConfig+0x240>)
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	4a75      	ldr	r2, [pc, #468]	@ (8001464 <HAL_RCC_OscConfig+0x240>)
 8001290:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001294:	6013      	str	r3, [r2, #0]
 8001296:	e01d      	b.n	80012d4 <HAL_RCC_OscConfig+0xb0>
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	685b      	ldr	r3, [r3, #4]
 800129c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80012a0:	d10c      	bne.n	80012bc <HAL_RCC_OscConfig+0x98>
 80012a2:	4b70      	ldr	r3, [pc, #448]	@ (8001464 <HAL_RCC_OscConfig+0x240>)
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	4a6f      	ldr	r2, [pc, #444]	@ (8001464 <HAL_RCC_OscConfig+0x240>)
 80012a8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80012ac:	6013      	str	r3, [r2, #0]
 80012ae:	4b6d      	ldr	r3, [pc, #436]	@ (8001464 <HAL_RCC_OscConfig+0x240>)
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	4a6c      	ldr	r2, [pc, #432]	@ (8001464 <HAL_RCC_OscConfig+0x240>)
 80012b4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80012b8:	6013      	str	r3, [r2, #0]
 80012ba:	e00b      	b.n	80012d4 <HAL_RCC_OscConfig+0xb0>
 80012bc:	4b69      	ldr	r3, [pc, #420]	@ (8001464 <HAL_RCC_OscConfig+0x240>)
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	4a68      	ldr	r2, [pc, #416]	@ (8001464 <HAL_RCC_OscConfig+0x240>)
 80012c2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80012c6:	6013      	str	r3, [r2, #0]
 80012c8:	4b66      	ldr	r3, [pc, #408]	@ (8001464 <HAL_RCC_OscConfig+0x240>)
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	4a65      	ldr	r2, [pc, #404]	@ (8001464 <HAL_RCC_OscConfig+0x240>)
 80012ce:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80012d2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	685b      	ldr	r3, [r3, #4]
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d013      	beq.n	8001304 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012dc:	f7ff fcdc 	bl	8000c98 <HAL_GetTick>
 80012e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012e2:	e008      	b.n	80012f6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80012e4:	f7ff fcd8 	bl	8000c98 <HAL_GetTick>
 80012e8:	4602      	mov	r2, r0
 80012ea:	693b      	ldr	r3, [r7, #16]
 80012ec:	1ad3      	subs	r3, r2, r3
 80012ee:	2b64      	cmp	r3, #100	@ 0x64
 80012f0:	d901      	bls.n	80012f6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80012f2:	2303      	movs	r3, #3
 80012f4:	e207      	b.n	8001706 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012f6:	4b5b      	ldr	r3, [pc, #364]	@ (8001464 <HAL_RCC_OscConfig+0x240>)
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d0f0      	beq.n	80012e4 <HAL_RCC_OscConfig+0xc0>
 8001302:	e014      	b.n	800132e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001304:	f7ff fcc8 	bl	8000c98 <HAL_GetTick>
 8001308:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800130a:	e008      	b.n	800131e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800130c:	f7ff fcc4 	bl	8000c98 <HAL_GetTick>
 8001310:	4602      	mov	r2, r0
 8001312:	693b      	ldr	r3, [r7, #16]
 8001314:	1ad3      	subs	r3, r2, r3
 8001316:	2b64      	cmp	r3, #100	@ 0x64
 8001318:	d901      	bls.n	800131e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800131a:	2303      	movs	r3, #3
 800131c:	e1f3      	b.n	8001706 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800131e:	4b51      	ldr	r3, [pc, #324]	@ (8001464 <HAL_RCC_OscConfig+0x240>)
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001326:	2b00      	cmp	r3, #0
 8001328:	d1f0      	bne.n	800130c <HAL_RCC_OscConfig+0xe8>
 800132a:	e000      	b.n	800132e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800132c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	f003 0302 	and.w	r3, r3, #2
 8001336:	2b00      	cmp	r3, #0
 8001338:	d063      	beq.n	8001402 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800133a:	4b4a      	ldr	r3, [pc, #296]	@ (8001464 <HAL_RCC_OscConfig+0x240>)
 800133c:	689b      	ldr	r3, [r3, #8]
 800133e:	f003 030c 	and.w	r3, r3, #12
 8001342:	2b00      	cmp	r3, #0
 8001344:	d00b      	beq.n	800135e <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001346:	4b47      	ldr	r3, [pc, #284]	@ (8001464 <HAL_RCC_OscConfig+0x240>)
 8001348:	689b      	ldr	r3, [r3, #8]
 800134a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800134e:	2b08      	cmp	r3, #8
 8001350:	d11c      	bne.n	800138c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001352:	4b44      	ldr	r3, [pc, #272]	@ (8001464 <HAL_RCC_OscConfig+0x240>)
 8001354:	685b      	ldr	r3, [r3, #4]
 8001356:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800135a:	2b00      	cmp	r3, #0
 800135c:	d116      	bne.n	800138c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800135e:	4b41      	ldr	r3, [pc, #260]	@ (8001464 <HAL_RCC_OscConfig+0x240>)
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	f003 0302 	and.w	r3, r3, #2
 8001366:	2b00      	cmp	r3, #0
 8001368:	d005      	beq.n	8001376 <HAL_RCC_OscConfig+0x152>
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	68db      	ldr	r3, [r3, #12]
 800136e:	2b01      	cmp	r3, #1
 8001370:	d001      	beq.n	8001376 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001372:	2301      	movs	r3, #1
 8001374:	e1c7      	b.n	8001706 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001376:	4b3b      	ldr	r3, [pc, #236]	@ (8001464 <HAL_RCC_OscConfig+0x240>)
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	691b      	ldr	r3, [r3, #16]
 8001382:	00db      	lsls	r3, r3, #3
 8001384:	4937      	ldr	r1, [pc, #220]	@ (8001464 <HAL_RCC_OscConfig+0x240>)
 8001386:	4313      	orrs	r3, r2
 8001388:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800138a:	e03a      	b.n	8001402 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	68db      	ldr	r3, [r3, #12]
 8001390:	2b00      	cmp	r3, #0
 8001392:	d020      	beq.n	80013d6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001394:	4b34      	ldr	r3, [pc, #208]	@ (8001468 <HAL_RCC_OscConfig+0x244>)
 8001396:	2201      	movs	r2, #1
 8001398:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800139a:	f7ff fc7d 	bl	8000c98 <HAL_GetTick>
 800139e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013a0:	e008      	b.n	80013b4 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80013a2:	f7ff fc79 	bl	8000c98 <HAL_GetTick>
 80013a6:	4602      	mov	r2, r0
 80013a8:	693b      	ldr	r3, [r7, #16]
 80013aa:	1ad3      	subs	r3, r2, r3
 80013ac:	2b02      	cmp	r3, #2
 80013ae:	d901      	bls.n	80013b4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80013b0:	2303      	movs	r3, #3
 80013b2:	e1a8      	b.n	8001706 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013b4:	4b2b      	ldr	r3, [pc, #172]	@ (8001464 <HAL_RCC_OscConfig+0x240>)
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	f003 0302 	and.w	r3, r3, #2
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d0f0      	beq.n	80013a2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013c0:	4b28      	ldr	r3, [pc, #160]	@ (8001464 <HAL_RCC_OscConfig+0x240>)
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	691b      	ldr	r3, [r3, #16]
 80013cc:	00db      	lsls	r3, r3, #3
 80013ce:	4925      	ldr	r1, [pc, #148]	@ (8001464 <HAL_RCC_OscConfig+0x240>)
 80013d0:	4313      	orrs	r3, r2
 80013d2:	600b      	str	r3, [r1, #0]
 80013d4:	e015      	b.n	8001402 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80013d6:	4b24      	ldr	r3, [pc, #144]	@ (8001468 <HAL_RCC_OscConfig+0x244>)
 80013d8:	2200      	movs	r2, #0
 80013da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013dc:	f7ff fc5c 	bl	8000c98 <HAL_GetTick>
 80013e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80013e2:	e008      	b.n	80013f6 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80013e4:	f7ff fc58 	bl	8000c98 <HAL_GetTick>
 80013e8:	4602      	mov	r2, r0
 80013ea:	693b      	ldr	r3, [r7, #16]
 80013ec:	1ad3      	subs	r3, r2, r3
 80013ee:	2b02      	cmp	r3, #2
 80013f0:	d901      	bls.n	80013f6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80013f2:	2303      	movs	r3, #3
 80013f4:	e187      	b.n	8001706 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80013f6:	4b1b      	ldr	r3, [pc, #108]	@ (8001464 <HAL_RCC_OscConfig+0x240>)
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	f003 0302 	and.w	r3, r3, #2
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d1f0      	bne.n	80013e4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	f003 0308 	and.w	r3, r3, #8
 800140a:	2b00      	cmp	r3, #0
 800140c:	d036      	beq.n	800147c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	695b      	ldr	r3, [r3, #20]
 8001412:	2b00      	cmp	r3, #0
 8001414:	d016      	beq.n	8001444 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001416:	4b15      	ldr	r3, [pc, #84]	@ (800146c <HAL_RCC_OscConfig+0x248>)
 8001418:	2201      	movs	r2, #1
 800141a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800141c:	f7ff fc3c 	bl	8000c98 <HAL_GetTick>
 8001420:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001422:	e008      	b.n	8001436 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001424:	f7ff fc38 	bl	8000c98 <HAL_GetTick>
 8001428:	4602      	mov	r2, r0
 800142a:	693b      	ldr	r3, [r7, #16]
 800142c:	1ad3      	subs	r3, r2, r3
 800142e:	2b02      	cmp	r3, #2
 8001430:	d901      	bls.n	8001436 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001432:	2303      	movs	r3, #3
 8001434:	e167      	b.n	8001706 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001436:	4b0b      	ldr	r3, [pc, #44]	@ (8001464 <HAL_RCC_OscConfig+0x240>)
 8001438:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800143a:	f003 0302 	and.w	r3, r3, #2
 800143e:	2b00      	cmp	r3, #0
 8001440:	d0f0      	beq.n	8001424 <HAL_RCC_OscConfig+0x200>
 8001442:	e01b      	b.n	800147c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001444:	4b09      	ldr	r3, [pc, #36]	@ (800146c <HAL_RCC_OscConfig+0x248>)
 8001446:	2200      	movs	r2, #0
 8001448:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800144a:	f7ff fc25 	bl	8000c98 <HAL_GetTick>
 800144e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001450:	e00e      	b.n	8001470 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001452:	f7ff fc21 	bl	8000c98 <HAL_GetTick>
 8001456:	4602      	mov	r2, r0
 8001458:	693b      	ldr	r3, [r7, #16]
 800145a:	1ad3      	subs	r3, r2, r3
 800145c:	2b02      	cmp	r3, #2
 800145e:	d907      	bls.n	8001470 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001460:	2303      	movs	r3, #3
 8001462:	e150      	b.n	8001706 <HAL_RCC_OscConfig+0x4e2>
 8001464:	40023800 	.word	0x40023800
 8001468:	42470000 	.word	0x42470000
 800146c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001470:	4b88      	ldr	r3, [pc, #544]	@ (8001694 <HAL_RCC_OscConfig+0x470>)
 8001472:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001474:	f003 0302 	and.w	r3, r3, #2
 8001478:	2b00      	cmp	r3, #0
 800147a:	d1ea      	bne.n	8001452 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	f003 0304 	and.w	r3, r3, #4
 8001484:	2b00      	cmp	r3, #0
 8001486:	f000 8097 	beq.w	80015b8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800148a:	2300      	movs	r3, #0
 800148c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800148e:	4b81      	ldr	r3, [pc, #516]	@ (8001694 <HAL_RCC_OscConfig+0x470>)
 8001490:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001492:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001496:	2b00      	cmp	r3, #0
 8001498:	d10f      	bne.n	80014ba <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800149a:	2300      	movs	r3, #0
 800149c:	60bb      	str	r3, [r7, #8]
 800149e:	4b7d      	ldr	r3, [pc, #500]	@ (8001694 <HAL_RCC_OscConfig+0x470>)
 80014a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014a2:	4a7c      	ldr	r2, [pc, #496]	@ (8001694 <HAL_RCC_OscConfig+0x470>)
 80014a4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80014a8:	6413      	str	r3, [r2, #64]	@ 0x40
 80014aa:	4b7a      	ldr	r3, [pc, #488]	@ (8001694 <HAL_RCC_OscConfig+0x470>)
 80014ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014ae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80014b2:	60bb      	str	r3, [r7, #8]
 80014b4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80014b6:	2301      	movs	r3, #1
 80014b8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014ba:	4b77      	ldr	r3, [pc, #476]	@ (8001698 <HAL_RCC_OscConfig+0x474>)
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d118      	bne.n	80014f8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80014c6:	4b74      	ldr	r3, [pc, #464]	@ (8001698 <HAL_RCC_OscConfig+0x474>)
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	4a73      	ldr	r2, [pc, #460]	@ (8001698 <HAL_RCC_OscConfig+0x474>)
 80014cc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80014d0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80014d2:	f7ff fbe1 	bl	8000c98 <HAL_GetTick>
 80014d6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014d8:	e008      	b.n	80014ec <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80014da:	f7ff fbdd 	bl	8000c98 <HAL_GetTick>
 80014de:	4602      	mov	r2, r0
 80014e0:	693b      	ldr	r3, [r7, #16]
 80014e2:	1ad3      	subs	r3, r2, r3
 80014e4:	2b02      	cmp	r3, #2
 80014e6:	d901      	bls.n	80014ec <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80014e8:	2303      	movs	r3, #3
 80014ea:	e10c      	b.n	8001706 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014ec:	4b6a      	ldr	r3, [pc, #424]	@ (8001698 <HAL_RCC_OscConfig+0x474>)
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d0f0      	beq.n	80014da <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	689b      	ldr	r3, [r3, #8]
 80014fc:	2b01      	cmp	r3, #1
 80014fe:	d106      	bne.n	800150e <HAL_RCC_OscConfig+0x2ea>
 8001500:	4b64      	ldr	r3, [pc, #400]	@ (8001694 <HAL_RCC_OscConfig+0x470>)
 8001502:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001504:	4a63      	ldr	r2, [pc, #396]	@ (8001694 <HAL_RCC_OscConfig+0x470>)
 8001506:	f043 0301 	orr.w	r3, r3, #1
 800150a:	6713      	str	r3, [r2, #112]	@ 0x70
 800150c:	e01c      	b.n	8001548 <HAL_RCC_OscConfig+0x324>
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	689b      	ldr	r3, [r3, #8]
 8001512:	2b05      	cmp	r3, #5
 8001514:	d10c      	bne.n	8001530 <HAL_RCC_OscConfig+0x30c>
 8001516:	4b5f      	ldr	r3, [pc, #380]	@ (8001694 <HAL_RCC_OscConfig+0x470>)
 8001518:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800151a:	4a5e      	ldr	r2, [pc, #376]	@ (8001694 <HAL_RCC_OscConfig+0x470>)
 800151c:	f043 0304 	orr.w	r3, r3, #4
 8001520:	6713      	str	r3, [r2, #112]	@ 0x70
 8001522:	4b5c      	ldr	r3, [pc, #368]	@ (8001694 <HAL_RCC_OscConfig+0x470>)
 8001524:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001526:	4a5b      	ldr	r2, [pc, #364]	@ (8001694 <HAL_RCC_OscConfig+0x470>)
 8001528:	f043 0301 	orr.w	r3, r3, #1
 800152c:	6713      	str	r3, [r2, #112]	@ 0x70
 800152e:	e00b      	b.n	8001548 <HAL_RCC_OscConfig+0x324>
 8001530:	4b58      	ldr	r3, [pc, #352]	@ (8001694 <HAL_RCC_OscConfig+0x470>)
 8001532:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001534:	4a57      	ldr	r2, [pc, #348]	@ (8001694 <HAL_RCC_OscConfig+0x470>)
 8001536:	f023 0301 	bic.w	r3, r3, #1
 800153a:	6713      	str	r3, [r2, #112]	@ 0x70
 800153c:	4b55      	ldr	r3, [pc, #340]	@ (8001694 <HAL_RCC_OscConfig+0x470>)
 800153e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001540:	4a54      	ldr	r2, [pc, #336]	@ (8001694 <HAL_RCC_OscConfig+0x470>)
 8001542:	f023 0304 	bic.w	r3, r3, #4
 8001546:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	689b      	ldr	r3, [r3, #8]
 800154c:	2b00      	cmp	r3, #0
 800154e:	d015      	beq.n	800157c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001550:	f7ff fba2 	bl	8000c98 <HAL_GetTick>
 8001554:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001556:	e00a      	b.n	800156e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001558:	f7ff fb9e 	bl	8000c98 <HAL_GetTick>
 800155c:	4602      	mov	r2, r0
 800155e:	693b      	ldr	r3, [r7, #16]
 8001560:	1ad3      	subs	r3, r2, r3
 8001562:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001566:	4293      	cmp	r3, r2
 8001568:	d901      	bls.n	800156e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800156a:	2303      	movs	r3, #3
 800156c:	e0cb      	b.n	8001706 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800156e:	4b49      	ldr	r3, [pc, #292]	@ (8001694 <HAL_RCC_OscConfig+0x470>)
 8001570:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001572:	f003 0302 	and.w	r3, r3, #2
 8001576:	2b00      	cmp	r3, #0
 8001578:	d0ee      	beq.n	8001558 <HAL_RCC_OscConfig+0x334>
 800157a:	e014      	b.n	80015a6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800157c:	f7ff fb8c 	bl	8000c98 <HAL_GetTick>
 8001580:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001582:	e00a      	b.n	800159a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001584:	f7ff fb88 	bl	8000c98 <HAL_GetTick>
 8001588:	4602      	mov	r2, r0
 800158a:	693b      	ldr	r3, [r7, #16]
 800158c:	1ad3      	subs	r3, r2, r3
 800158e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001592:	4293      	cmp	r3, r2
 8001594:	d901      	bls.n	800159a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001596:	2303      	movs	r3, #3
 8001598:	e0b5      	b.n	8001706 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800159a:	4b3e      	ldr	r3, [pc, #248]	@ (8001694 <HAL_RCC_OscConfig+0x470>)
 800159c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800159e:	f003 0302 	and.w	r3, r3, #2
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d1ee      	bne.n	8001584 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80015a6:	7dfb      	ldrb	r3, [r7, #23]
 80015a8:	2b01      	cmp	r3, #1
 80015aa:	d105      	bne.n	80015b8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80015ac:	4b39      	ldr	r3, [pc, #228]	@ (8001694 <HAL_RCC_OscConfig+0x470>)
 80015ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015b0:	4a38      	ldr	r2, [pc, #224]	@ (8001694 <HAL_RCC_OscConfig+0x470>)
 80015b2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80015b6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	699b      	ldr	r3, [r3, #24]
 80015bc:	2b00      	cmp	r3, #0
 80015be:	f000 80a1 	beq.w	8001704 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80015c2:	4b34      	ldr	r3, [pc, #208]	@ (8001694 <HAL_RCC_OscConfig+0x470>)
 80015c4:	689b      	ldr	r3, [r3, #8]
 80015c6:	f003 030c 	and.w	r3, r3, #12
 80015ca:	2b08      	cmp	r3, #8
 80015cc:	d05c      	beq.n	8001688 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	699b      	ldr	r3, [r3, #24]
 80015d2:	2b02      	cmp	r3, #2
 80015d4:	d141      	bne.n	800165a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015d6:	4b31      	ldr	r3, [pc, #196]	@ (800169c <HAL_RCC_OscConfig+0x478>)
 80015d8:	2200      	movs	r2, #0
 80015da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015dc:	f7ff fb5c 	bl	8000c98 <HAL_GetTick>
 80015e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80015e2:	e008      	b.n	80015f6 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80015e4:	f7ff fb58 	bl	8000c98 <HAL_GetTick>
 80015e8:	4602      	mov	r2, r0
 80015ea:	693b      	ldr	r3, [r7, #16]
 80015ec:	1ad3      	subs	r3, r2, r3
 80015ee:	2b02      	cmp	r3, #2
 80015f0:	d901      	bls.n	80015f6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80015f2:	2303      	movs	r3, #3
 80015f4:	e087      	b.n	8001706 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80015f6:	4b27      	ldr	r3, [pc, #156]	@ (8001694 <HAL_RCC_OscConfig+0x470>)
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d1f0      	bne.n	80015e4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	69da      	ldr	r2, [r3, #28]
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	6a1b      	ldr	r3, [r3, #32]
 800160a:	431a      	orrs	r2, r3
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001610:	019b      	lsls	r3, r3, #6
 8001612:	431a      	orrs	r2, r3
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001618:	085b      	lsrs	r3, r3, #1
 800161a:	3b01      	subs	r3, #1
 800161c:	041b      	lsls	r3, r3, #16
 800161e:	431a      	orrs	r2, r3
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001624:	061b      	lsls	r3, r3, #24
 8001626:	491b      	ldr	r1, [pc, #108]	@ (8001694 <HAL_RCC_OscConfig+0x470>)
 8001628:	4313      	orrs	r3, r2
 800162a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800162c:	4b1b      	ldr	r3, [pc, #108]	@ (800169c <HAL_RCC_OscConfig+0x478>)
 800162e:	2201      	movs	r2, #1
 8001630:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001632:	f7ff fb31 	bl	8000c98 <HAL_GetTick>
 8001636:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001638:	e008      	b.n	800164c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800163a:	f7ff fb2d 	bl	8000c98 <HAL_GetTick>
 800163e:	4602      	mov	r2, r0
 8001640:	693b      	ldr	r3, [r7, #16]
 8001642:	1ad3      	subs	r3, r2, r3
 8001644:	2b02      	cmp	r3, #2
 8001646:	d901      	bls.n	800164c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001648:	2303      	movs	r3, #3
 800164a:	e05c      	b.n	8001706 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800164c:	4b11      	ldr	r3, [pc, #68]	@ (8001694 <HAL_RCC_OscConfig+0x470>)
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001654:	2b00      	cmp	r3, #0
 8001656:	d0f0      	beq.n	800163a <HAL_RCC_OscConfig+0x416>
 8001658:	e054      	b.n	8001704 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800165a:	4b10      	ldr	r3, [pc, #64]	@ (800169c <HAL_RCC_OscConfig+0x478>)
 800165c:	2200      	movs	r2, #0
 800165e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001660:	f7ff fb1a 	bl	8000c98 <HAL_GetTick>
 8001664:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001666:	e008      	b.n	800167a <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001668:	f7ff fb16 	bl	8000c98 <HAL_GetTick>
 800166c:	4602      	mov	r2, r0
 800166e:	693b      	ldr	r3, [r7, #16]
 8001670:	1ad3      	subs	r3, r2, r3
 8001672:	2b02      	cmp	r3, #2
 8001674:	d901      	bls.n	800167a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001676:	2303      	movs	r3, #3
 8001678:	e045      	b.n	8001706 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800167a:	4b06      	ldr	r3, [pc, #24]	@ (8001694 <HAL_RCC_OscConfig+0x470>)
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001682:	2b00      	cmp	r3, #0
 8001684:	d1f0      	bne.n	8001668 <HAL_RCC_OscConfig+0x444>
 8001686:	e03d      	b.n	8001704 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	699b      	ldr	r3, [r3, #24]
 800168c:	2b01      	cmp	r3, #1
 800168e:	d107      	bne.n	80016a0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001690:	2301      	movs	r3, #1
 8001692:	e038      	b.n	8001706 <HAL_RCC_OscConfig+0x4e2>
 8001694:	40023800 	.word	0x40023800
 8001698:	40007000 	.word	0x40007000
 800169c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80016a0:	4b1b      	ldr	r3, [pc, #108]	@ (8001710 <HAL_RCC_OscConfig+0x4ec>)
 80016a2:	685b      	ldr	r3, [r3, #4]
 80016a4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	699b      	ldr	r3, [r3, #24]
 80016aa:	2b01      	cmp	r3, #1
 80016ac:	d028      	beq.n	8001700 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80016b8:	429a      	cmp	r2, r3
 80016ba:	d121      	bne.n	8001700 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80016c6:	429a      	cmp	r2, r3
 80016c8:	d11a      	bne.n	8001700 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80016ca:	68fa      	ldr	r2, [r7, #12]
 80016cc:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80016d0:	4013      	ands	r3, r2
 80016d2:	687a      	ldr	r2, [r7, #4]
 80016d4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80016d6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80016d8:	4293      	cmp	r3, r2
 80016da:	d111      	bne.n	8001700 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80016e6:	085b      	lsrs	r3, r3, #1
 80016e8:	3b01      	subs	r3, #1
 80016ea:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80016ec:	429a      	cmp	r2, r3
 80016ee:	d107      	bne.n	8001700 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80016fa:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80016fc:	429a      	cmp	r2, r3
 80016fe:	d001      	beq.n	8001704 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8001700:	2301      	movs	r3, #1
 8001702:	e000      	b.n	8001706 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001704:	2300      	movs	r3, #0
}
 8001706:	4618      	mov	r0, r3
 8001708:	3718      	adds	r7, #24
 800170a:	46bd      	mov	sp, r7
 800170c:	bd80      	pop	{r7, pc}
 800170e:	bf00      	nop
 8001710:	40023800 	.word	0x40023800

08001714 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	b084      	sub	sp, #16
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
 800171c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	2b00      	cmp	r3, #0
 8001722:	d101      	bne.n	8001728 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001724:	2301      	movs	r3, #1
 8001726:	e0cc      	b.n	80018c2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001728:	4b68      	ldr	r3, [pc, #416]	@ (80018cc <HAL_RCC_ClockConfig+0x1b8>)
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	f003 0307 	and.w	r3, r3, #7
 8001730:	683a      	ldr	r2, [r7, #0]
 8001732:	429a      	cmp	r2, r3
 8001734:	d90c      	bls.n	8001750 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001736:	4b65      	ldr	r3, [pc, #404]	@ (80018cc <HAL_RCC_ClockConfig+0x1b8>)
 8001738:	683a      	ldr	r2, [r7, #0]
 800173a:	b2d2      	uxtb	r2, r2
 800173c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800173e:	4b63      	ldr	r3, [pc, #396]	@ (80018cc <HAL_RCC_ClockConfig+0x1b8>)
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	f003 0307 	and.w	r3, r3, #7
 8001746:	683a      	ldr	r2, [r7, #0]
 8001748:	429a      	cmp	r2, r3
 800174a:	d001      	beq.n	8001750 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800174c:	2301      	movs	r3, #1
 800174e:	e0b8      	b.n	80018c2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	f003 0302 	and.w	r3, r3, #2
 8001758:	2b00      	cmp	r3, #0
 800175a:	d020      	beq.n	800179e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	f003 0304 	and.w	r3, r3, #4
 8001764:	2b00      	cmp	r3, #0
 8001766:	d005      	beq.n	8001774 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001768:	4b59      	ldr	r3, [pc, #356]	@ (80018d0 <HAL_RCC_ClockConfig+0x1bc>)
 800176a:	689b      	ldr	r3, [r3, #8]
 800176c:	4a58      	ldr	r2, [pc, #352]	@ (80018d0 <HAL_RCC_ClockConfig+0x1bc>)
 800176e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001772:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	f003 0308 	and.w	r3, r3, #8
 800177c:	2b00      	cmp	r3, #0
 800177e:	d005      	beq.n	800178c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001780:	4b53      	ldr	r3, [pc, #332]	@ (80018d0 <HAL_RCC_ClockConfig+0x1bc>)
 8001782:	689b      	ldr	r3, [r3, #8]
 8001784:	4a52      	ldr	r2, [pc, #328]	@ (80018d0 <HAL_RCC_ClockConfig+0x1bc>)
 8001786:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800178a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800178c:	4b50      	ldr	r3, [pc, #320]	@ (80018d0 <HAL_RCC_ClockConfig+0x1bc>)
 800178e:	689b      	ldr	r3, [r3, #8]
 8001790:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	689b      	ldr	r3, [r3, #8]
 8001798:	494d      	ldr	r1, [pc, #308]	@ (80018d0 <HAL_RCC_ClockConfig+0x1bc>)
 800179a:	4313      	orrs	r3, r2
 800179c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	f003 0301 	and.w	r3, r3, #1
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d044      	beq.n	8001834 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	685b      	ldr	r3, [r3, #4]
 80017ae:	2b01      	cmp	r3, #1
 80017b0:	d107      	bne.n	80017c2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017b2:	4b47      	ldr	r3, [pc, #284]	@ (80018d0 <HAL_RCC_ClockConfig+0x1bc>)
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d119      	bne.n	80017f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017be:	2301      	movs	r3, #1
 80017c0:	e07f      	b.n	80018c2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	685b      	ldr	r3, [r3, #4]
 80017c6:	2b02      	cmp	r3, #2
 80017c8:	d003      	beq.n	80017d2 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80017ce:	2b03      	cmp	r3, #3
 80017d0:	d107      	bne.n	80017e2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80017d2:	4b3f      	ldr	r3, [pc, #252]	@ (80018d0 <HAL_RCC_ClockConfig+0x1bc>)
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d109      	bne.n	80017f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017de:	2301      	movs	r3, #1
 80017e0:	e06f      	b.n	80018c2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017e2:	4b3b      	ldr	r3, [pc, #236]	@ (80018d0 <HAL_RCC_ClockConfig+0x1bc>)
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	f003 0302 	and.w	r3, r3, #2
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d101      	bne.n	80017f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017ee:	2301      	movs	r3, #1
 80017f0:	e067      	b.n	80018c2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80017f2:	4b37      	ldr	r3, [pc, #220]	@ (80018d0 <HAL_RCC_ClockConfig+0x1bc>)
 80017f4:	689b      	ldr	r3, [r3, #8]
 80017f6:	f023 0203 	bic.w	r2, r3, #3
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	685b      	ldr	r3, [r3, #4]
 80017fe:	4934      	ldr	r1, [pc, #208]	@ (80018d0 <HAL_RCC_ClockConfig+0x1bc>)
 8001800:	4313      	orrs	r3, r2
 8001802:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001804:	f7ff fa48 	bl	8000c98 <HAL_GetTick>
 8001808:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800180a:	e00a      	b.n	8001822 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800180c:	f7ff fa44 	bl	8000c98 <HAL_GetTick>
 8001810:	4602      	mov	r2, r0
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	1ad3      	subs	r3, r2, r3
 8001816:	f241 3288 	movw	r2, #5000	@ 0x1388
 800181a:	4293      	cmp	r3, r2
 800181c:	d901      	bls.n	8001822 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800181e:	2303      	movs	r3, #3
 8001820:	e04f      	b.n	80018c2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001822:	4b2b      	ldr	r3, [pc, #172]	@ (80018d0 <HAL_RCC_ClockConfig+0x1bc>)
 8001824:	689b      	ldr	r3, [r3, #8]
 8001826:	f003 020c 	and.w	r2, r3, #12
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	685b      	ldr	r3, [r3, #4]
 800182e:	009b      	lsls	r3, r3, #2
 8001830:	429a      	cmp	r2, r3
 8001832:	d1eb      	bne.n	800180c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001834:	4b25      	ldr	r3, [pc, #148]	@ (80018cc <HAL_RCC_ClockConfig+0x1b8>)
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	f003 0307 	and.w	r3, r3, #7
 800183c:	683a      	ldr	r2, [r7, #0]
 800183e:	429a      	cmp	r2, r3
 8001840:	d20c      	bcs.n	800185c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001842:	4b22      	ldr	r3, [pc, #136]	@ (80018cc <HAL_RCC_ClockConfig+0x1b8>)
 8001844:	683a      	ldr	r2, [r7, #0]
 8001846:	b2d2      	uxtb	r2, r2
 8001848:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800184a:	4b20      	ldr	r3, [pc, #128]	@ (80018cc <HAL_RCC_ClockConfig+0x1b8>)
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	f003 0307 	and.w	r3, r3, #7
 8001852:	683a      	ldr	r2, [r7, #0]
 8001854:	429a      	cmp	r2, r3
 8001856:	d001      	beq.n	800185c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001858:	2301      	movs	r3, #1
 800185a:	e032      	b.n	80018c2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	f003 0304 	and.w	r3, r3, #4
 8001864:	2b00      	cmp	r3, #0
 8001866:	d008      	beq.n	800187a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001868:	4b19      	ldr	r3, [pc, #100]	@ (80018d0 <HAL_RCC_ClockConfig+0x1bc>)
 800186a:	689b      	ldr	r3, [r3, #8]
 800186c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	68db      	ldr	r3, [r3, #12]
 8001874:	4916      	ldr	r1, [pc, #88]	@ (80018d0 <HAL_RCC_ClockConfig+0x1bc>)
 8001876:	4313      	orrs	r3, r2
 8001878:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	f003 0308 	and.w	r3, r3, #8
 8001882:	2b00      	cmp	r3, #0
 8001884:	d009      	beq.n	800189a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001886:	4b12      	ldr	r3, [pc, #72]	@ (80018d0 <HAL_RCC_ClockConfig+0x1bc>)
 8001888:	689b      	ldr	r3, [r3, #8]
 800188a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	691b      	ldr	r3, [r3, #16]
 8001892:	00db      	lsls	r3, r3, #3
 8001894:	490e      	ldr	r1, [pc, #56]	@ (80018d0 <HAL_RCC_ClockConfig+0x1bc>)
 8001896:	4313      	orrs	r3, r2
 8001898:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800189a:	f000 f821 	bl	80018e0 <HAL_RCC_GetSysClockFreq>
 800189e:	4602      	mov	r2, r0
 80018a0:	4b0b      	ldr	r3, [pc, #44]	@ (80018d0 <HAL_RCC_ClockConfig+0x1bc>)
 80018a2:	689b      	ldr	r3, [r3, #8]
 80018a4:	091b      	lsrs	r3, r3, #4
 80018a6:	f003 030f 	and.w	r3, r3, #15
 80018aa:	490a      	ldr	r1, [pc, #40]	@ (80018d4 <HAL_RCC_ClockConfig+0x1c0>)
 80018ac:	5ccb      	ldrb	r3, [r1, r3]
 80018ae:	fa22 f303 	lsr.w	r3, r2, r3
 80018b2:	4a09      	ldr	r2, [pc, #36]	@ (80018d8 <HAL_RCC_ClockConfig+0x1c4>)
 80018b4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80018b6:	4b09      	ldr	r3, [pc, #36]	@ (80018dc <HAL_RCC_ClockConfig+0x1c8>)
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	4618      	mov	r0, r3
 80018bc:	f7ff f9a8 	bl	8000c10 <HAL_InitTick>

  return HAL_OK;
 80018c0:	2300      	movs	r3, #0
}
 80018c2:	4618      	mov	r0, r3
 80018c4:	3710      	adds	r7, #16
 80018c6:	46bd      	mov	sp, r7
 80018c8:	bd80      	pop	{r7, pc}
 80018ca:	bf00      	nop
 80018cc:	40023c00 	.word	0x40023c00
 80018d0:	40023800 	.word	0x40023800
 80018d4:	080037cc 	.word	0x080037cc
 80018d8:	20000000 	.word	0x20000000
 80018dc:	20000004 	.word	0x20000004

080018e0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80018e0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80018e4:	b090      	sub	sp, #64	@ 0x40
 80018e6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80018e8:	2300      	movs	r3, #0
 80018ea:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 80018ec:	2300      	movs	r3, #0
 80018ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 80018f0:	2300      	movs	r3, #0
 80018f2:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 80018f4:	2300      	movs	r3, #0
 80018f6:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80018f8:	4b59      	ldr	r3, [pc, #356]	@ (8001a60 <HAL_RCC_GetSysClockFreq+0x180>)
 80018fa:	689b      	ldr	r3, [r3, #8]
 80018fc:	f003 030c 	and.w	r3, r3, #12
 8001900:	2b08      	cmp	r3, #8
 8001902:	d00d      	beq.n	8001920 <HAL_RCC_GetSysClockFreq+0x40>
 8001904:	2b08      	cmp	r3, #8
 8001906:	f200 80a1 	bhi.w	8001a4c <HAL_RCC_GetSysClockFreq+0x16c>
 800190a:	2b00      	cmp	r3, #0
 800190c:	d002      	beq.n	8001914 <HAL_RCC_GetSysClockFreq+0x34>
 800190e:	2b04      	cmp	r3, #4
 8001910:	d003      	beq.n	800191a <HAL_RCC_GetSysClockFreq+0x3a>
 8001912:	e09b      	b.n	8001a4c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001914:	4b53      	ldr	r3, [pc, #332]	@ (8001a64 <HAL_RCC_GetSysClockFreq+0x184>)
 8001916:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001918:	e09b      	b.n	8001a52 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800191a:	4b53      	ldr	r3, [pc, #332]	@ (8001a68 <HAL_RCC_GetSysClockFreq+0x188>)
 800191c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800191e:	e098      	b.n	8001a52 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001920:	4b4f      	ldr	r3, [pc, #316]	@ (8001a60 <HAL_RCC_GetSysClockFreq+0x180>)
 8001922:	685b      	ldr	r3, [r3, #4]
 8001924:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001928:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800192a:	4b4d      	ldr	r3, [pc, #308]	@ (8001a60 <HAL_RCC_GetSysClockFreq+0x180>)
 800192c:	685b      	ldr	r3, [r3, #4]
 800192e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001932:	2b00      	cmp	r3, #0
 8001934:	d028      	beq.n	8001988 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001936:	4b4a      	ldr	r3, [pc, #296]	@ (8001a60 <HAL_RCC_GetSysClockFreq+0x180>)
 8001938:	685b      	ldr	r3, [r3, #4]
 800193a:	099b      	lsrs	r3, r3, #6
 800193c:	2200      	movs	r2, #0
 800193e:	623b      	str	r3, [r7, #32]
 8001940:	627a      	str	r2, [r7, #36]	@ 0x24
 8001942:	6a3b      	ldr	r3, [r7, #32]
 8001944:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001948:	2100      	movs	r1, #0
 800194a:	4b47      	ldr	r3, [pc, #284]	@ (8001a68 <HAL_RCC_GetSysClockFreq+0x188>)
 800194c:	fb03 f201 	mul.w	r2, r3, r1
 8001950:	2300      	movs	r3, #0
 8001952:	fb00 f303 	mul.w	r3, r0, r3
 8001956:	4413      	add	r3, r2
 8001958:	4a43      	ldr	r2, [pc, #268]	@ (8001a68 <HAL_RCC_GetSysClockFreq+0x188>)
 800195a:	fba0 1202 	umull	r1, r2, r0, r2
 800195e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001960:	460a      	mov	r2, r1
 8001962:	62ba      	str	r2, [r7, #40]	@ 0x28
 8001964:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001966:	4413      	add	r3, r2
 8001968:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800196a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800196c:	2200      	movs	r2, #0
 800196e:	61bb      	str	r3, [r7, #24]
 8001970:	61fa      	str	r2, [r7, #28]
 8001972:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001976:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800197a:	f7fe fc89 	bl	8000290 <__aeabi_uldivmod>
 800197e:	4602      	mov	r2, r0
 8001980:	460b      	mov	r3, r1
 8001982:	4613      	mov	r3, r2
 8001984:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001986:	e053      	b.n	8001a30 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001988:	4b35      	ldr	r3, [pc, #212]	@ (8001a60 <HAL_RCC_GetSysClockFreq+0x180>)
 800198a:	685b      	ldr	r3, [r3, #4]
 800198c:	099b      	lsrs	r3, r3, #6
 800198e:	2200      	movs	r2, #0
 8001990:	613b      	str	r3, [r7, #16]
 8001992:	617a      	str	r2, [r7, #20]
 8001994:	693b      	ldr	r3, [r7, #16]
 8001996:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800199a:	f04f 0b00 	mov.w	fp, #0
 800199e:	4652      	mov	r2, sl
 80019a0:	465b      	mov	r3, fp
 80019a2:	f04f 0000 	mov.w	r0, #0
 80019a6:	f04f 0100 	mov.w	r1, #0
 80019aa:	0159      	lsls	r1, r3, #5
 80019ac:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80019b0:	0150      	lsls	r0, r2, #5
 80019b2:	4602      	mov	r2, r0
 80019b4:	460b      	mov	r3, r1
 80019b6:	ebb2 080a 	subs.w	r8, r2, sl
 80019ba:	eb63 090b 	sbc.w	r9, r3, fp
 80019be:	f04f 0200 	mov.w	r2, #0
 80019c2:	f04f 0300 	mov.w	r3, #0
 80019c6:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80019ca:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80019ce:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80019d2:	ebb2 0408 	subs.w	r4, r2, r8
 80019d6:	eb63 0509 	sbc.w	r5, r3, r9
 80019da:	f04f 0200 	mov.w	r2, #0
 80019de:	f04f 0300 	mov.w	r3, #0
 80019e2:	00eb      	lsls	r3, r5, #3
 80019e4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80019e8:	00e2      	lsls	r2, r4, #3
 80019ea:	4614      	mov	r4, r2
 80019ec:	461d      	mov	r5, r3
 80019ee:	eb14 030a 	adds.w	r3, r4, sl
 80019f2:	603b      	str	r3, [r7, #0]
 80019f4:	eb45 030b 	adc.w	r3, r5, fp
 80019f8:	607b      	str	r3, [r7, #4]
 80019fa:	f04f 0200 	mov.w	r2, #0
 80019fe:	f04f 0300 	mov.w	r3, #0
 8001a02:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001a06:	4629      	mov	r1, r5
 8001a08:	028b      	lsls	r3, r1, #10
 8001a0a:	4621      	mov	r1, r4
 8001a0c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001a10:	4621      	mov	r1, r4
 8001a12:	028a      	lsls	r2, r1, #10
 8001a14:	4610      	mov	r0, r2
 8001a16:	4619      	mov	r1, r3
 8001a18:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	60bb      	str	r3, [r7, #8]
 8001a1e:	60fa      	str	r2, [r7, #12]
 8001a20:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001a24:	f7fe fc34 	bl	8000290 <__aeabi_uldivmod>
 8001a28:	4602      	mov	r2, r0
 8001a2a:	460b      	mov	r3, r1
 8001a2c:	4613      	mov	r3, r2
 8001a2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8001a30:	4b0b      	ldr	r3, [pc, #44]	@ (8001a60 <HAL_RCC_GetSysClockFreq+0x180>)
 8001a32:	685b      	ldr	r3, [r3, #4]
 8001a34:	0c1b      	lsrs	r3, r3, #16
 8001a36:	f003 0303 	and.w	r3, r3, #3
 8001a3a:	3301      	adds	r3, #1
 8001a3c:	005b      	lsls	r3, r3, #1
 8001a3e:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8001a40:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001a42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001a44:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a48:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001a4a:	e002      	b.n	8001a52 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001a4c:	4b05      	ldr	r3, [pc, #20]	@ (8001a64 <HAL_RCC_GetSysClockFreq+0x184>)
 8001a4e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001a50:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001a52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8001a54:	4618      	mov	r0, r3
 8001a56:	3740      	adds	r7, #64	@ 0x40
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001a5e:	bf00      	nop
 8001a60:	40023800 	.word	0x40023800
 8001a64:	00f42400 	.word	0x00f42400
 8001a68:	017d7840 	.word	0x017d7840

08001a6c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001a6c:	b480      	push	{r7}
 8001a6e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001a70:	4b03      	ldr	r3, [pc, #12]	@ (8001a80 <HAL_RCC_GetHCLKFreq+0x14>)
 8001a72:	681b      	ldr	r3, [r3, #0]
}
 8001a74:	4618      	mov	r0, r3
 8001a76:	46bd      	mov	sp, r7
 8001a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7c:	4770      	bx	lr
 8001a7e:	bf00      	nop
 8001a80:	20000000 	.word	0x20000000

08001a84 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001a88:	f7ff fff0 	bl	8001a6c <HAL_RCC_GetHCLKFreq>
 8001a8c:	4602      	mov	r2, r0
 8001a8e:	4b05      	ldr	r3, [pc, #20]	@ (8001aa4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001a90:	689b      	ldr	r3, [r3, #8]
 8001a92:	0a9b      	lsrs	r3, r3, #10
 8001a94:	f003 0307 	and.w	r3, r3, #7
 8001a98:	4903      	ldr	r1, [pc, #12]	@ (8001aa8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001a9a:	5ccb      	ldrb	r3, [r1, r3]
 8001a9c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	bd80      	pop	{r7, pc}
 8001aa4:	40023800 	.word	0x40023800
 8001aa8:	080037dc 	.word	0x080037dc

08001aac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001ab0:	f7ff ffdc 	bl	8001a6c <HAL_RCC_GetHCLKFreq>
 8001ab4:	4602      	mov	r2, r0
 8001ab6:	4b05      	ldr	r3, [pc, #20]	@ (8001acc <HAL_RCC_GetPCLK2Freq+0x20>)
 8001ab8:	689b      	ldr	r3, [r3, #8]
 8001aba:	0b5b      	lsrs	r3, r3, #13
 8001abc:	f003 0307 	and.w	r3, r3, #7
 8001ac0:	4903      	ldr	r1, [pc, #12]	@ (8001ad0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001ac2:	5ccb      	ldrb	r3, [r1, r3]
 8001ac4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ac8:	4618      	mov	r0, r3
 8001aca:	bd80      	pop	{r7, pc}
 8001acc:	40023800 	.word	0x40023800
 8001ad0:	080037dc 	.word	0x080037dc

08001ad4 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b086      	sub	sp, #24
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001adc:	2300      	movs	r3, #0
 8001ade:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	f003 0301 	and.w	r3, r3, #1
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d105      	bne.n	8001afc <HAL_RCCEx_PeriphCLKConfig+0x28>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	f003 0304 	and.w	r3, r3, #4
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d035      	beq.n	8001b68 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8001afc:	4b67      	ldr	r3, [pc, #412]	@ (8001c9c <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8001afe:	2200      	movs	r2, #0
 8001b00:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8001b02:	f7ff f8c9 	bl	8000c98 <HAL_GetTick>
 8001b06:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001b08:	e008      	b.n	8001b1c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8001b0a:	f7ff f8c5 	bl	8000c98 <HAL_GetTick>
 8001b0e:	4602      	mov	r2, r0
 8001b10:	697b      	ldr	r3, [r7, #20]
 8001b12:	1ad3      	subs	r3, r2, r3
 8001b14:	2b02      	cmp	r3, #2
 8001b16:	d901      	bls.n	8001b1c <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001b18:	2303      	movs	r3, #3
 8001b1a:	e0ba      	b.n	8001c92 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001b1c:	4b60      	ldr	r3, [pc, #384]	@ (8001ca0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d1f0      	bne.n	8001b0a <HAL_RCCEx_PeriphCLKConfig+0x36>
                                   PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	685b      	ldr	r3, [r3, #4]
 8001b2c:	019a      	lsls	r2, r3, #6
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	689b      	ldr	r3, [r3, #8]
 8001b32:	071b      	lsls	r3, r3, #28
 8001b34:	495a      	ldr	r1, [pc, #360]	@ (8001ca0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8001b36:	4313      	orrs	r3, r2
 8001b38:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8001b3c:	4b57      	ldr	r3, [pc, #348]	@ (8001c9c <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8001b3e:	2201      	movs	r2, #1
 8001b40:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8001b42:	f7ff f8a9 	bl	8000c98 <HAL_GetTick>
 8001b46:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8001b48:	e008      	b.n	8001b5c <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8001b4a:	f7ff f8a5 	bl	8000c98 <HAL_GetTick>
 8001b4e:	4602      	mov	r2, r0
 8001b50:	697b      	ldr	r3, [r7, #20]
 8001b52:	1ad3      	subs	r3, r2, r3
 8001b54:	2b02      	cmp	r3, #2
 8001b56:	d901      	bls.n	8001b5c <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001b58:	2303      	movs	r3, #3
 8001b5a:	e09a      	b.n	8001c92 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8001b5c:	4b50      	ldr	r3, [pc, #320]	@ (8001ca0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d0f0      	beq.n	8001b4a <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	f003 0302 	and.w	r3, r3, #2
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	f000 8083 	beq.w	8001c7c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8001b76:	2300      	movs	r3, #0
 8001b78:	60fb      	str	r3, [r7, #12]
 8001b7a:	4b49      	ldr	r3, [pc, #292]	@ (8001ca0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8001b7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b7e:	4a48      	ldr	r2, [pc, #288]	@ (8001ca0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8001b80:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001b84:	6413      	str	r3, [r2, #64]	@ 0x40
 8001b86:	4b46      	ldr	r3, [pc, #280]	@ (8001ca0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8001b88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b8a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b8e:	60fb      	str	r3, [r7, #12]
 8001b90:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8001b92:	4b44      	ldr	r3, [pc, #272]	@ (8001ca4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	4a43      	ldr	r2, [pc, #268]	@ (8001ca4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001b98:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001b9c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001b9e:	f7ff f87b 	bl	8000c98 <HAL_GetTick>
 8001ba2:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8001ba4:	e008      	b.n	8001bb8 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ba6:	f7ff f877 	bl	8000c98 <HAL_GetTick>
 8001baa:	4602      	mov	r2, r0
 8001bac:	697b      	ldr	r3, [r7, #20]
 8001bae:	1ad3      	subs	r3, r2, r3
 8001bb0:	2b02      	cmp	r3, #2
 8001bb2:	d901      	bls.n	8001bb8 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8001bb4:	2303      	movs	r3, #3
 8001bb6:	e06c      	b.n	8001c92 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8001bb8:	4b3a      	ldr	r3, [pc, #232]	@ (8001ca4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d0f0      	beq.n	8001ba6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001bc4:	4b36      	ldr	r3, [pc, #216]	@ (8001ca0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8001bc6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001bc8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001bcc:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001bce:	693b      	ldr	r3, [r7, #16]
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d02f      	beq.n	8001c34 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	68db      	ldr	r3, [r3, #12]
 8001bd8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001bdc:	693a      	ldr	r2, [r7, #16]
 8001bde:	429a      	cmp	r2, r3
 8001be0:	d028      	beq.n	8001c34 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001be2:	4b2f      	ldr	r3, [pc, #188]	@ (8001ca0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8001be4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001be6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001bea:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001bec:	4b2e      	ldr	r3, [pc, #184]	@ (8001ca8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001bee:	2201      	movs	r2, #1
 8001bf0:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001bf2:	4b2d      	ldr	r3, [pc, #180]	@ (8001ca8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8001bf8:	4a29      	ldr	r2, [pc, #164]	@ (8001ca0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8001bfa:	693b      	ldr	r3, [r7, #16]
 8001bfc:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8001bfe:	4b28      	ldr	r3, [pc, #160]	@ (8001ca0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8001c00:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001c02:	f003 0301 	and.w	r3, r3, #1
 8001c06:	2b01      	cmp	r3, #1
 8001c08:	d114      	bne.n	8001c34 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8001c0a:	f7ff f845 	bl	8000c98 <HAL_GetTick>
 8001c0e:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c10:	e00a      	b.n	8001c28 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c12:	f7ff f841 	bl	8000c98 <HAL_GetTick>
 8001c16:	4602      	mov	r2, r0
 8001c18:	697b      	ldr	r3, [r7, #20]
 8001c1a:	1ad3      	subs	r3, r2, r3
 8001c1c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001c20:	4293      	cmp	r3, r2
 8001c22:	d901      	bls.n	8001c28 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8001c24:	2303      	movs	r3, #3
 8001c26:	e034      	b.n	8001c92 <HAL_RCCEx_PeriphCLKConfig+0x1be>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c28:	4b1d      	ldr	r3, [pc, #116]	@ (8001ca0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8001c2a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001c2c:	f003 0302 	and.w	r3, r3, #2
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d0ee      	beq.n	8001c12 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	68db      	ldr	r3, [r3, #12]
 8001c38:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001c3c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8001c40:	d10d      	bne.n	8001c5e <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8001c42:	4b17      	ldr	r3, [pc, #92]	@ (8001ca0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8001c44:	689b      	ldr	r3, [r3, #8]
 8001c46:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	68db      	ldr	r3, [r3, #12]
 8001c4e:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8001c52:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001c56:	4912      	ldr	r1, [pc, #72]	@ (8001ca0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8001c58:	4313      	orrs	r3, r2
 8001c5a:	608b      	str	r3, [r1, #8]
 8001c5c:	e005      	b.n	8001c6a <HAL_RCCEx_PeriphCLKConfig+0x196>
 8001c5e:	4b10      	ldr	r3, [pc, #64]	@ (8001ca0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8001c60:	689b      	ldr	r3, [r3, #8]
 8001c62:	4a0f      	ldr	r2, [pc, #60]	@ (8001ca0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8001c64:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8001c68:	6093      	str	r3, [r2, #8]
 8001c6a:	4b0d      	ldr	r3, [pc, #52]	@ (8001ca0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8001c6c:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	68db      	ldr	r3, [r3, #12]
 8001c72:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001c76:	490a      	ldr	r1, [pc, #40]	@ (8001ca0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8001c78:	4313      	orrs	r3, r2
 8001c7a:	670b      	str	r3, [r1, #112]	@ 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	f003 0308 	and.w	r3, r3, #8
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d003      	beq.n	8001c90 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	7c1a      	ldrb	r2, [r3, #16]
 8001c8c:	4b07      	ldr	r3, [pc, #28]	@ (8001cac <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8001c8e:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8001c90:	2300      	movs	r3, #0
}
 8001c92:	4618      	mov	r0, r3
 8001c94:	3718      	adds	r7, #24
 8001c96:	46bd      	mov	sp, r7
 8001c98:	bd80      	pop	{r7, pc}
 8001c9a:	bf00      	nop
 8001c9c:	42470068 	.word	0x42470068
 8001ca0:	40023800 	.word	0x40023800
 8001ca4:	40007000 	.word	0x40007000
 8001ca8:	42470e40 	.word	0x42470e40
 8001cac:	424711e0 	.word	0x424711e0

08001cb0 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	b084      	sub	sp, #16
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8001cb8:	2301      	movs	r3, #1
 8001cba:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d101      	bne.n	8001cc6 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8001cc2:	2301      	movs	r3, #1
 8001cc4:	e073      	b.n	8001dae <HAL_RTC_Init+0xfe>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	7f5b      	ldrb	r3, [r3, #29]
 8001cca:	b2db      	uxtb	r3, r3
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d105      	bne.n	8001cdc <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8001cd6:	6878      	ldr	r0, [r7, #4]
 8001cd8:	f7fe fe50 	bl	800097c <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	2202      	movs	r2, #2
 8001ce0:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	68db      	ldr	r3, [r3, #12]
 8001ce8:	f003 0310 	and.w	r3, r3, #16
 8001cec:	2b10      	cmp	r3, #16
 8001cee:	d055      	beq.n	8001d9c <HAL_RTC_Init+0xec>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	22ca      	movs	r2, #202	@ 0xca
 8001cf6:	625a      	str	r2, [r3, #36]	@ 0x24
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	2253      	movs	r2, #83	@ 0x53
 8001cfe:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8001d00:	6878      	ldr	r0, [r7, #4]
 8001d02:	f000 fbd3 	bl	80024ac <RTC_EnterInitMode>
 8001d06:	4603      	mov	r3, r0
 8001d08:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8001d0a:	7bfb      	ldrb	r3, [r7, #15]
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d12c      	bne.n	8001d6a <HAL_RTC_Init+0xba>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	689b      	ldr	r3, [r3, #8]
 8001d16:	687a      	ldr	r2, [r7, #4]
 8001d18:	6812      	ldr	r2, [r2, #0]
 8001d1a:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8001d1e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8001d22:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	6899      	ldr	r1, [r3, #8]
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	685a      	ldr	r2, [r3, #4]
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	691b      	ldr	r3, [r3, #16]
 8001d32:	431a      	orrs	r2, r3
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	695b      	ldr	r3, [r3, #20]
 8001d38:	431a      	orrs	r2, r3
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	430a      	orrs	r2, r1
 8001d40:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	687a      	ldr	r2, [r7, #4]
 8001d48:	68d2      	ldr	r2, [r2, #12]
 8001d4a:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	6919      	ldr	r1, [r3, #16]
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	689b      	ldr	r3, [r3, #8]
 8001d56:	041a      	lsls	r2, r3, #16
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	430a      	orrs	r2, r1
 8001d5e:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8001d60:	6878      	ldr	r0, [r7, #4]
 8001d62:	f000 fbda 	bl	800251a <RTC_ExitInitMode>
 8001d66:	4603      	mov	r3, r0
 8001d68:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8001d6a:	7bfb      	ldrb	r3, [r7, #15]
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d110      	bne.n	8001d92 <HAL_RTC_Init+0xe2>
    {
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8001d7e:	641a      	str	r2, [r3, #64]	@ 0x40
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	699a      	ldr	r2, [r3, #24]
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	430a      	orrs	r2, r1
 8001d90:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	22ff      	movs	r2, #255	@ 0xff
 8001d98:	625a      	str	r2, [r3, #36]	@ 0x24
 8001d9a:	e001      	b.n	8001da0 <HAL_RTC_Init+0xf0>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8001da0:	7bfb      	ldrb	r3, [r7, #15]
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d102      	bne.n	8001dac <HAL_RTC_Init+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	2201      	movs	r2, #1
 8001daa:	775a      	strb	r2, [r3, #29]
  }

  return status;
 8001dac:	7bfb      	ldrb	r3, [r7, #15]
}
 8001dae:	4618      	mov	r0, r3
 8001db0:	3710      	adds	r7, #16
 8001db2:	46bd      	mov	sp, r7
 8001db4:	bd80      	pop	{r7, pc}

08001db6 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8001db6:	b590      	push	{r4, r7, lr}
 8001db8:	b087      	sub	sp, #28
 8001dba:	af00      	add	r7, sp, #0
 8001dbc:	60f8      	str	r0, [r7, #12]
 8001dbe:	60b9      	str	r1, [r7, #8]
 8001dc0:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	7f1b      	ldrb	r3, [r3, #28]
 8001dca:	2b01      	cmp	r3, #1
 8001dcc:	d101      	bne.n	8001dd2 <HAL_RTC_SetTime+0x1c>
 8001dce:	2302      	movs	r3, #2
 8001dd0:	e087      	b.n	8001ee2 <HAL_RTC_SetTime+0x12c>
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	2201      	movs	r2, #1
 8001dd6:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	2202      	movs	r2, #2
 8001ddc:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d126      	bne.n	8001e32 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	689b      	ldr	r3, [r3, #8]
 8001dea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d102      	bne.n	8001df8 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8001df2:	68bb      	ldr	r3, [r7, #8]
 8001df4:	2200      	movs	r2, #0
 8001df6:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8001df8:	68bb      	ldr	r3, [r7, #8]
 8001dfa:	781b      	ldrb	r3, [r3, #0]
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	f000 fbb1 	bl	8002564 <RTC_ByteToBcd2>
 8001e02:	4603      	mov	r3, r0
 8001e04:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8001e06:	68bb      	ldr	r3, [r7, #8]
 8001e08:	785b      	ldrb	r3, [r3, #1]
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	f000 fbaa 	bl	8002564 <RTC_ByteToBcd2>
 8001e10:	4603      	mov	r3, r0
 8001e12:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8001e14:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8001e16:	68bb      	ldr	r3, [r7, #8]
 8001e18:	789b      	ldrb	r3, [r3, #2]
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	f000 fba2 	bl	8002564 <RTC_ByteToBcd2>
 8001e20:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8001e22:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8001e26:	68bb      	ldr	r3, [r7, #8]
 8001e28:	78db      	ldrb	r3, [r3, #3]
 8001e2a:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8001e2c:	4313      	orrs	r3, r2
 8001e2e:	617b      	str	r3, [r7, #20]
 8001e30:	e018      	b.n	8001e64 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	689b      	ldr	r3, [r3, #8]
 8001e38:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d102      	bne.n	8001e46 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8001e40:	68bb      	ldr	r3, [r7, #8]
 8001e42:	2200      	movs	r2, #0
 8001e44:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8001e46:	68bb      	ldr	r3, [r7, #8]
 8001e48:	781b      	ldrb	r3, [r3, #0]
 8001e4a:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8001e4c:	68bb      	ldr	r3, [r7, #8]
 8001e4e:	785b      	ldrb	r3, [r3, #1]
 8001e50:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8001e52:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8001e54:	68ba      	ldr	r2, [r7, #8]
 8001e56:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8001e58:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8001e5a:	68bb      	ldr	r3, [r7, #8]
 8001e5c:	78db      	ldrb	r3, [r3, #3]
 8001e5e:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8001e60:	4313      	orrs	r3, r2
 8001e62:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	22ca      	movs	r2, #202	@ 0xca
 8001e6a:	625a      	str	r2, [r3, #36]	@ 0x24
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	2253      	movs	r2, #83	@ 0x53
 8001e72:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8001e74:	68f8      	ldr	r0, [r7, #12]
 8001e76:	f000 fb19 	bl	80024ac <RTC_EnterInitMode>
 8001e7a:	4603      	mov	r3, r0
 8001e7c:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8001e7e:	7cfb      	ldrb	r3, [r7, #19]
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d120      	bne.n	8001ec6 <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	681a      	ldr	r2, [r3, #0]
 8001e88:	697b      	ldr	r3, [r7, #20]
 8001e8a:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 8001e8e:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8001e92:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	689a      	ldr	r2, [r3, #8]
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8001ea2:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	6899      	ldr	r1, [r3, #8]
 8001eaa:	68bb      	ldr	r3, [r7, #8]
 8001eac:	68da      	ldr	r2, [r3, #12]
 8001eae:	68bb      	ldr	r3, [r7, #8]
 8001eb0:	691b      	ldr	r3, [r3, #16]
 8001eb2:	431a      	orrs	r2, r3
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	430a      	orrs	r2, r1
 8001eba:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8001ebc:	68f8      	ldr	r0, [r7, #12]
 8001ebe:	f000 fb2c 	bl	800251a <RTC_ExitInitMode>
 8001ec2:	4603      	mov	r3, r0
 8001ec4:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8001ec6:	7cfb      	ldrb	r3, [r7, #19]
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d102      	bne.n	8001ed2 <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	2201      	movs	r2, #1
 8001ed0:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	22ff      	movs	r2, #255	@ 0xff
 8001ed8:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	2200      	movs	r2, #0
 8001ede:	771a      	strb	r2, [r3, #28]

  return status;
 8001ee0:	7cfb      	ldrb	r3, [r7, #19]
}
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	371c      	adds	r7, #28
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	bd90      	pop	{r4, r7, pc}

08001eea <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8001eea:	b580      	push	{r7, lr}
 8001eec:	b086      	sub	sp, #24
 8001eee:	af00      	add	r7, sp, #0
 8001ef0:	60f8      	str	r0, [r7, #12]
 8001ef2:	60b9      	str	r1, [r7, #8]
 8001ef4:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001f00:	68bb      	ldr	r3, [r7, #8]
 8001f02:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	691b      	ldr	r3, [r3, #16]
 8001f0a:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8001f0e:	68bb      	ldr	r3, [r7, #8]
 8001f10:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 8001f1c:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8001f20:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8001f22:	697b      	ldr	r3, [r7, #20]
 8001f24:	0c1b      	lsrs	r3, r3, #16
 8001f26:	b2db      	uxtb	r3, r3
 8001f28:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001f2c:	b2da      	uxtb	r2, r3
 8001f2e:	68bb      	ldr	r3, [r7, #8]
 8001f30:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8001f32:	697b      	ldr	r3, [r7, #20]
 8001f34:	0a1b      	lsrs	r3, r3, #8
 8001f36:	b2db      	uxtb	r3, r3
 8001f38:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001f3c:	b2da      	uxtb	r2, r3
 8001f3e:	68bb      	ldr	r3, [r7, #8]
 8001f40:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 8001f42:	697b      	ldr	r3, [r7, #20]
 8001f44:	b2db      	uxtb	r3, r3
 8001f46:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001f4a:	b2da      	uxtb	r2, r3
 8001f4c:	68bb      	ldr	r3, [r7, #8]
 8001f4e:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 8001f50:	697b      	ldr	r3, [r7, #20]
 8001f52:	0d9b      	lsrs	r3, r3, #22
 8001f54:	b2db      	uxtb	r3, r3
 8001f56:	f003 0301 	and.w	r3, r3, #1
 8001f5a:	b2da      	uxtb	r2, r3
 8001f5c:	68bb      	ldr	r3, [r7, #8]
 8001f5e:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d11a      	bne.n	8001f9c <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8001f66:	68bb      	ldr	r3, [r7, #8]
 8001f68:	781b      	ldrb	r3, [r3, #0]
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	f000 fb18 	bl	80025a0 <RTC_Bcd2ToByte>
 8001f70:	4603      	mov	r3, r0
 8001f72:	461a      	mov	r2, r3
 8001f74:	68bb      	ldr	r3, [r7, #8]
 8001f76:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8001f78:	68bb      	ldr	r3, [r7, #8]
 8001f7a:	785b      	ldrb	r3, [r3, #1]
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	f000 fb0f 	bl	80025a0 <RTC_Bcd2ToByte>
 8001f82:	4603      	mov	r3, r0
 8001f84:	461a      	mov	r2, r3
 8001f86:	68bb      	ldr	r3, [r7, #8]
 8001f88:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8001f8a:	68bb      	ldr	r3, [r7, #8]
 8001f8c:	789b      	ldrb	r3, [r3, #2]
 8001f8e:	4618      	mov	r0, r3
 8001f90:	f000 fb06 	bl	80025a0 <RTC_Bcd2ToByte>
 8001f94:	4603      	mov	r3, r0
 8001f96:	461a      	mov	r2, r3
 8001f98:	68bb      	ldr	r3, [r7, #8]
 8001f9a:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8001f9c:	2300      	movs	r3, #0
}
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	3718      	adds	r7, #24
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	bd80      	pop	{r7, pc}

08001fa6 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8001fa6:	b590      	push	{r4, r7, lr}
 8001fa8:	b087      	sub	sp, #28
 8001faa:	af00      	add	r7, sp, #0
 8001fac:	60f8      	str	r0, [r7, #12]
 8001fae:	60b9      	str	r1, [r7, #8]
 8001fb0:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	7f1b      	ldrb	r3, [r3, #28]
 8001fba:	2b01      	cmp	r3, #1
 8001fbc:	d101      	bne.n	8001fc2 <HAL_RTC_SetDate+0x1c>
 8001fbe:	2302      	movs	r3, #2
 8001fc0:	e071      	b.n	80020a6 <HAL_RTC_SetDate+0x100>
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	2201      	movs	r2, #1
 8001fc6:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	2202      	movs	r2, #2
 8001fcc:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d10e      	bne.n	8001ff2 <HAL_RTC_SetDate+0x4c>
 8001fd4:	68bb      	ldr	r3, [r7, #8]
 8001fd6:	785b      	ldrb	r3, [r3, #1]
 8001fd8:	f003 0310 	and.w	r3, r3, #16
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d008      	beq.n	8001ff2 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8001fe0:	68bb      	ldr	r3, [r7, #8]
 8001fe2:	785b      	ldrb	r3, [r3, #1]
 8001fe4:	f023 0310 	bic.w	r3, r3, #16
 8001fe8:	b2db      	uxtb	r3, r3
 8001fea:	330a      	adds	r3, #10
 8001fec:	b2da      	uxtb	r2, r3
 8001fee:	68bb      	ldr	r3, [r7, #8]
 8001ff0:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d11c      	bne.n	8002032 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8001ff8:	68bb      	ldr	r3, [r7, #8]
 8001ffa:	78db      	ldrb	r3, [r3, #3]
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	f000 fab1 	bl	8002564 <RTC_ByteToBcd2>
 8002002:	4603      	mov	r3, r0
 8002004:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8002006:	68bb      	ldr	r3, [r7, #8]
 8002008:	785b      	ldrb	r3, [r3, #1]
 800200a:	4618      	mov	r0, r3
 800200c:	f000 faaa 	bl	8002564 <RTC_ByteToBcd2>
 8002010:	4603      	mov	r3, r0
 8002012:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8002014:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8002016:	68bb      	ldr	r3, [r7, #8]
 8002018:	789b      	ldrb	r3, [r3, #2]
 800201a:	4618      	mov	r0, r3
 800201c:	f000 faa2 	bl	8002564 <RTC_ByteToBcd2>
 8002020:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8002022:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8002026:	68bb      	ldr	r3, [r7, #8]
 8002028:	781b      	ldrb	r3, [r3, #0]
 800202a:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800202c:	4313      	orrs	r3, r2
 800202e:	617b      	str	r3, [r7, #20]
 8002030:	e00e      	b.n	8002050 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8002032:	68bb      	ldr	r3, [r7, #8]
 8002034:	78db      	ldrb	r3, [r3, #3]
 8002036:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8002038:	68bb      	ldr	r3, [r7, #8]
 800203a:	785b      	ldrb	r3, [r3, #1]
 800203c:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800203e:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8002040:	68ba      	ldr	r2, [r7, #8]
 8002042:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8002044:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8002046:	68bb      	ldr	r3, [r7, #8]
 8002048:	781b      	ldrb	r3, [r3, #0]
 800204a:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800204c:	4313      	orrs	r3, r2
 800204e:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	22ca      	movs	r2, #202	@ 0xca
 8002056:	625a      	str	r2, [r3, #36]	@ 0x24
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	2253      	movs	r2, #83	@ 0x53
 800205e:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8002060:	68f8      	ldr	r0, [r7, #12]
 8002062:	f000 fa23 	bl	80024ac <RTC_EnterInitMode>
 8002066:	4603      	mov	r3, r0
 8002068:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 800206a:	7cfb      	ldrb	r3, [r7, #19]
 800206c:	2b00      	cmp	r3, #0
 800206e:	d10c      	bne.n	800208a <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	681a      	ldr	r2, [r3, #0]
 8002074:	697b      	ldr	r3, [r7, #20]
 8002076:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800207a:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800207e:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8002080:	68f8      	ldr	r0, [r7, #12]
 8002082:	f000 fa4a 	bl	800251a <RTC_ExitInitMode>
 8002086:	4603      	mov	r3, r0
 8002088:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 800208a:	7cfb      	ldrb	r3, [r7, #19]
 800208c:	2b00      	cmp	r3, #0
 800208e:	d102      	bne.n	8002096 <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	2201      	movs	r2, #1
 8002094:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	22ff      	movs	r2, #255	@ 0xff
 800209c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	2200      	movs	r2, #0
 80020a2:	771a      	strb	r2, [r3, #28]

  return status;
 80020a4:	7cfb      	ldrb	r3, [r7, #19]
}
 80020a6:	4618      	mov	r0, r3
 80020a8:	371c      	adds	r7, #28
 80020aa:	46bd      	mov	sp, r7
 80020ac:	bd90      	pop	{r4, r7, pc}

080020ae <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80020ae:	b580      	push	{r7, lr}
 80020b0:	b086      	sub	sp, #24
 80020b2:	af00      	add	r7, sp, #0
 80020b4:	60f8      	str	r0, [r7, #12]
 80020b6:	60b9      	str	r1, [r7, #8]
 80020b8:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80020ba:	2300      	movs	r3, #0
 80020bc:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	685b      	ldr	r3, [r3, #4]
 80020c4:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80020c8:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80020cc:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 80020ce:	697b      	ldr	r3, [r7, #20]
 80020d0:	0c1b      	lsrs	r3, r3, #16
 80020d2:	b2da      	uxtb	r2, r3
 80020d4:	68bb      	ldr	r3, [r7, #8]
 80020d6:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 80020d8:	697b      	ldr	r3, [r7, #20]
 80020da:	0a1b      	lsrs	r3, r3, #8
 80020dc:	b2db      	uxtb	r3, r3
 80020de:	f003 031f 	and.w	r3, r3, #31
 80020e2:	b2da      	uxtb	r2, r3
 80020e4:	68bb      	ldr	r3, [r7, #8]
 80020e6:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 80020e8:	697b      	ldr	r3, [r7, #20]
 80020ea:	b2db      	uxtb	r3, r3
 80020ec:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80020f0:	b2da      	uxtb	r2, r3
 80020f2:	68bb      	ldr	r3, [r7, #8]
 80020f4:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 80020f6:	697b      	ldr	r3, [r7, #20]
 80020f8:	0b5b      	lsrs	r3, r3, #13
 80020fa:	b2db      	uxtb	r3, r3
 80020fc:	f003 0307 	and.w	r3, r3, #7
 8002100:	b2da      	uxtb	r2, r3
 8002102:	68bb      	ldr	r3, [r7, #8]
 8002104:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	2b00      	cmp	r3, #0
 800210a:	d11a      	bne.n	8002142 <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800210c:	68bb      	ldr	r3, [r7, #8]
 800210e:	78db      	ldrb	r3, [r3, #3]
 8002110:	4618      	mov	r0, r3
 8002112:	f000 fa45 	bl	80025a0 <RTC_Bcd2ToByte>
 8002116:	4603      	mov	r3, r0
 8002118:	461a      	mov	r2, r3
 800211a:	68bb      	ldr	r3, [r7, #8]
 800211c:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800211e:	68bb      	ldr	r3, [r7, #8]
 8002120:	785b      	ldrb	r3, [r3, #1]
 8002122:	4618      	mov	r0, r3
 8002124:	f000 fa3c 	bl	80025a0 <RTC_Bcd2ToByte>
 8002128:	4603      	mov	r3, r0
 800212a:	461a      	mov	r2, r3
 800212c:	68bb      	ldr	r3, [r7, #8]
 800212e:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8002130:	68bb      	ldr	r3, [r7, #8]
 8002132:	789b      	ldrb	r3, [r3, #2]
 8002134:	4618      	mov	r0, r3
 8002136:	f000 fa33 	bl	80025a0 <RTC_Bcd2ToByte>
 800213a:	4603      	mov	r3, r0
 800213c:	461a      	mov	r2, r3
 800213e:	68bb      	ldr	r3, [r7, #8]
 8002140:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8002142:	2300      	movs	r3, #0
}
 8002144:	4618      	mov	r0, r3
 8002146:	3718      	adds	r7, #24
 8002148:	46bd      	mov	sp, r7
 800214a:	bd80      	pop	{r7, pc}

0800214c <HAL_RTC_SetAlarm_IT>:
  *         is disabled (Use the HAL_RTC_DeactivateAlarm()).
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 800214c:	b590      	push	{r4, r7, lr}
 800214e:	b089      	sub	sp, #36	@ 0x24
 8002150:	af00      	add	r7, sp, #0
 8002152:	60f8      	str	r0, [r7, #12]
 8002154:	60b9      	str	r1, [r7, #8]
 8002156:	607a      	str	r2, [r7, #4]
  __IO uint32_t count  = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 8002158:	4b9b      	ldr	r3, [pc, #620]	@ (80023c8 <HAL_RTC_SetAlarm_IT+0x27c>)
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	4a9b      	ldr	r2, [pc, #620]	@ (80023cc <HAL_RTC_SetAlarm_IT+0x280>)
 800215e:	fba2 2303 	umull	r2, r3, r2, r3
 8002162:	0adb      	lsrs	r3, r3, #11
 8002164:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002168:	fb02 f303 	mul.w	r3, r2, r3
 800216c:	617b      	str	r3, [r7, #20]
       uint32_t tmpreg = 0U;
 800216e:	2300      	movs	r3, #0
 8002170:	61fb      	str	r3, [r7, #28]
       uint32_t subsecondtmpreg = 0U;
 8002172:	2300      	movs	r3, #0
 8002174:	61bb      	str	r3, [r7, #24]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	7f1b      	ldrb	r3, [r3, #28]
 800217a:	2b01      	cmp	r3, #1
 800217c:	d101      	bne.n	8002182 <HAL_RTC_SetAlarm_IT+0x36>
 800217e:	2302      	movs	r3, #2
 8002180:	e11e      	b.n	80023c0 <HAL_RTC_SetAlarm_IT+0x274>
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	2201      	movs	r2, #1
 8002186:	771a      	strb	r2, [r3, #28]

  /* Change RTC state to BUSY */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	2202      	movs	r2, #2
 800218c:	775a      	strb	r2, [r3, #29]

  /* Check the data format (binary or BCD) and store the Alarm time and date
     configuration accordingly */
  if (Format == RTC_FORMAT_BIN)
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	2b00      	cmp	r3, #0
 8002192:	d137      	bne.n	8002204 <HAL_RTC_SetAlarm_IT+0xb8>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	689b      	ldr	r3, [r3, #8]
 800219a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d102      	bne.n	80021a8 <HAL_RTC_SetAlarm_IT+0x5c>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 80021a2:	68bb      	ldr	r3, [r7, #8]
 80021a4:	2200      	movs	r2, #0
 80021a6:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 80021a8:	68bb      	ldr	r3, [r7, #8]
 80021aa:	781b      	ldrb	r3, [r3, #0]
 80021ac:	4618      	mov	r0, r3
 80021ae:	f000 f9d9 	bl	8002564 <RTC_ByteToBcd2>
 80021b2:	4603      	mov	r3, r0
 80021b4:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80021b6:	68bb      	ldr	r3, [r7, #8]
 80021b8:	785b      	ldrb	r3, [r3, #1]
 80021ba:	4618      	mov	r0, r3
 80021bc:	f000 f9d2 	bl	8002564 <RTC_ByteToBcd2>
 80021c0:	4603      	mov	r3, r0
 80021c2:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 80021c4:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 80021c6:	68bb      	ldr	r3, [r7, #8]
 80021c8:	789b      	ldrb	r3, [r3, #2]
 80021ca:	4618      	mov	r0, r3
 80021cc:	f000 f9ca 	bl	8002564 <RTC_ByteToBcd2>
 80021d0:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80021d2:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_TR_PM_Pos)      | \
 80021d6:	68bb      	ldr	r3, [r7, #8]
 80021d8:	78db      	ldrb	r3, [r3, #3]
 80021da:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 80021dc:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 80021e0:	68bb      	ldr	r3, [r7, #8]
 80021e2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80021e6:	4618      	mov	r0, r3
 80021e8:	f000 f9bc 	bl	8002564 <RTC_ByteToBcd2>
 80021ec:	4603      	mov	r3, r0
 80021ee:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_TR_PM_Pos)      | \
 80021f0:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel)                                     | \
 80021f4:	68bb      	ldr	r3, [r7, #8]
 80021f6:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 80021f8:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 80021fa:	68bb      	ldr	r3, [r7, #8]
 80021fc:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 80021fe:	4313      	orrs	r3, r2
 8002200:	61fb      	str	r3, [r7, #28]
 8002202:	e023      	b.n	800224c <HAL_RTC_SetAlarm_IT+0x100>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	689b      	ldr	r3, [r3, #8]
 800220a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800220e:	2b00      	cmp	r3, #0
 8002210:	d102      	bne.n	8002218 <HAL_RTC_SetAlarm_IT+0xcc>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8002212:	68bb      	ldr	r3, [r7, #8]
 8002214:	2200      	movs	r2, #0
 8002216:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8002218:	68bb      	ldr	r3, [r7, #8]
 800221a:	781b      	ldrb	r3, [r3, #0]
 800221c:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 800221e:	68bb      	ldr	r3, [r7, #8]
 8002220:	785b      	ldrb	r3, [r3, #1]
 8002222:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8002224:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 8002226:	68ba      	ldr	r2, [r7, #8]
 8002228:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 800222a:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_TR_PM_Pos)      | \
 800222c:	68bb      	ldr	r3, [r7, #8]
 800222e:	78db      	ldrb	r3, [r3, #3]
 8002230:	059b      	lsls	r3, r3, #22
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 8002232:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 8002234:	68bb      	ldr	r3, [r7, #8]
 8002236:	f893 3020 	ldrb.w	r3, [r3, #32]
 800223a:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_TR_PM_Pos)      | \
 800223c:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmDateWeekDaySel)                         | \
 800223e:	68bb      	ldr	r3, [r7, #8]
 8002240:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 8002242:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmMask));
 8002244:	68bb      	ldr	r3, [r7, #8]
 8002246:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8002248:	4313      	orrs	r3, r2
 800224a:	61fb      	str	r3, [r7, #28]
  }

  /* Store the Alarm subseconds configuration */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 800224c:	68bb      	ldr	r3, [r7, #8]
 800224e:	685a      	ldr	r2, [r3, #4]
                               (uint32_t)(sAlarm->AlarmSubSecondMask));
 8002250:	68bb      	ldr	r3, [r7, #8]
 8002252:	699b      	ldr	r3, [r3, #24]
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 8002254:	4313      	orrs	r3, r2
 8002256:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	22ca      	movs	r2, #202	@ 0xca
 800225e:	625a      	str	r2, [r3, #36]	@ 0x24
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	2253      	movs	r2, #83	@ 0x53
 8002266:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 8002268:	68bb      	ldr	r3, [r7, #8]
 800226a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800226c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002270:	d142      	bne.n	80022f8 <HAL_RTC_SetAlarm_IT+0x1ac>
  {
    /* Disable the Alarm A */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	689a      	ldr	r2, [r3, #8]
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002280:	609a      	str	r2, [r3, #8]

    /* Clear the Alarm flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	68db      	ldr	r3, [r3, #12]
 8002288:	b2da      	uxtb	r2, r3
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f462 72c0 	orn	r2, r2, #384	@ 0x180
 8002292:	60da      	str	r2, [r3, #12]

    /* Wait till RTC ALRAWF flag is set and if timeout is reached exit */
    do
    {
      count = count - 1U;
 8002294:	697b      	ldr	r3, [r7, #20]
 8002296:	3b01      	subs	r3, #1
 8002298:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 800229a:	697b      	ldr	r3, [r7, #20]
 800229c:	2b00      	cmp	r3, #0
 800229e:	d10b      	bne.n	80022b8 <HAL_RTC_SetAlarm_IT+0x16c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	22ff      	movs	r2, #255	@ 0xff
 80022a6:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	2203      	movs	r2, #3
 80022ac:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	2200      	movs	r2, #0
 80022b2:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 80022b4:	2303      	movs	r3, #3
 80022b6:	e083      	b.n	80023c0 <HAL_RTC_SetAlarm_IT+0x274>
      }
    } while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U);
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	68db      	ldr	r3, [r3, #12]
 80022be:	f003 0301 	and.w	r3, r3, #1
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d0e6      	beq.n	8002294 <HAL_RTC_SetAlarm_IT+0x148>

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	69fa      	ldr	r2, [r7, #28]
 80022cc:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Subseconds register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	69ba      	ldr	r2, [r7, #24]
 80022d4:	645a      	str	r2, [r3, #68]	@ 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	689a      	ldr	r2, [r3, #8]
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80022e4:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	689a      	ldr	r2, [r3, #8]
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80022f4:	609a      	str	r2, [r3, #8]
 80022f6:	e04c      	b.n	8002392 <HAL_RTC_SetAlarm_IT+0x246>
  }
  else
  {
    /* Disable the Alarm B */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	689a      	ldr	r2, [r3, #8]
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002306:	609a      	str	r2, [r3, #8]

    /* Clear the Alarm flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	68db      	ldr	r3, [r3, #12]
 800230e:	b2da      	uxtb	r2, r3
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f462 7220 	orn	r2, r2, #640	@ 0x280
 8002318:	60da      	str	r2, [r3, #12]

    /* Reload the counter */
    count = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 800231a:	4b2b      	ldr	r3, [pc, #172]	@ (80023c8 <HAL_RTC_SetAlarm_IT+0x27c>)
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	4a2b      	ldr	r2, [pc, #172]	@ (80023cc <HAL_RTC_SetAlarm_IT+0x280>)
 8002320:	fba2 2303 	umull	r2, r3, r2, r3
 8002324:	0adb      	lsrs	r3, r3, #11
 8002326:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800232a:	fb02 f303 	mul.w	r3, r2, r3
 800232e:	617b      	str	r3, [r7, #20]

    /* Wait till RTC ALRBWF flag is set and if timeout is reached exit */
    do
    {
      count = count - 1U;
 8002330:	697b      	ldr	r3, [r7, #20]
 8002332:	3b01      	subs	r3, #1
 8002334:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 8002336:	697b      	ldr	r3, [r7, #20]
 8002338:	2b00      	cmp	r3, #0
 800233a:	d10b      	bne.n	8002354 <HAL_RTC_SetAlarm_IT+0x208>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	22ff      	movs	r2, #255	@ 0xff
 8002342:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	2203      	movs	r2, #3
 8002348:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	2200      	movs	r2, #0
 800234e:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8002350:	2303      	movs	r3, #3
 8002352:	e035      	b.n	80023c0 <HAL_RTC_SetAlarm_IT+0x274>
      }
    } while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U);
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	68db      	ldr	r3, [r3, #12]
 800235a:	f003 0302 	and.w	r3, r3, #2
 800235e:	2b00      	cmp	r3, #0
 8002360:	d0e6      	beq.n	8002330 <HAL_RTC_SetAlarm_IT+0x1e4>

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	69fa      	ldr	r2, [r7, #28]
 8002368:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Subseconds register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	69ba      	ldr	r2, [r7, #24]
 8002370:	649a      	str	r2, [r3, #72]	@ 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	689a      	ldr	r2, [r3, #8]
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002380:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	689a      	ldr	r2, [r3, #8]
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002390:	609a      	str	r2, [r3, #8]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8002392:	4b0f      	ldr	r3, [pc, #60]	@ (80023d0 <HAL_RTC_SetAlarm_IT+0x284>)
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	4a0e      	ldr	r2, [pc, #56]	@ (80023d0 <HAL_RTC_SetAlarm_IT+0x284>)
 8002398:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800239c:	6013      	str	r3, [r2, #0]
  __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 800239e:	4b0c      	ldr	r3, [pc, #48]	@ (80023d0 <HAL_RTC_SetAlarm_IT+0x284>)
 80023a0:	689b      	ldr	r3, [r3, #8]
 80023a2:	4a0b      	ldr	r2, [pc, #44]	@ (80023d0 <HAL_RTC_SetAlarm_IT+0x284>)
 80023a4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80023a8:	6093      	str	r3, [r2, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	22ff      	movs	r2, #255	@ 0xff
 80023b0:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Change RTC state back to READY */
  hrtc->State = HAL_RTC_STATE_READY;
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	2201      	movs	r2, #1
 80023b6:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	2200      	movs	r2, #0
 80023bc:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 80023be:	2300      	movs	r3, #0
}
 80023c0:	4618      	mov	r0, r3
 80023c2:	3724      	adds	r7, #36	@ 0x24
 80023c4:	46bd      	mov	sp, r7
 80023c6:	bd90      	pop	{r4, r7, pc}
 80023c8:	20000000 	.word	0x20000000
 80023cc:	10624dd3 	.word	0x10624dd3
 80023d0:	40013c00 	.word	0x40013c00

080023d4 <HAL_RTC_AlarmIRQHandler>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 80023d4:	b580      	push	{r7, lr}
 80023d6:	b082      	sub	sp, #8
 80023d8:	af00      	add	r7, sp, #0
 80023da:	6078      	str	r0, [r7, #4]
  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 80023dc:	4b1f      	ldr	r3, [pc, #124]	@ (800245c <HAL_RTC_AlarmIRQHandler+0x88>)
 80023de:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80023e2:	615a      	str	r2, [r3, #20]

  /* Get the Alarm A interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	689b      	ldr	r3, [r3, #8]
 80023ea:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d012      	beq.n	8002418 <HAL_RTC_AlarmIRQHandler+0x44>
  {
    /* Get the pending status of the Alarm A Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	68db      	ldr	r3, [r3, #12]
 80023f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d00b      	beq.n	8002418 <HAL_RTC_AlarmIRQHandler+0x44>
    {
      /* Clear the Alarm A interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	68db      	ldr	r3, [r3, #12]
 8002406:	b2da      	uxtb	r2, r3
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	f462 72c0 	orn	r2, r2, #384	@ 0x180
 8002410:	60da      	str	r2, [r3, #12]

      /* Alarm A callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
#else
      HAL_RTC_AlarmAEventCallback(hrtc);
 8002412:	6878      	ldr	r0, [r7, #4]
 8002414:	f7fe fa5e 	bl	80008d4 <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Get the Alarm B interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	689b      	ldr	r3, [r3, #8]
 800241e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002422:	2b00      	cmp	r3, #0
 8002424:	d012      	beq.n	800244c <HAL_RTC_AlarmIRQHandler+0x78>
  {
    /* Get the pending status of the Alarm B Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	68db      	ldr	r3, [r3, #12]
 800242c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002430:	2b00      	cmp	r3, #0
 8002432:	d00b      	beq.n	800244c <HAL_RTC_AlarmIRQHandler+0x78>
    {
      /* Clear the Alarm B interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	68db      	ldr	r3, [r3, #12]
 800243a:	b2da      	uxtb	r2, r3
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	f462 7220 	orn	r2, r2, #640	@ 0x280
 8002444:	60da      	str	r2, [r3, #12]

      /* Alarm B callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmBEventCallback(hrtc);
#else
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 8002446:	6878      	ldr	r0, [r7, #4]
 8002448:	f000 f8c8 	bl	80025dc <HAL_RTCEx_AlarmBEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	2201      	movs	r2, #1
 8002450:	775a      	strb	r2, [r3, #29]
}
 8002452:	bf00      	nop
 8002454:	3708      	adds	r7, #8
 8002456:	46bd      	mov	sp, r7
 8002458:	bd80      	pop	{r7, pc}
 800245a:	bf00      	nop
 800245c:	40013c00 	.word	0x40013c00

08002460 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8002460:	b580      	push	{r7, lr}
 8002462:	b084      	sub	sp, #16
 8002464:	af00      	add	r7, sp, #0
 8002466:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002468:	2300      	movs	r3, #0
 800246a:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	4a0d      	ldr	r2, [pc, #52]	@ (80024a8 <HAL_RTC_WaitForSynchro+0x48>)
 8002472:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002474:	f7fe fc10 	bl	8000c98 <HAL_GetTick>
 8002478:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800247a:	e009      	b.n	8002490 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800247c:	f7fe fc0c 	bl	8000c98 <HAL_GetTick>
 8002480:	4602      	mov	r2, r0
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	1ad3      	subs	r3, r2, r3
 8002486:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800248a:	d901      	bls.n	8002490 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 800248c:	2303      	movs	r3, #3
 800248e:	e007      	b.n	80024a0 <HAL_RTC_WaitForSynchro+0x40>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	68db      	ldr	r3, [r3, #12]
 8002496:	f003 0320 	and.w	r3, r3, #32
 800249a:	2b00      	cmp	r3, #0
 800249c:	d0ee      	beq.n	800247c <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 800249e:	2300      	movs	r3, #0
}
 80024a0:	4618      	mov	r0, r3
 80024a2:	3710      	adds	r7, #16
 80024a4:	46bd      	mov	sp, r7
 80024a6:	bd80      	pop	{r7, pc}
 80024a8:	00013f5f 	.word	0x00013f5f

080024ac <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80024ac:	b580      	push	{r7, lr}
 80024ae:	b084      	sub	sp, #16
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80024b4:	2300      	movs	r3, #0
 80024b6:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80024b8:	2300      	movs	r3, #0
 80024ba:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	68db      	ldr	r3, [r3, #12]
 80024c2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d122      	bne.n	8002510 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	68da      	ldr	r2, [r3, #12]
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80024d8:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80024da:	f7fe fbdd 	bl	8000c98 <HAL_GetTick>
 80024de:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80024e0:	e00c      	b.n	80024fc <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80024e2:	f7fe fbd9 	bl	8000c98 <HAL_GetTick>
 80024e6:	4602      	mov	r2, r0
 80024e8:	68bb      	ldr	r3, [r7, #8]
 80024ea:	1ad3      	subs	r3, r2, r3
 80024ec:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80024f0:	d904      	bls.n	80024fc <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	2204      	movs	r2, #4
 80024f6:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 80024f8:	2301      	movs	r3, #1
 80024fa:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	68db      	ldr	r3, [r3, #12]
 8002502:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002506:	2b00      	cmp	r3, #0
 8002508:	d102      	bne.n	8002510 <RTC_EnterInitMode+0x64>
 800250a:	7bfb      	ldrb	r3, [r7, #15]
 800250c:	2b01      	cmp	r3, #1
 800250e:	d1e8      	bne.n	80024e2 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8002510:	7bfb      	ldrb	r3, [r7, #15]
}
 8002512:	4618      	mov	r0, r3
 8002514:	3710      	adds	r7, #16
 8002516:	46bd      	mov	sp, r7
 8002518:	bd80      	pop	{r7, pc}

0800251a <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800251a:	b580      	push	{r7, lr}
 800251c:	b084      	sub	sp, #16
 800251e:	af00      	add	r7, sp, #0
 8002520:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002522:	2300      	movs	r3, #0
 8002524:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	68da      	ldr	r2, [r3, #12]
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002534:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	689b      	ldr	r3, [r3, #8]
 800253c:	f003 0320 	and.w	r3, r3, #32
 8002540:	2b00      	cmp	r3, #0
 8002542:	d10a      	bne.n	800255a <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002544:	6878      	ldr	r0, [r7, #4]
 8002546:	f7ff ff8b 	bl	8002460 <HAL_RTC_WaitForSynchro>
 800254a:	4603      	mov	r3, r0
 800254c:	2b00      	cmp	r3, #0
 800254e:	d004      	beq.n	800255a <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	2204      	movs	r2, #4
 8002554:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8002556:	2301      	movs	r3, #1
 8002558:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 800255a:	7bfb      	ldrb	r3, [r7, #15]
}
 800255c:	4618      	mov	r0, r3
 800255e:	3710      	adds	r7, #16
 8002560:	46bd      	mov	sp, r7
 8002562:	bd80      	pop	{r7, pc}

08002564 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8002564:	b480      	push	{r7}
 8002566:	b085      	sub	sp, #20
 8002568:	af00      	add	r7, sp, #0
 800256a:	4603      	mov	r3, r0
 800256c:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800256e:	2300      	movs	r3, #0
 8002570:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 8002572:	e005      	b.n	8002580 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	3301      	adds	r3, #1
 8002578:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 800257a:	79fb      	ldrb	r3, [r7, #7]
 800257c:	3b0a      	subs	r3, #10
 800257e:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 8002580:	79fb      	ldrb	r3, [r7, #7]
 8002582:	2b09      	cmp	r3, #9
 8002584:	d8f6      	bhi.n	8002574 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	b2db      	uxtb	r3, r3
 800258a:	011b      	lsls	r3, r3, #4
 800258c:	b2da      	uxtb	r2, r3
 800258e:	79fb      	ldrb	r3, [r7, #7]
 8002590:	4313      	orrs	r3, r2
 8002592:	b2db      	uxtb	r3, r3
}
 8002594:	4618      	mov	r0, r3
 8002596:	3714      	adds	r7, #20
 8002598:	46bd      	mov	sp, r7
 800259a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800259e:	4770      	bx	lr

080025a0 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 80025a0:	b480      	push	{r7}
 80025a2:	b085      	sub	sp, #20
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	4603      	mov	r3, r0
 80025a8:	71fb      	strb	r3, [r7, #7]
  uint32_t tens = 0U;
 80025aa:	2300      	movs	r3, #0
 80025ac:	60fb      	str	r3, [r7, #12]
  tens = (((uint32_t)number & 0xF0U) >> 4U) * 10U;
 80025ae:	79fb      	ldrb	r3, [r7, #7]
 80025b0:	091b      	lsrs	r3, r3, #4
 80025b2:	b2db      	uxtb	r3, r3
 80025b4:	461a      	mov	r2, r3
 80025b6:	4613      	mov	r3, r2
 80025b8:	009b      	lsls	r3, r3, #2
 80025ba:	4413      	add	r3, r2
 80025bc:	005b      	lsls	r3, r3, #1
 80025be:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tens + ((uint32_t)number & 0x0FU));
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	b2da      	uxtb	r2, r3
 80025c4:	79fb      	ldrb	r3, [r7, #7]
 80025c6:	f003 030f 	and.w	r3, r3, #15
 80025ca:	b2db      	uxtb	r3, r3
 80025cc:	4413      	add	r3, r2
 80025ce:	b2db      	uxtb	r3, r3
}
 80025d0:	4618      	mov	r0, r3
 80025d2:	3714      	adds	r7, #20
 80025d4:	46bd      	mov	sp, r7
 80025d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025da:	4770      	bx	lr

080025dc <HAL_RTCEx_AlarmBEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 80025dc:	b480      	push	{r7}
 80025de:	b083      	sub	sp, #12
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 80025e4:	bf00      	nop
 80025e6:	370c      	adds	r7, #12
 80025e8:	46bd      	mov	sp, r7
 80025ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ee:	4770      	bx	lr

080025f0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80025f0:	b580      	push	{r7, lr}
 80025f2:	b082      	sub	sp, #8
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d101      	bne.n	8002602 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80025fe:	2301      	movs	r3, #1
 8002600:	e042      	b.n	8002688 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002608:	b2db      	uxtb	r3, r3
 800260a:	2b00      	cmp	r3, #0
 800260c:	d106      	bne.n	800261c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	2200      	movs	r2, #0
 8002612:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002616:	6878      	ldr	r0, [r7, #4]
 8002618:	f7fe f9e4 	bl	80009e4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	2224      	movs	r2, #36	@ 0x24
 8002620:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	68da      	ldr	r2, [r3, #12]
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002632:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002634:	6878      	ldr	r0, [r7, #4]
 8002636:	f000 f973 	bl	8002920 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	691a      	ldr	r2, [r3, #16]
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002648:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	695a      	ldr	r2, [r3, #20]
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002658:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	68da      	ldr	r2, [r3, #12]
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002668:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	2200      	movs	r2, #0
 800266e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	2220      	movs	r2, #32
 8002674:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	2220      	movs	r2, #32
 800267c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	2200      	movs	r2, #0
 8002684:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002686:	2300      	movs	r3, #0
}
 8002688:	4618      	mov	r0, r3
 800268a:	3708      	adds	r7, #8
 800268c:	46bd      	mov	sp, r7
 800268e:	bd80      	pop	{r7, pc}

08002690 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002690:	b580      	push	{r7, lr}
 8002692:	b08a      	sub	sp, #40	@ 0x28
 8002694:	af02      	add	r7, sp, #8
 8002696:	60f8      	str	r0, [r7, #12]
 8002698:	60b9      	str	r1, [r7, #8]
 800269a:	603b      	str	r3, [r7, #0]
 800269c:	4613      	mov	r3, r2
 800269e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80026a0:	2300      	movs	r3, #0
 80026a2:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80026aa:	b2db      	uxtb	r3, r3
 80026ac:	2b20      	cmp	r3, #32
 80026ae:	d175      	bne.n	800279c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80026b0:	68bb      	ldr	r3, [r7, #8]
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d002      	beq.n	80026bc <HAL_UART_Transmit+0x2c>
 80026b6:	88fb      	ldrh	r3, [r7, #6]
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d101      	bne.n	80026c0 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80026bc:	2301      	movs	r3, #1
 80026be:	e06e      	b.n	800279e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	2200      	movs	r2, #0
 80026c4:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	2221      	movs	r2, #33	@ 0x21
 80026ca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80026ce:	f7fe fae3 	bl	8000c98 <HAL_GetTick>
 80026d2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	88fa      	ldrh	r2, [r7, #6]
 80026d8:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	88fa      	ldrh	r2, [r7, #6]
 80026de:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	689b      	ldr	r3, [r3, #8]
 80026e4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80026e8:	d108      	bne.n	80026fc <HAL_UART_Transmit+0x6c>
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	691b      	ldr	r3, [r3, #16]
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d104      	bne.n	80026fc <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80026f2:	2300      	movs	r3, #0
 80026f4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80026f6:	68bb      	ldr	r3, [r7, #8]
 80026f8:	61bb      	str	r3, [r7, #24]
 80026fa:	e003      	b.n	8002704 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80026fc:	68bb      	ldr	r3, [r7, #8]
 80026fe:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002700:	2300      	movs	r3, #0
 8002702:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002704:	e02e      	b.n	8002764 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002706:	683b      	ldr	r3, [r7, #0]
 8002708:	9300      	str	r3, [sp, #0]
 800270a:	697b      	ldr	r3, [r7, #20]
 800270c:	2200      	movs	r2, #0
 800270e:	2180      	movs	r1, #128	@ 0x80
 8002710:	68f8      	ldr	r0, [r7, #12]
 8002712:	f000 f848 	bl	80027a6 <UART_WaitOnFlagUntilTimeout>
 8002716:	4603      	mov	r3, r0
 8002718:	2b00      	cmp	r3, #0
 800271a:	d005      	beq.n	8002728 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	2220      	movs	r2, #32
 8002720:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8002724:	2303      	movs	r3, #3
 8002726:	e03a      	b.n	800279e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8002728:	69fb      	ldr	r3, [r7, #28]
 800272a:	2b00      	cmp	r3, #0
 800272c:	d10b      	bne.n	8002746 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800272e:	69bb      	ldr	r3, [r7, #24]
 8002730:	881b      	ldrh	r3, [r3, #0]
 8002732:	461a      	mov	r2, r3
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800273c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800273e:	69bb      	ldr	r3, [r7, #24]
 8002740:	3302      	adds	r3, #2
 8002742:	61bb      	str	r3, [r7, #24]
 8002744:	e007      	b.n	8002756 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002746:	69fb      	ldr	r3, [r7, #28]
 8002748:	781a      	ldrb	r2, [r3, #0]
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002750:	69fb      	ldr	r3, [r7, #28]
 8002752:	3301      	adds	r3, #1
 8002754:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800275a:	b29b      	uxth	r3, r3
 800275c:	3b01      	subs	r3, #1
 800275e:	b29a      	uxth	r2, r3
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002768:	b29b      	uxth	r3, r3
 800276a:	2b00      	cmp	r3, #0
 800276c:	d1cb      	bne.n	8002706 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800276e:	683b      	ldr	r3, [r7, #0]
 8002770:	9300      	str	r3, [sp, #0]
 8002772:	697b      	ldr	r3, [r7, #20]
 8002774:	2200      	movs	r2, #0
 8002776:	2140      	movs	r1, #64	@ 0x40
 8002778:	68f8      	ldr	r0, [r7, #12]
 800277a:	f000 f814 	bl	80027a6 <UART_WaitOnFlagUntilTimeout>
 800277e:	4603      	mov	r3, r0
 8002780:	2b00      	cmp	r3, #0
 8002782:	d005      	beq.n	8002790 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	2220      	movs	r2, #32
 8002788:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 800278c:	2303      	movs	r3, #3
 800278e:	e006      	b.n	800279e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	2220      	movs	r2, #32
 8002794:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8002798:	2300      	movs	r3, #0
 800279a:	e000      	b.n	800279e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800279c:	2302      	movs	r3, #2
  }
}
 800279e:	4618      	mov	r0, r3
 80027a0:	3720      	adds	r7, #32
 80027a2:	46bd      	mov	sp, r7
 80027a4:	bd80      	pop	{r7, pc}

080027a6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80027a6:	b580      	push	{r7, lr}
 80027a8:	b086      	sub	sp, #24
 80027aa:	af00      	add	r7, sp, #0
 80027ac:	60f8      	str	r0, [r7, #12]
 80027ae:	60b9      	str	r1, [r7, #8]
 80027b0:	603b      	str	r3, [r7, #0]
 80027b2:	4613      	mov	r3, r2
 80027b4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80027b6:	e03b      	b.n	8002830 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80027b8:	6a3b      	ldr	r3, [r7, #32]
 80027ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027be:	d037      	beq.n	8002830 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80027c0:	f7fe fa6a 	bl	8000c98 <HAL_GetTick>
 80027c4:	4602      	mov	r2, r0
 80027c6:	683b      	ldr	r3, [r7, #0]
 80027c8:	1ad3      	subs	r3, r2, r3
 80027ca:	6a3a      	ldr	r2, [r7, #32]
 80027cc:	429a      	cmp	r2, r3
 80027ce:	d302      	bcc.n	80027d6 <UART_WaitOnFlagUntilTimeout+0x30>
 80027d0:	6a3b      	ldr	r3, [r7, #32]
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d101      	bne.n	80027da <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80027d6:	2303      	movs	r3, #3
 80027d8:	e03a      	b.n	8002850 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	68db      	ldr	r3, [r3, #12]
 80027e0:	f003 0304 	and.w	r3, r3, #4
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d023      	beq.n	8002830 <UART_WaitOnFlagUntilTimeout+0x8a>
 80027e8:	68bb      	ldr	r3, [r7, #8]
 80027ea:	2b80      	cmp	r3, #128	@ 0x80
 80027ec:	d020      	beq.n	8002830 <UART_WaitOnFlagUntilTimeout+0x8a>
 80027ee:	68bb      	ldr	r3, [r7, #8]
 80027f0:	2b40      	cmp	r3, #64	@ 0x40
 80027f2:	d01d      	beq.n	8002830 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f003 0308 	and.w	r3, r3, #8
 80027fe:	2b08      	cmp	r3, #8
 8002800:	d116      	bne.n	8002830 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8002802:	2300      	movs	r3, #0
 8002804:	617b      	str	r3, [r7, #20]
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	617b      	str	r3, [r7, #20]
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	685b      	ldr	r3, [r3, #4]
 8002814:	617b      	str	r3, [r7, #20]
 8002816:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002818:	68f8      	ldr	r0, [r7, #12]
 800281a:	f000 f81d 	bl	8002858 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	2208      	movs	r2, #8
 8002822:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	2200      	movs	r2, #0
 8002828:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800282c:	2301      	movs	r3, #1
 800282e:	e00f      	b.n	8002850 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	681a      	ldr	r2, [r3, #0]
 8002836:	68bb      	ldr	r3, [r7, #8]
 8002838:	4013      	ands	r3, r2
 800283a:	68ba      	ldr	r2, [r7, #8]
 800283c:	429a      	cmp	r2, r3
 800283e:	bf0c      	ite	eq
 8002840:	2301      	moveq	r3, #1
 8002842:	2300      	movne	r3, #0
 8002844:	b2db      	uxtb	r3, r3
 8002846:	461a      	mov	r2, r3
 8002848:	79fb      	ldrb	r3, [r7, #7]
 800284a:	429a      	cmp	r2, r3
 800284c:	d0b4      	beq.n	80027b8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800284e:	2300      	movs	r3, #0
}
 8002850:	4618      	mov	r0, r3
 8002852:	3718      	adds	r7, #24
 8002854:	46bd      	mov	sp, r7
 8002856:	bd80      	pop	{r7, pc}

08002858 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002858:	b480      	push	{r7}
 800285a:	b095      	sub	sp, #84	@ 0x54
 800285c:	af00      	add	r7, sp, #0
 800285e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	330c      	adds	r3, #12
 8002866:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002868:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800286a:	e853 3f00 	ldrex	r3, [r3]
 800286e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8002870:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002872:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002876:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	330c      	adds	r3, #12
 800287e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002880:	643a      	str	r2, [r7, #64]	@ 0x40
 8002882:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002884:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002886:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002888:	e841 2300 	strex	r3, r2, [r1]
 800288c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800288e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002890:	2b00      	cmp	r3, #0
 8002892:	d1e5      	bne.n	8002860 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	3314      	adds	r3, #20
 800289a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800289c:	6a3b      	ldr	r3, [r7, #32]
 800289e:	e853 3f00 	ldrex	r3, [r3]
 80028a2:	61fb      	str	r3, [r7, #28]
   return(result);
 80028a4:	69fb      	ldr	r3, [r7, #28]
 80028a6:	f023 0301 	bic.w	r3, r3, #1
 80028aa:	64bb      	str	r3, [r7, #72]	@ 0x48
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	3314      	adds	r3, #20
 80028b2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80028b4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80028b6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80028b8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80028ba:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80028bc:	e841 2300 	strex	r3, r2, [r1]
 80028c0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80028c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d1e5      	bne.n	8002894 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028cc:	2b01      	cmp	r3, #1
 80028ce:	d119      	bne.n	8002904 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	330c      	adds	r3, #12
 80028d6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	e853 3f00 	ldrex	r3, [r3]
 80028de:	60bb      	str	r3, [r7, #8]
   return(result);
 80028e0:	68bb      	ldr	r3, [r7, #8]
 80028e2:	f023 0310 	bic.w	r3, r3, #16
 80028e6:	647b      	str	r3, [r7, #68]	@ 0x44
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	330c      	adds	r3, #12
 80028ee:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80028f0:	61ba      	str	r2, [r7, #24]
 80028f2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80028f4:	6979      	ldr	r1, [r7, #20]
 80028f6:	69ba      	ldr	r2, [r7, #24]
 80028f8:	e841 2300 	strex	r3, r2, [r1]
 80028fc:	613b      	str	r3, [r7, #16]
   return(result);
 80028fe:	693b      	ldr	r3, [r7, #16]
 8002900:	2b00      	cmp	r3, #0
 8002902:	d1e5      	bne.n	80028d0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	2220      	movs	r2, #32
 8002908:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	2200      	movs	r2, #0
 8002910:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8002912:	bf00      	nop
 8002914:	3754      	adds	r7, #84	@ 0x54
 8002916:	46bd      	mov	sp, r7
 8002918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291c:	4770      	bx	lr
	...

08002920 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002920:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002924:	b0c0      	sub	sp, #256	@ 0x100
 8002926:	af00      	add	r7, sp, #0
 8002928:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800292c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	691b      	ldr	r3, [r3, #16]
 8002934:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8002938:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800293c:	68d9      	ldr	r1, [r3, #12]
 800293e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002942:	681a      	ldr	r2, [r3, #0]
 8002944:	ea40 0301 	orr.w	r3, r0, r1
 8002948:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800294a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800294e:	689a      	ldr	r2, [r3, #8]
 8002950:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002954:	691b      	ldr	r3, [r3, #16]
 8002956:	431a      	orrs	r2, r3
 8002958:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800295c:	695b      	ldr	r3, [r3, #20]
 800295e:	431a      	orrs	r2, r3
 8002960:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002964:	69db      	ldr	r3, [r3, #28]
 8002966:	4313      	orrs	r3, r2
 8002968:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800296c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	68db      	ldr	r3, [r3, #12]
 8002974:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8002978:	f021 010c 	bic.w	r1, r1, #12
 800297c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002980:	681a      	ldr	r2, [r3, #0]
 8002982:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8002986:	430b      	orrs	r3, r1
 8002988:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800298a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	695b      	ldr	r3, [r3, #20]
 8002992:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8002996:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800299a:	6999      	ldr	r1, [r3, #24]
 800299c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80029a0:	681a      	ldr	r2, [r3, #0]
 80029a2:	ea40 0301 	orr.w	r3, r0, r1
 80029a6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80029a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80029ac:	681a      	ldr	r2, [r3, #0]
 80029ae:	4b8f      	ldr	r3, [pc, #572]	@ (8002bec <UART_SetConfig+0x2cc>)
 80029b0:	429a      	cmp	r2, r3
 80029b2:	d005      	beq.n	80029c0 <UART_SetConfig+0xa0>
 80029b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80029b8:	681a      	ldr	r2, [r3, #0]
 80029ba:	4b8d      	ldr	r3, [pc, #564]	@ (8002bf0 <UART_SetConfig+0x2d0>)
 80029bc:	429a      	cmp	r2, r3
 80029be:	d104      	bne.n	80029ca <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80029c0:	f7ff f874 	bl	8001aac <HAL_RCC_GetPCLK2Freq>
 80029c4:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80029c8:	e003      	b.n	80029d2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80029ca:	f7ff f85b 	bl	8001a84 <HAL_RCC_GetPCLK1Freq>
 80029ce:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80029d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80029d6:	69db      	ldr	r3, [r3, #28]
 80029d8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80029dc:	f040 810c 	bne.w	8002bf8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80029e0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80029e4:	2200      	movs	r2, #0
 80029e6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80029ea:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80029ee:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80029f2:	4622      	mov	r2, r4
 80029f4:	462b      	mov	r3, r5
 80029f6:	1891      	adds	r1, r2, r2
 80029f8:	65b9      	str	r1, [r7, #88]	@ 0x58
 80029fa:	415b      	adcs	r3, r3
 80029fc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80029fe:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002a02:	4621      	mov	r1, r4
 8002a04:	eb12 0801 	adds.w	r8, r2, r1
 8002a08:	4629      	mov	r1, r5
 8002a0a:	eb43 0901 	adc.w	r9, r3, r1
 8002a0e:	f04f 0200 	mov.w	r2, #0
 8002a12:	f04f 0300 	mov.w	r3, #0
 8002a16:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002a1a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002a1e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002a22:	4690      	mov	r8, r2
 8002a24:	4699      	mov	r9, r3
 8002a26:	4623      	mov	r3, r4
 8002a28:	eb18 0303 	adds.w	r3, r8, r3
 8002a2c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8002a30:	462b      	mov	r3, r5
 8002a32:	eb49 0303 	adc.w	r3, r9, r3
 8002a36:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8002a3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a3e:	685b      	ldr	r3, [r3, #4]
 8002a40:	2200      	movs	r2, #0
 8002a42:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8002a46:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8002a4a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8002a4e:	460b      	mov	r3, r1
 8002a50:	18db      	adds	r3, r3, r3
 8002a52:	653b      	str	r3, [r7, #80]	@ 0x50
 8002a54:	4613      	mov	r3, r2
 8002a56:	eb42 0303 	adc.w	r3, r2, r3
 8002a5a:	657b      	str	r3, [r7, #84]	@ 0x54
 8002a5c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8002a60:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8002a64:	f7fd fc14 	bl	8000290 <__aeabi_uldivmod>
 8002a68:	4602      	mov	r2, r0
 8002a6a:	460b      	mov	r3, r1
 8002a6c:	4b61      	ldr	r3, [pc, #388]	@ (8002bf4 <UART_SetConfig+0x2d4>)
 8002a6e:	fba3 2302 	umull	r2, r3, r3, r2
 8002a72:	095b      	lsrs	r3, r3, #5
 8002a74:	011c      	lsls	r4, r3, #4
 8002a76:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002a7a:	2200      	movs	r2, #0
 8002a7c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002a80:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8002a84:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8002a88:	4642      	mov	r2, r8
 8002a8a:	464b      	mov	r3, r9
 8002a8c:	1891      	adds	r1, r2, r2
 8002a8e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8002a90:	415b      	adcs	r3, r3
 8002a92:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002a94:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002a98:	4641      	mov	r1, r8
 8002a9a:	eb12 0a01 	adds.w	sl, r2, r1
 8002a9e:	4649      	mov	r1, r9
 8002aa0:	eb43 0b01 	adc.w	fp, r3, r1
 8002aa4:	f04f 0200 	mov.w	r2, #0
 8002aa8:	f04f 0300 	mov.w	r3, #0
 8002aac:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002ab0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002ab4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002ab8:	4692      	mov	sl, r2
 8002aba:	469b      	mov	fp, r3
 8002abc:	4643      	mov	r3, r8
 8002abe:	eb1a 0303 	adds.w	r3, sl, r3
 8002ac2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002ac6:	464b      	mov	r3, r9
 8002ac8:	eb4b 0303 	adc.w	r3, fp, r3
 8002acc:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8002ad0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ad4:	685b      	ldr	r3, [r3, #4]
 8002ad6:	2200      	movs	r2, #0
 8002ad8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002adc:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8002ae0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8002ae4:	460b      	mov	r3, r1
 8002ae6:	18db      	adds	r3, r3, r3
 8002ae8:	643b      	str	r3, [r7, #64]	@ 0x40
 8002aea:	4613      	mov	r3, r2
 8002aec:	eb42 0303 	adc.w	r3, r2, r3
 8002af0:	647b      	str	r3, [r7, #68]	@ 0x44
 8002af2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8002af6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8002afa:	f7fd fbc9 	bl	8000290 <__aeabi_uldivmod>
 8002afe:	4602      	mov	r2, r0
 8002b00:	460b      	mov	r3, r1
 8002b02:	4611      	mov	r1, r2
 8002b04:	4b3b      	ldr	r3, [pc, #236]	@ (8002bf4 <UART_SetConfig+0x2d4>)
 8002b06:	fba3 2301 	umull	r2, r3, r3, r1
 8002b0a:	095b      	lsrs	r3, r3, #5
 8002b0c:	2264      	movs	r2, #100	@ 0x64
 8002b0e:	fb02 f303 	mul.w	r3, r2, r3
 8002b12:	1acb      	subs	r3, r1, r3
 8002b14:	00db      	lsls	r3, r3, #3
 8002b16:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8002b1a:	4b36      	ldr	r3, [pc, #216]	@ (8002bf4 <UART_SetConfig+0x2d4>)
 8002b1c:	fba3 2302 	umull	r2, r3, r3, r2
 8002b20:	095b      	lsrs	r3, r3, #5
 8002b22:	005b      	lsls	r3, r3, #1
 8002b24:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8002b28:	441c      	add	r4, r3
 8002b2a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002b2e:	2200      	movs	r2, #0
 8002b30:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002b34:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8002b38:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8002b3c:	4642      	mov	r2, r8
 8002b3e:	464b      	mov	r3, r9
 8002b40:	1891      	adds	r1, r2, r2
 8002b42:	63b9      	str	r1, [r7, #56]	@ 0x38
 8002b44:	415b      	adcs	r3, r3
 8002b46:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002b48:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8002b4c:	4641      	mov	r1, r8
 8002b4e:	1851      	adds	r1, r2, r1
 8002b50:	6339      	str	r1, [r7, #48]	@ 0x30
 8002b52:	4649      	mov	r1, r9
 8002b54:	414b      	adcs	r3, r1
 8002b56:	637b      	str	r3, [r7, #52]	@ 0x34
 8002b58:	f04f 0200 	mov.w	r2, #0
 8002b5c:	f04f 0300 	mov.w	r3, #0
 8002b60:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8002b64:	4659      	mov	r1, fp
 8002b66:	00cb      	lsls	r3, r1, #3
 8002b68:	4651      	mov	r1, sl
 8002b6a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002b6e:	4651      	mov	r1, sl
 8002b70:	00ca      	lsls	r2, r1, #3
 8002b72:	4610      	mov	r0, r2
 8002b74:	4619      	mov	r1, r3
 8002b76:	4603      	mov	r3, r0
 8002b78:	4642      	mov	r2, r8
 8002b7a:	189b      	adds	r3, r3, r2
 8002b7c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002b80:	464b      	mov	r3, r9
 8002b82:	460a      	mov	r2, r1
 8002b84:	eb42 0303 	adc.w	r3, r2, r3
 8002b88:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002b8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002b90:	685b      	ldr	r3, [r3, #4]
 8002b92:	2200      	movs	r2, #0
 8002b94:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8002b98:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8002b9c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8002ba0:	460b      	mov	r3, r1
 8002ba2:	18db      	adds	r3, r3, r3
 8002ba4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002ba6:	4613      	mov	r3, r2
 8002ba8:	eb42 0303 	adc.w	r3, r2, r3
 8002bac:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002bae:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002bb2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8002bb6:	f7fd fb6b 	bl	8000290 <__aeabi_uldivmod>
 8002bba:	4602      	mov	r2, r0
 8002bbc:	460b      	mov	r3, r1
 8002bbe:	4b0d      	ldr	r3, [pc, #52]	@ (8002bf4 <UART_SetConfig+0x2d4>)
 8002bc0:	fba3 1302 	umull	r1, r3, r3, r2
 8002bc4:	095b      	lsrs	r3, r3, #5
 8002bc6:	2164      	movs	r1, #100	@ 0x64
 8002bc8:	fb01 f303 	mul.w	r3, r1, r3
 8002bcc:	1ad3      	subs	r3, r2, r3
 8002bce:	00db      	lsls	r3, r3, #3
 8002bd0:	3332      	adds	r3, #50	@ 0x32
 8002bd2:	4a08      	ldr	r2, [pc, #32]	@ (8002bf4 <UART_SetConfig+0x2d4>)
 8002bd4:	fba2 2303 	umull	r2, r3, r2, r3
 8002bd8:	095b      	lsrs	r3, r3, #5
 8002bda:	f003 0207 	and.w	r2, r3, #7
 8002bde:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	4422      	add	r2, r4
 8002be6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002be8:	e106      	b.n	8002df8 <UART_SetConfig+0x4d8>
 8002bea:	bf00      	nop
 8002bec:	40011000 	.word	0x40011000
 8002bf0:	40011400 	.word	0x40011400
 8002bf4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002bf8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002bfc:	2200      	movs	r2, #0
 8002bfe:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8002c02:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8002c06:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8002c0a:	4642      	mov	r2, r8
 8002c0c:	464b      	mov	r3, r9
 8002c0e:	1891      	adds	r1, r2, r2
 8002c10:	6239      	str	r1, [r7, #32]
 8002c12:	415b      	adcs	r3, r3
 8002c14:	627b      	str	r3, [r7, #36]	@ 0x24
 8002c16:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002c1a:	4641      	mov	r1, r8
 8002c1c:	1854      	adds	r4, r2, r1
 8002c1e:	4649      	mov	r1, r9
 8002c20:	eb43 0501 	adc.w	r5, r3, r1
 8002c24:	f04f 0200 	mov.w	r2, #0
 8002c28:	f04f 0300 	mov.w	r3, #0
 8002c2c:	00eb      	lsls	r3, r5, #3
 8002c2e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002c32:	00e2      	lsls	r2, r4, #3
 8002c34:	4614      	mov	r4, r2
 8002c36:	461d      	mov	r5, r3
 8002c38:	4643      	mov	r3, r8
 8002c3a:	18e3      	adds	r3, r4, r3
 8002c3c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002c40:	464b      	mov	r3, r9
 8002c42:	eb45 0303 	adc.w	r3, r5, r3
 8002c46:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8002c4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002c4e:	685b      	ldr	r3, [r3, #4]
 8002c50:	2200      	movs	r2, #0
 8002c52:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002c56:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8002c5a:	f04f 0200 	mov.w	r2, #0
 8002c5e:	f04f 0300 	mov.w	r3, #0
 8002c62:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8002c66:	4629      	mov	r1, r5
 8002c68:	008b      	lsls	r3, r1, #2
 8002c6a:	4621      	mov	r1, r4
 8002c6c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002c70:	4621      	mov	r1, r4
 8002c72:	008a      	lsls	r2, r1, #2
 8002c74:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8002c78:	f7fd fb0a 	bl	8000290 <__aeabi_uldivmod>
 8002c7c:	4602      	mov	r2, r0
 8002c7e:	460b      	mov	r3, r1
 8002c80:	4b60      	ldr	r3, [pc, #384]	@ (8002e04 <UART_SetConfig+0x4e4>)
 8002c82:	fba3 2302 	umull	r2, r3, r3, r2
 8002c86:	095b      	lsrs	r3, r3, #5
 8002c88:	011c      	lsls	r4, r3, #4
 8002c8a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002c8e:	2200      	movs	r2, #0
 8002c90:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002c94:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002c98:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8002c9c:	4642      	mov	r2, r8
 8002c9e:	464b      	mov	r3, r9
 8002ca0:	1891      	adds	r1, r2, r2
 8002ca2:	61b9      	str	r1, [r7, #24]
 8002ca4:	415b      	adcs	r3, r3
 8002ca6:	61fb      	str	r3, [r7, #28]
 8002ca8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002cac:	4641      	mov	r1, r8
 8002cae:	1851      	adds	r1, r2, r1
 8002cb0:	6139      	str	r1, [r7, #16]
 8002cb2:	4649      	mov	r1, r9
 8002cb4:	414b      	adcs	r3, r1
 8002cb6:	617b      	str	r3, [r7, #20]
 8002cb8:	f04f 0200 	mov.w	r2, #0
 8002cbc:	f04f 0300 	mov.w	r3, #0
 8002cc0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002cc4:	4659      	mov	r1, fp
 8002cc6:	00cb      	lsls	r3, r1, #3
 8002cc8:	4651      	mov	r1, sl
 8002cca:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002cce:	4651      	mov	r1, sl
 8002cd0:	00ca      	lsls	r2, r1, #3
 8002cd2:	4610      	mov	r0, r2
 8002cd4:	4619      	mov	r1, r3
 8002cd6:	4603      	mov	r3, r0
 8002cd8:	4642      	mov	r2, r8
 8002cda:	189b      	adds	r3, r3, r2
 8002cdc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002ce0:	464b      	mov	r3, r9
 8002ce2:	460a      	mov	r2, r1
 8002ce4:	eb42 0303 	adc.w	r3, r2, r3
 8002ce8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8002cec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002cf0:	685b      	ldr	r3, [r3, #4]
 8002cf2:	2200      	movs	r2, #0
 8002cf4:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002cf6:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8002cf8:	f04f 0200 	mov.w	r2, #0
 8002cfc:	f04f 0300 	mov.w	r3, #0
 8002d00:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8002d04:	4649      	mov	r1, r9
 8002d06:	008b      	lsls	r3, r1, #2
 8002d08:	4641      	mov	r1, r8
 8002d0a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002d0e:	4641      	mov	r1, r8
 8002d10:	008a      	lsls	r2, r1, #2
 8002d12:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8002d16:	f7fd fabb 	bl	8000290 <__aeabi_uldivmod>
 8002d1a:	4602      	mov	r2, r0
 8002d1c:	460b      	mov	r3, r1
 8002d1e:	4611      	mov	r1, r2
 8002d20:	4b38      	ldr	r3, [pc, #224]	@ (8002e04 <UART_SetConfig+0x4e4>)
 8002d22:	fba3 2301 	umull	r2, r3, r3, r1
 8002d26:	095b      	lsrs	r3, r3, #5
 8002d28:	2264      	movs	r2, #100	@ 0x64
 8002d2a:	fb02 f303 	mul.w	r3, r2, r3
 8002d2e:	1acb      	subs	r3, r1, r3
 8002d30:	011b      	lsls	r3, r3, #4
 8002d32:	3332      	adds	r3, #50	@ 0x32
 8002d34:	4a33      	ldr	r2, [pc, #204]	@ (8002e04 <UART_SetConfig+0x4e4>)
 8002d36:	fba2 2303 	umull	r2, r3, r2, r3
 8002d3a:	095b      	lsrs	r3, r3, #5
 8002d3c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002d40:	441c      	add	r4, r3
 8002d42:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002d46:	2200      	movs	r2, #0
 8002d48:	673b      	str	r3, [r7, #112]	@ 0x70
 8002d4a:	677a      	str	r2, [r7, #116]	@ 0x74
 8002d4c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8002d50:	4642      	mov	r2, r8
 8002d52:	464b      	mov	r3, r9
 8002d54:	1891      	adds	r1, r2, r2
 8002d56:	60b9      	str	r1, [r7, #8]
 8002d58:	415b      	adcs	r3, r3
 8002d5a:	60fb      	str	r3, [r7, #12]
 8002d5c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002d60:	4641      	mov	r1, r8
 8002d62:	1851      	adds	r1, r2, r1
 8002d64:	6039      	str	r1, [r7, #0]
 8002d66:	4649      	mov	r1, r9
 8002d68:	414b      	adcs	r3, r1
 8002d6a:	607b      	str	r3, [r7, #4]
 8002d6c:	f04f 0200 	mov.w	r2, #0
 8002d70:	f04f 0300 	mov.w	r3, #0
 8002d74:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002d78:	4659      	mov	r1, fp
 8002d7a:	00cb      	lsls	r3, r1, #3
 8002d7c:	4651      	mov	r1, sl
 8002d7e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002d82:	4651      	mov	r1, sl
 8002d84:	00ca      	lsls	r2, r1, #3
 8002d86:	4610      	mov	r0, r2
 8002d88:	4619      	mov	r1, r3
 8002d8a:	4603      	mov	r3, r0
 8002d8c:	4642      	mov	r2, r8
 8002d8e:	189b      	adds	r3, r3, r2
 8002d90:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002d92:	464b      	mov	r3, r9
 8002d94:	460a      	mov	r2, r1
 8002d96:	eb42 0303 	adc.w	r3, r2, r3
 8002d9a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002d9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002da0:	685b      	ldr	r3, [r3, #4]
 8002da2:	2200      	movs	r2, #0
 8002da4:	663b      	str	r3, [r7, #96]	@ 0x60
 8002da6:	667a      	str	r2, [r7, #100]	@ 0x64
 8002da8:	f04f 0200 	mov.w	r2, #0
 8002dac:	f04f 0300 	mov.w	r3, #0
 8002db0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8002db4:	4649      	mov	r1, r9
 8002db6:	008b      	lsls	r3, r1, #2
 8002db8:	4641      	mov	r1, r8
 8002dba:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002dbe:	4641      	mov	r1, r8
 8002dc0:	008a      	lsls	r2, r1, #2
 8002dc2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8002dc6:	f7fd fa63 	bl	8000290 <__aeabi_uldivmod>
 8002dca:	4602      	mov	r2, r0
 8002dcc:	460b      	mov	r3, r1
 8002dce:	4b0d      	ldr	r3, [pc, #52]	@ (8002e04 <UART_SetConfig+0x4e4>)
 8002dd0:	fba3 1302 	umull	r1, r3, r3, r2
 8002dd4:	095b      	lsrs	r3, r3, #5
 8002dd6:	2164      	movs	r1, #100	@ 0x64
 8002dd8:	fb01 f303 	mul.w	r3, r1, r3
 8002ddc:	1ad3      	subs	r3, r2, r3
 8002dde:	011b      	lsls	r3, r3, #4
 8002de0:	3332      	adds	r3, #50	@ 0x32
 8002de2:	4a08      	ldr	r2, [pc, #32]	@ (8002e04 <UART_SetConfig+0x4e4>)
 8002de4:	fba2 2303 	umull	r2, r3, r2, r3
 8002de8:	095b      	lsrs	r3, r3, #5
 8002dea:	f003 020f 	and.w	r2, r3, #15
 8002dee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	4422      	add	r2, r4
 8002df6:	609a      	str	r2, [r3, #8]
}
 8002df8:	bf00      	nop
 8002dfa:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002e04:	51eb851f 	.word	0x51eb851f

08002e08 <sniprintf>:
 8002e08:	b40c      	push	{r2, r3}
 8002e0a:	b530      	push	{r4, r5, lr}
 8002e0c:	4b17      	ldr	r3, [pc, #92]	@ (8002e6c <sniprintf+0x64>)
 8002e0e:	1e0c      	subs	r4, r1, #0
 8002e10:	681d      	ldr	r5, [r3, #0]
 8002e12:	b09d      	sub	sp, #116	@ 0x74
 8002e14:	da08      	bge.n	8002e28 <sniprintf+0x20>
 8002e16:	238b      	movs	r3, #139	@ 0x8b
 8002e18:	602b      	str	r3, [r5, #0]
 8002e1a:	f04f 30ff 	mov.w	r0, #4294967295
 8002e1e:	b01d      	add	sp, #116	@ 0x74
 8002e20:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8002e24:	b002      	add	sp, #8
 8002e26:	4770      	bx	lr
 8002e28:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8002e2c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8002e30:	bf14      	ite	ne
 8002e32:	f104 33ff 	addne.w	r3, r4, #4294967295
 8002e36:	4623      	moveq	r3, r4
 8002e38:	9304      	str	r3, [sp, #16]
 8002e3a:	9307      	str	r3, [sp, #28]
 8002e3c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002e40:	9002      	str	r0, [sp, #8]
 8002e42:	9006      	str	r0, [sp, #24]
 8002e44:	f8ad 3016 	strh.w	r3, [sp, #22]
 8002e48:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8002e4a:	ab21      	add	r3, sp, #132	@ 0x84
 8002e4c:	a902      	add	r1, sp, #8
 8002e4e:	4628      	mov	r0, r5
 8002e50:	9301      	str	r3, [sp, #4]
 8002e52:	f000 f995 	bl	8003180 <_svfiprintf_r>
 8002e56:	1c43      	adds	r3, r0, #1
 8002e58:	bfbc      	itt	lt
 8002e5a:	238b      	movlt	r3, #139	@ 0x8b
 8002e5c:	602b      	strlt	r3, [r5, #0]
 8002e5e:	2c00      	cmp	r4, #0
 8002e60:	d0dd      	beq.n	8002e1e <sniprintf+0x16>
 8002e62:	9b02      	ldr	r3, [sp, #8]
 8002e64:	2200      	movs	r2, #0
 8002e66:	701a      	strb	r2, [r3, #0]
 8002e68:	e7d9      	b.n	8002e1e <sniprintf+0x16>
 8002e6a:	bf00      	nop
 8002e6c:	2000000c 	.word	0x2000000c

08002e70 <memset>:
 8002e70:	4402      	add	r2, r0
 8002e72:	4603      	mov	r3, r0
 8002e74:	4293      	cmp	r3, r2
 8002e76:	d100      	bne.n	8002e7a <memset+0xa>
 8002e78:	4770      	bx	lr
 8002e7a:	f803 1b01 	strb.w	r1, [r3], #1
 8002e7e:	e7f9      	b.n	8002e74 <memset+0x4>

08002e80 <__errno>:
 8002e80:	4b01      	ldr	r3, [pc, #4]	@ (8002e88 <__errno+0x8>)
 8002e82:	6818      	ldr	r0, [r3, #0]
 8002e84:	4770      	bx	lr
 8002e86:	bf00      	nop
 8002e88:	2000000c 	.word	0x2000000c

08002e8c <__libc_init_array>:
 8002e8c:	b570      	push	{r4, r5, r6, lr}
 8002e8e:	4d0d      	ldr	r5, [pc, #52]	@ (8002ec4 <__libc_init_array+0x38>)
 8002e90:	4c0d      	ldr	r4, [pc, #52]	@ (8002ec8 <__libc_init_array+0x3c>)
 8002e92:	1b64      	subs	r4, r4, r5
 8002e94:	10a4      	asrs	r4, r4, #2
 8002e96:	2600      	movs	r6, #0
 8002e98:	42a6      	cmp	r6, r4
 8002e9a:	d109      	bne.n	8002eb0 <__libc_init_array+0x24>
 8002e9c:	4d0b      	ldr	r5, [pc, #44]	@ (8002ecc <__libc_init_array+0x40>)
 8002e9e:	4c0c      	ldr	r4, [pc, #48]	@ (8002ed0 <__libc_init_array+0x44>)
 8002ea0:	f000 fc66 	bl	8003770 <_init>
 8002ea4:	1b64      	subs	r4, r4, r5
 8002ea6:	10a4      	asrs	r4, r4, #2
 8002ea8:	2600      	movs	r6, #0
 8002eaa:	42a6      	cmp	r6, r4
 8002eac:	d105      	bne.n	8002eba <__libc_init_array+0x2e>
 8002eae:	bd70      	pop	{r4, r5, r6, pc}
 8002eb0:	f855 3b04 	ldr.w	r3, [r5], #4
 8002eb4:	4798      	blx	r3
 8002eb6:	3601      	adds	r6, #1
 8002eb8:	e7ee      	b.n	8002e98 <__libc_init_array+0xc>
 8002eba:	f855 3b04 	ldr.w	r3, [r5], #4
 8002ebe:	4798      	blx	r3
 8002ec0:	3601      	adds	r6, #1
 8002ec2:	e7f2      	b.n	8002eaa <__libc_init_array+0x1e>
 8002ec4:	08003820 	.word	0x08003820
 8002ec8:	08003820 	.word	0x08003820
 8002ecc:	08003820 	.word	0x08003820
 8002ed0:	08003824 	.word	0x08003824

08002ed4 <__retarget_lock_acquire_recursive>:
 8002ed4:	4770      	bx	lr

08002ed6 <__retarget_lock_release_recursive>:
 8002ed6:	4770      	bx	lr

08002ed8 <_free_r>:
 8002ed8:	b538      	push	{r3, r4, r5, lr}
 8002eda:	4605      	mov	r5, r0
 8002edc:	2900      	cmp	r1, #0
 8002ede:	d041      	beq.n	8002f64 <_free_r+0x8c>
 8002ee0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002ee4:	1f0c      	subs	r4, r1, #4
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	bfb8      	it	lt
 8002eea:	18e4      	addlt	r4, r4, r3
 8002eec:	f000 f8e0 	bl	80030b0 <__malloc_lock>
 8002ef0:	4a1d      	ldr	r2, [pc, #116]	@ (8002f68 <_free_r+0x90>)
 8002ef2:	6813      	ldr	r3, [r2, #0]
 8002ef4:	b933      	cbnz	r3, 8002f04 <_free_r+0x2c>
 8002ef6:	6063      	str	r3, [r4, #4]
 8002ef8:	6014      	str	r4, [r2, #0]
 8002efa:	4628      	mov	r0, r5
 8002efc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002f00:	f000 b8dc 	b.w	80030bc <__malloc_unlock>
 8002f04:	42a3      	cmp	r3, r4
 8002f06:	d908      	bls.n	8002f1a <_free_r+0x42>
 8002f08:	6820      	ldr	r0, [r4, #0]
 8002f0a:	1821      	adds	r1, r4, r0
 8002f0c:	428b      	cmp	r3, r1
 8002f0e:	bf01      	itttt	eq
 8002f10:	6819      	ldreq	r1, [r3, #0]
 8002f12:	685b      	ldreq	r3, [r3, #4]
 8002f14:	1809      	addeq	r1, r1, r0
 8002f16:	6021      	streq	r1, [r4, #0]
 8002f18:	e7ed      	b.n	8002ef6 <_free_r+0x1e>
 8002f1a:	461a      	mov	r2, r3
 8002f1c:	685b      	ldr	r3, [r3, #4]
 8002f1e:	b10b      	cbz	r3, 8002f24 <_free_r+0x4c>
 8002f20:	42a3      	cmp	r3, r4
 8002f22:	d9fa      	bls.n	8002f1a <_free_r+0x42>
 8002f24:	6811      	ldr	r1, [r2, #0]
 8002f26:	1850      	adds	r0, r2, r1
 8002f28:	42a0      	cmp	r0, r4
 8002f2a:	d10b      	bne.n	8002f44 <_free_r+0x6c>
 8002f2c:	6820      	ldr	r0, [r4, #0]
 8002f2e:	4401      	add	r1, r0
 8002f30:	1850      	adds	r0, r2, r1
 8002f32:	4283      	cmp	r3, r0
 8002f34:	6011      	str	r1, [r2, #0]
 8002f36:	d1e0      	bne.n	8002efa <_free_r+0x22>
 8002f38:	6818      	ldr	r0, [r3, #0]
 8002f3a:	685b      	ldr	r3, [r3, #4]
 8002f3c:	6053      	str	r3, [r2, #4]
 8002f3e:	4408      	add	r0, r1
 8002f40:	6010      	str	r0, [r2, #0]
 8002f42:	e7da      	b.n	8002efa <_free_r+0x22>
 8002f44:	d902      	bls.n	8002f4c <_free_r+0x74>
 8002f46:	230c      	movs	r3, #12
 8002f48:	602b      	str	r3, [r5, #0]
 8002f4a:	e7d6      	b.n	8002efa <_free_r+0x22>
 8002f4c:	6820      	ldr	r0, [r4, #0]
 8002f4e:	1821      	adds	r1, r4, r0
 8002f50:	428b      	cmp	r3, r1
 8002f52:	bf04      	itt	eq
 8002f54:	6819      	ldreq	r1, [r3, #0]
 8002f56:	685b      	ldreq	r3, [r3, #4]
 8002f58:	6063      	str	r3, [r4, #4]
 8002f5a:	bf04      	itt	eq
 8002f5c:	1809      	addeq	r1, r1, r0
 8002f5e:	6021      	streq	r1, [r4, #0]
 8002f60:	6054      	str	r4, [r2, #4]
 8002f62:	e7ca      	b.n	8002efa <_free_r+0x22>
 8002f64:	bd38      	pop	{r3, r4, r5, pc}
 8002f66:	bf00      	nop
 8002f68:	2000022c 	.word	0x2000022c

08002f6c <sbrk_aligned>:
 8002f6c:	b570      	push	{r4, r5, r6, lr}
 8002f6e:	4e0f      	ldr	r6, [pc, #60]	@ (8002fac <sbrk_aligned+0x40>)
 8002f70:	460c      	mov	r4, r1
 8002f72:	6831      	ldr	r1, [r6, #0]
 8002f74:	4605      	mov	r5, r0
 8002f76:	b911      	cbnz	r1, 8002f7e <sbrk_aligned+0x12>
 8002f78:	f000 fba6 	bl	80036c8 <_sbrk_r>
 8002f7c:	6030      	str	r0, [r6, #0]
 8002f7e:	4621      	mov	r1, r4
 8002f80:	4628      	mov	r0, r5
 8002f82:	f000 fba1 	bl	80036c8 <_sbrk_r>
 8002f86:	1c43      	adds	r3, r0, #1
 8002f88:	d103      	bne.n	8002f92 <sbrk_aligned+0x26>
 8002f8a:	f04f 34ff 	mov.w	r4, #4294967295
 8002f8e:	4620      	mov	r0, r4
 8002f90:	bd70      	pop	{r4, r5, r6, pc}
 8002f92:	1cc4      	adds	r4, r0, #3
 8002f94:	f024 0403 	bic.w	r4, r4, #3
 8002f98:	42a0      	cmp	r0, r4
 8002f9a:	d0f8      	beq.n	8002f8e <sbrk_aligned+0x22>
 8002f9c:	1a21      	subs	r1, r4, r0
 8002f9e:	4628      	mov	r0, r5
 8002fa0:	f000 fb92 	bl	80036c8 <_sbrk_r>
 8002fa4:	3001      	adds	r0, #1
 8002fa6:	d1f2      	bne.n	8002f8e <sbrk_aligned+0x22>
 8002fa8:	e7ef      	b.n	8002f8a <sbrk_aligned+0x1e>
 8002faa:	bf00      	nop
 8002fac:	20000228 	.word	0x20000228

08002fb0 <_malloc_r>:
 8002fb0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002fb4:	1ccd      	adds	r5, r1, #3
 8002fb6:	f025 0503 	bic.w	r5, r5, #3
 8002fba:	3508      	adds	r5, #8
 8002fbc:	2d0c      	cmp	r5, #12
 8002fbe:	bf38      	it	cc
 8002fc0:	250c      	movcc	r5, #12
 8002fc2:	2d00      	cmp	r5, #0
 8002fc4:	4606      	mov	r6, r0
 8002fc6:	db01      	blt.n	8002fcc <_malloc_r+0x1c>
 8002fc8:	42a9      	cmp	r1, r5
 8002fca:	d904      	bls.n	8002fd6 <_malloc_r+0x26>
 8002fcc:	230c      	movs	r3, #12
 8002fce:	6033      	str	r3, [r6, #0]
 8002fd0:	2000      	movs	r0, #0
 8002fd2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002fd6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80030ac <_malloc_r+0xfc>
 8002fda:	f000 f869 	bl	80030b0 <__malloc_lock>
 8002fde:	f8d8 3000 	ldr.w	r3, [r8]
 8002fe2:	461c      	mov	r4, r3
 8002fe4:	bb44      	cbnz	r4, 8003038 <_malloc_r+0x88>
 8002fe6:	4629      	mov	r1, r5
 8002fe8:	4630      	mov	r0, r6
 8002fea:	f7ff ffbf 	bl	8002f6c <sbrk_aligned>
 8002fee:	1c43      	adds	r3, r0, #1
 8002ff0:	4604      	mov	r4, r0
 8002ff2:	d158      	bne.n	80030a6 <_malloc_r+0xf6>
 8002ff4:	f8d8 4000 	ldr.w	r4, [r8]
 8002ff8:	4627      	mov	r7, r4
 8002ffa:	2f00      	cmp	r7, #0
 8002ffc:	d143      	bne.n	8003086 <_malloc_r+0xd6>
 8002ffe:	2c00      	cmp	r4, #0
 8003000:	d04b      	beq.n	800309a <_malloc_r+0xea>
 8003002:	6823      	ldr	r3, [r4, #0]
 8003004:	4639      	mov	r1, r7
 8003006:	4630      	mov	r0, r6
 8003008:	eb04 0903 	add.w	r9, r4, r3
 800300c:	f000 fb5c 	bl	80036c8 <_sbrk_r>
 8003010:	4581      	cmp	r9, r0
 8003012:	d142      	bne.n	800309a <_malloc_r+0xea>
 8003014:	6821      	ldr	r1, [r4, #0]
 8003016:	1a6d      	subs	r5, r5, r1
 8003018:	4629      	mov	r1, r5
 800301a:	4630      	mov	r0, r6
 800301c:	f7ff ffa6 	bl	8002f6c <sbrk_aligned>
 8003020:	3001      	adds	r0, #1
 8003022:	d03a      	beq.n	800309a <_malloc_r+0xea>
 8003024:	6823      	ldr	r3, [r4, #0]
 8003026:	442b      	add	r3, r5
 8003028:	6023      	str	r3, [r4, #0]
 800302a:	f8d8 3000 	ldr.w	r3, [r8]
 800302e:	685a      	ldr	r2, [r3, #4]
 8003030:	bb62      	cbnz	r2, 800308c <_malloc_r+0xdc>
 8003032:	f8c8 7000 	str.w	r7, [r8]
 8003036:	e00f      	b.n	8003058 <_malloc_r+0xa8>
 8003038:	6822      	ldr	r2, [r4, #0]
 800303a:	1b52      	subs	r2, r2, r5
 800303c:	d420      	bmi.n	8003080 <_malloc_r+0xd0>
 800303e:	2a0b      	cmp	r2, #11
 8003040:	d917      	bls.n	8003072 <_malloc_r+0xc2>
 8003042:	1961      	adds	r1, r4, r5
 8003044:	42a3      	cmp	r3, r4
 8003046:	6025      	str	r5, [r4, #0]
 8003048:	bf18      	it	ne
 800304a:	6059      	strne	r1, [r3, #4]
 800304c:	6863      	ldr	r3, [r4, #4]
 800304e:	bf08      	it	eq
 8003050:	f8c8 1000 	streq.w	r1, [r8]
 8003054:	5162      	str	r2, [r4, r5]
 8003056:	604b      	str	r3, [r1, #4]
 8003058:	4630      	mov	r0, r6
 800305a:	f000 f82f 	bl	80030bc <__malloc_unlock>
 800305e:	f104 000b 	add.w	r0, r4, #11
 8003062:	1d23      	adds	r3, r4, #4
 8003064:	f020 0007 	bic.w	r0, r0, #7
 8003068:	1ac2      	subs	r2, r0, r3
 800306a:	bf1c      	itt	ne
 800306c:	1a1b      	subne	r3, r3, r0
 800306e:	50a3      	strne	r3, [r4, r2]
 8003070:	e7af      	b.n	8002fd2 <_malloc_r+0x22>
 8003072:	6862      	ldr	r2, [r4, #4]
 8003074:	42a3      	cmp	r3, r4
 8003076:	bf0c      	ite	eq
 8003078:	f8c8 2000 	streq.w	r2, [r8]
 800307c:	605a      	strne	r2, [r3, #4]
 800307e:	e7eb      	b.n	8003058 <_malloc_r+0xa8>
 8003080:	4623      	mov	r3, r4
 8003082:	6864      	ldr	r4, [r4, #4]
 8003084:	e7ae      	b.n	8002fe4 <_malloc_r+0x34>
 8003086:	463c      	mov	r4, r7
 8003088:	687f      	ldr	r7, [r7, #4]
 800308a:	e7b6      	b.n	8002ffa <_malloc_r+0x4a>
 800308c:	461a      	mov	r2, r3
 800308e:	685b      	ldr	r3, [r3, #4]
 8003090:	42a3      	cmp	r3, r4
 8003092:	d1fb      	bne.n	800308c <_malloc_r+0xdc>
 8003094:	2300      	movs	r3, #0
 8003096:	6053      	str	r3, [r2, #4]
 8003098:	e7de      	b.n	8003058 <_malloc_r+0xa8>
 800309a:	230c      	movs	r3, #12
 800309c:	6033      	str	r3, [r6, #0]
 800309e:	4630      	mov	r0, r6
 80030a0:	f000 f80c 	bl	80030bc <__malloc_unlock>
 80030a4:	e794      	b.n	8002fd0 <_malloc_r+0x20>
 80030a6:	6005      	str	r5, [r0, #0]
 80030a8:	e7d6      	b.n	8003058 <_malloc_r+0xa8>
 80030aa:	bf00      	nop
 80030ac:	2000022c 	.word	0x2000022c

080030b0 <__malloc_lock>:
 80030b0:	4801      	ldr	r0, [pc, #4]	@ (80030b8 <__malloc_lock+0x8>)
 80030b2:	f7ff bf0f 	b.w	8002ed4 <__retarget_lock_acquire_recursive>
 80030b6:	bf00      	nop
 80030b8:	20000224 	.word	0x20000224

080030bc <__malloc_unlock>:
 80030bc:	4801      	ldr	r0, [pc, #4]	@ (80030c4 <__malloc_unlock+0x8>)
 80030be:	f7ff bf0a 	b.w	8002ed6 <__retarget_lock_release_recursive>
 80030c2:	bf00      	nop
 80030c4:	20000224 	.word	0x20000224

080030c8 <__ssputs_r>:
 80030c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80030cc:	688e      	ldr	r6, [r1, #8]
 80030ce:	461f      	mov	r7, r3
 80030d0:	42be      	cmp	r6, r7
 80030d2:	680b      	ldr	r3, [r1, #0]
 80030d4:	4682      	mov	sl, r0
 80030d6:	460c      	mov	r4, r1
 80030d8:	4690      	mov	r8, r2
 80030da:	d82d      	bhi.n	8003138 <__ssputs_r+0x70>
 80030dc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80030e0:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80030e4:	d026      	beq.n	8003134 <__ssputs_r+0x6c>
 80030e6:	6965      	ldr	r5, [r4, #20]
 80030e8:	6909      	ldr	r1, [r1, #16]
 80030ea:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80030ee:	eba3 0901 	sub.w	r9, r3, r1
 80030f2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80030f6:	1c7b      	adds	r3, r7, #1
 80030f8:	444b      	add	r3, r9
 80030fa:	106d      	asrs	r5, r5, #1
 80030fc:	429d      	cmp	r5, r3
 80030fe:	bf38      	it	cc
 8003100:	461d      	movcc	r5, r3
 8003102:	0553      	lsls	r3, r2, #21
 8003104:	d527      	bpl.n	8003156 <__ssputs_r+0x8e>
 8003106:	4629      	mov	r1, r5
 8003108:	f7ff ff52 	bl	8002fb0 <_malloc_r>
 800310c:	4606      	mov	r6, r0
 800310e:	b360      	cbz	r0, 800316a <__ssputs_r+0xa2>
 8003110:	6921      	ldr	r1, [r4, #16]
 8003112:	464a      	mov	r2, r9
 8003114:	f000 fae8 	bl	80036e8 <memcpy>
 8003118:	89a3      	ldrh	r3, [r4, #12]
 800311a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800311e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003122:	81a3      	strh	r3, [r4, #12]
 8003124:	6126      	str	r6, [r4, #16]
 8003126:	6165      	str	r5, [r4, #20]
 8003128:	444e      	add	r6, r9
 800312a:	eba5 0509 	sub.w	r5, r5, r9
 800312e:	6026      	str	r6, [r4, #0]
 8003130:	60a5      	str	r5, [r4, #8]
 8003132:	463e      	mov	r6, r7
 8003134:	42be      	cmp	r6, r7
 8003136:	d900      	bls.n	800313a <__ssputs_r+0x72>
 8003138:	463e      	mov	r6, r7
 800313a:	6820      	ldr	r0, [r4, #0]
 800313c:	4632      	mov	r2, r6
 800313e:	4641      	mov	r1, r8
 8003140:	f000 faa8 	bl	8003694 <memmove>
 8003144:	68a3      	ldr	r3, [r4, #8]
 8003146:	1b9b      	subs	r3, r3, r6
 8003148:	60a3      	str	r3, [r4, #8]
 800314a:	6823      	ldr	r3, [r4, #0]
 800314c:	4433      	add	r3, r6
 800314e:	6023      	str	r3, [r4, #0]
 8003150:	2000      	movs	r0, #0
 8003152:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003156:	462a      	mov	r2, r5
 8003158:	f000 fad4 	bl	8003704 <_realloc_r>
 800315c:	4606      	mov	r6, r0
 800315e:	2800      	cmp	r0, #0
 8003160:	d1e0      	bne.n	8003124 <__ssputs_r+0x5c>
 8003162:	6921      	ldr	r1, [r4, #16]
 8003164:	4650      	mov	r0, sl
 8003166:	f7ff feb7 	bl	8002ed8 <_free_r>
 800316a:	230c      	movs	r3, #12
 800316c:	f8ca 3000 	str.w	r3, [sl]
 8003170:	89a3      	ldrh	r3, [r4, #12]
 8003172:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003176:	81a3      	strh	r3, [r4, #12]
 8003178:	f04f 30ff 	mov.w	r0, #4294967295
 800317c:	e7e9      	b.n	8003152 <__ssputs_r+0x8a>
	...

08003180 <_svfiprintf_r>:
 8003180:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003184:	4698      	mov	r8, r3
 8003186:	898b      	ldrh	r3, [r1, #12]
 8003188:	061b      	lsls	r3, r3, #24
 800318a:	b09d      	sub	sp, #116	@ 0x74
 800318c:	4607      	mov	r7, r0
 800318e:	460d      	mov	r5, r1
 8003190:	4614      	mov	r4, r2
 8003192:	d510      	bpl.n	80031b6 <_svfiprintf_r+0x36>
 8003194:	690b      	ldr	r3, [r1, #16]
 8003196:	b973      	cbnz	r3, 80031b6 <_svfiprintf_r+0x36>
 8003198:	2140      	movs	r1, #64	@ 0x40
 800319a:	f7ff ff09 	bl	8002fb0 <_malloc_r>
 800319e:	6028      	str	r0, [r5, #0]
 80031a0:	6128      	str	r0, [r5, #16]
 80031a2:	b930      	cbnz	r0, 80031b2 <_svfiprintf_r+0x32>
 80031a4:	230c      	movs	r3, #12
 80031a6:	603b      	str	r3, [r7, #0]
 80031a8:	f04f 30ff 	mov.w	r0, #4294967295
 80031ac:	b01d      	add	sp, #116	@ 0x74
 80031ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80031b2:	2340      	movs	r3, #64	@ 0x40
 80031b4:	616b      	str	r3, [r5, #20]
 80031b6:	2300      	movs	r3, #0
 80031b8:	9309      	str	r3, [sp, #36]	@ 0x24
 80031ba:	2320      	movs	r3, #32
 80031bc:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80031c0:	f8cd 800c 	str.w	r8, [sp, #12]
 80031c4:	2330      	movs	r3, #48	@ 0x30
 80031c6:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8003364 <_svfiprintf_r+0x1e4>
 80031ca:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80031ce:	f04f 0901 	mov.w	r9, #1
 80031d2:	4623      	mov	r3, r4
 80031d4:	469a      	mov	sl, r3
 80031d6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80031da:	b10a      	cbz	r2, 80031e0 <_svfiprintf_r+0x60>
 80031dc:	2a25      	cmp	r2, #37	@ 0x25
 80031de:	d1f9      	bne.n	80031d4 <_svfiprintf_r+0x54>
 80031e0:	ebba 0b04 	subs.w	fp, sl, r4
 80031e4:	d00b      	beq.n	80031fe <_svfiprintf_r+0x7e>
 80031e6:	465b      	mov	r3, fp
 80031e8:	4622      	mov	r2, r4
 80031ea:	4629      	mov	r1, r5
 80031ec:	4638      	mov	r0, r7
 80031ee:	f7ff ff6b 	bl	80030c8 <__ssputs_r>
 80031f2:	3001      	adds	r0, #1
 80031f4:	f000 80a7 	beq.w	8003346 <_svfiprintf_r+0x1c6>
 80031f8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80031fa:	445a      	add	r2, fp
 80031fc:	9209      	str	r2, [sp, #36]	@ 0x24
 80031fe:	f89a 3000 	ldrb.w	r3, [sl]
 8003202:	2b00      	cmp	r3, #0
 8003204:	f000 809f 	beq.w	8003346 <_svfiprintf_r+0x1c6>
 8003208:	2300      	movs	r3, #0
 800320a:	f04f 32ff 	mov.w	r2, #4294967295
 800320e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003212:	f10a 0a01 	add.w	sl, sl, #1
 8003216:	9304      	str	r3, [sp, #16]
 8003218:	9307      	str	r3, [sp, #28]
 800321a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800321e:	931a      	str	r3, [sp, #104]	@ 0x68
 8003220:	4654      	mov	r4, sl
 8003222:	2205      	movs	r2, #5
 8003224:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003228:	484e      	ldr	r0, [pc, #312]	@ (8003364 <_svfiprintf_r+0x1e4>)
 800322a:	f7fc ffe1 	bl	80001f0 <memchr>
 800322e:	9a04      	ldr	r2, [sp, #16]
 8003230:	b9d8      	cbnz	r0, 800326a <_svfiprintf_r+0xea>
 8003232:	06d0      	lsls	r0, r2, #27
 8003234:	bf44      	itt	mi
 8003236:	2320      	movmi	r3, #32
 8003238:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800323c:	0711      	lsls	r1, r2, #28
 800323e:	bf44      	itt	mi
 8003240:	232b      	movmi	r3, #43	@ 0x2b
 8003242:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003246:	f89a 3000 	ldrb.w	r3, [sl]
 800324a:	2b2a      	cmp	r3, #42	@ 0x2a
 800324c:	d015      	beq.n	800327a <_svfiprintf_r+0xfa>
 800324e:	9a07      	ldr	r2, [sp, #28]
 8003250:	4654      	mov	r4, sl
 8003252:	2000      	movs	r0, #0
 8003254:	f04f 0c0a 	mov.w	ip, #10
 8003258:	4621      	mov	r1, r4
 800325a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800325e:	3b30      	subs	r3, #48	@ 0x30
 8003260:	2b09      	cmp	r3, #9
 8003262:	d94b      	bls.n	80032fc <_svfiprintf_r+0x17c>
 8003264:	b1b0      	cbz	r0, 8003294 <_svfiprintf_r+0x114>
 8003266:	9207      	str	r2, [sp, #28]
 8003268:	e014      	b.n	8003294 <_svfiprintf_r+0x114>
 800326a:	eba0 0308 	sub.w	r3, r0, r8
 800326e:	fa09 f303 	lsl.w	r3, r9, r3
 8003272:	4313      	orrs	r3, r2
 8003274:	9304      	str	r3, [sp, #16]
 8003276:	46a2      	mov	sl, r4
 8003278:	e7d2      	b.n	8003220 <_svfiprintf_r+0xa0>
 800327a:	9b03      	ldr	r3, [sp, #12]
 800327c:	1d19      	adds	r1, r3, #4
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	9103      	str	r1, [sp, #12]
 8003282:	2b00      	cmp	r3, #0
 8003284:	bfbb      	ittet	lt
 8003286:	425b      	neglt	r3, r3
 8003288:	f042 0202 	orrlt.w	r2, r2, #2
 800328c:	9307      	strge	r3, [sp, #28]
 800328e:	9307      	strlt	r3, [sp, #28]
 8003290:	bfb8      	it	lt
 8003292:	9204      	strlt	r2, [sp, #16]
 8003294:	7823      	ldrb	r3, [r4, #0]
 8003296:	2b2e      	cmp	r3, #46	@ 0x2e
 8003298:	d10a      	bne.n	80032b0 <_svfiprintf_r+0x130>
 800329a:	7863      	ldrb	r3, [r4, #1]
 800329c:	2b2a      	cmp	r3, #42	@ 0x2a
 800329e:	d132      	bne.n	8003306 <_svfiprintf_r+0x186>
 80032a0:	9b03      	ldr	r3, [sp, #12]
 80032a2:	1d1a      	adds	r2, r3, #4
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	9203      	str	r2, [sp, #12]
 80032a8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80032ac:	3402      	adds	r4, #2
 80032ae:	9305      	str	r3, [sp, #20]
 80032b0:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8003374 <_svfiprintf_r+0x1f4>
 80032b4:	7821      	ldrb	r1, [r4, #0]
 80032b6:	2203      	movs	r2, #3
 80032b8:	4650      	mov	r0, sl
 80032ba:	f7fc ff99 	bl	80001f0 <memchr>
 80032be:	b138      	cbz	r0, 80032d0 <_svfiprintf_r+0x150>
 80032c0:	9b04      	ldr	r3, [sp, #16]
 80032c2:	eba0 000a 	sub.w	r0, r0, sl
 80032c6:	2240      	movs	r2, #64	@ 0x40
 80032c8:	4082      	lsls	r2, r0
 80032ca:	4313      	orrs	r3, r2
 80032cc:	3401      	adds	r4, #1
 80032ce:	9304      	str	r3, [sp, #16]
 80032d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80032d4:	4824      	ldr	r0, [pc, #144]	@ (8003368 <_svfiprintf_r+0x1e8>)
 80032d6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80032da:	2206      	movs	r2, #6
 80032dc:	f7fc ff88 	bl	80001f0 <memchr>
 80032e0:	2800      	cmp	r0, #0
 80032e2:	d036      	beq.n	8003352 <_svfiprintf_r+0x1d2>
 80032e4:	4b21      	ldr	r3, [pc, #132]	@ (800336c <_svfiprintf_r+0x1ec>)
 80032e6:	bb1b      	cbnz	r3, 8003330 <_svfiprintf_r+0x1b0>
 80032e8:	9b03      	ldr	r3, [sp, #12]
 80032ea:	3307      	adds	r3, #7
 80032ec:	f023 0307 	bic.w	r3, r3, #7
 80032f0:	3308      	adds	r3, #8
 80032f2:	9303      	str	r3, [sp, #12]
 80032f4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80032f6:	4433      	add	r3, r6
 80032f8:	9309      	str	r3, [sp, #36]	@ 0x24
 80032fa:	e76a      	b.n	80031d2 <_svfiprintf_r+0x52>
 80032fc:	fb0c 3202 	mla	r2, ip, r2, r3
 8003300:	460c      	mov	r4, r1
 8003302:	2001      	movs	r0, #1
 8003304:	e7a8      	b.n	8003258 <_svfiprintf_r+0xd8>
 8003306:	2300      	movs	r3, #0
 8003308:	3401      	adds	r4, #1
 800330a:	9305      	str	r3, [sp, #20]
 800330c:	4619      	mov	r1, r3
 800330e:	f04f 0c0a 	mov.w	ip, #10
 8003312:	4620      	mov	r0, r4
 8003314:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003318:	3a30      	subs	r2, #48	@ 0x30
 800331a:	2a09      	cmp	r2, #9
 800331c:	d903      	bls.n	8003326 <_svfiprintf_r+0x1a6>
 800331e:	2b00      	cmp	r3, #0
 8003320:	d0c6      	beq.n	80032b0 <_svfiprintf_r+0x130>
 8003322:	9105      	str	r1, [sp, #20]
 8003324:	e7c4      	b.n	80032b0 <_svfiprintf_r+0x130>
 8003326:	fb0c 2101 	mla	r1, ip, r1, r2
 800332a:	4604      	mov	r4, r0
 800332c:	2301      	movs	r3, #1
 800332e:	e7f0      	b.n	8003312 <_svfiprintf_r+0x192>
 8003330:	ab03      	add	r3, sp, #12
 8003332:	9300      	str	r3, [sp, #0]
 8003334:	462a      	mov	r2, r5
 8003336:	4b0e      	ldr	r3, [pc, #56]	@ (8003370 <_svfiprintf_r+0x1f0>)
 8003338:	a904      	add	r1, sp, #16
 800333a:	4638      	mov	r0, r7
 800333c:	f3af 8000 	nop.w
 8003340:	1c42      	adds	r2, r0, #1
 8003342:	4606      	mov	r6, r0
 8003344:	d1d6      	bne.n	80032f4 <_svfiprintf_r+0x174>
 8003346:	89ab      	ldrh	r3, [r5, #12]
 8003348:	065b      	lsls	r3, r3, #25
 800334a:	f53f af2d 	bmi.w	80031a8 <_svfiprintf_r+0x28>
 800334e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8003350:	e72c      	b.n	80031ac <_svfiprintf_r+0x2c>
 8003352:	ab03      	add	r3, sp, #12
 8003354:	9300      	str	r3, [sp, #0]
 8003356:	462a      	mov	r2, r5
 8003358:	4b05      	ldr	r3, [pc, #20]	@ (8003370 <_svfiprintf_r+0x1f0>)
 800335a:	a904      	add	r1, sp, #16
 800335c:	4638      	mov	r0, r7
 800335e:	f000 f879 	bl	8003454 <_printf_i>
 8003362:	e7ed      	b.n	8003340 <_svfiprintf_r+0x1c0>
 8003364:	080037e4 	.word	0x080037e4
 8003368:	080037ee 	.word	0x080037ee
 800336c:	00000000 	.word	0x00000000
 8003370:	080030c9 	.word	0x080030c9
 8003374:	080037ea 	.word	0x080037ea

08003378 <_printf_common>:
 8003378:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800337c:	4616      	mov	r6, r2
 800337e:	4698      	mov	r8, r3
 8003380:	688a      	ldr	r2, [r1, #8]
 8003382:	690b      	ldr	r3, [r1, #16]
 8003384:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003388:	4293      	cmp	r3, r2
 800338a:	bfb8      	it	lt
 800338c:	4613      	movlt	r3, r2
 800338e:	6033      	str	r3, [r6, #0]
 8003390:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8003394:	4607      	mov	r7, r0
 8003396:	460c      	mov	r4, r1
 8003398:	b10a      	cbz	r2, 800339e <_printf_common+0x26>
 800339a:	3301      	adds	r3, #1
 800339c:	6033      	str	r3, [r6, #0]
 800339e:	6823      	ldr	r3, [r4, #0]
 80033a0:	0699      	lsls	r1, r3, #26
 80033a2:	bf42      	ittt	mi
 80033a4:	6833      	ldrmi	r3, [r6, #0]
 80033a6:	3302      	addmi	r3, #2
 80033a8:	6033      	strmi	r3, [r6, #0]
 80033aa:	6825      	ldr	r5, [r4, #0]
 80033ac:	f015 0506 	ands.w	r5, r5, #6
 80033b0:	d106      	bne.n	80033c0 <_printf_common+0x48>
 80033b2:	f104 0a19 	add.w	sl, r4, #25
 80033b6:	68e3      	ldr	r3, [r4, #12]
 80033b8:	6832      	ldr	r2, [r6, #0]
 80033ba:	1a9b      	subs	r3, r3, r2
 80033bc:	42ab      	cmp	r3, r5
 80033be:	dc26      	bgt.n	800340e <_printf_common+0x96>
 80033c0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80033c4:	6822      	ldr	r2, [r4, #0]
 80033c6:	3b00      	subs	r3, #0
 80033c8:	bf18      	it	ne
 80033ca:	2301      	movne	r3, #1
 80033cc:	0692      	lsls	r2, r2, #26
 80033ce:	d42b      	bmi.n	8003428 <_printf_common+0xb0>
 80033d0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80033d4:	4641      	mov	r1, r8
 80033d6:	4638      	mov	r0, r7
 80033d8:	47c8      	blx	r9
 80033da:	3001      	adds	r0, #1
 80033dc:	d01e      	beq.n	800341c <_printf_common+0xa4>
 80033de:	6823      	ldr	r3, [r4, #0]
 80033e0:	6922      	ldr	r2, [r4, #16]
 80033e2:	f003 0306 	and.w	r3, r3, #6
 80033e6:	2b04      	cmp	r3, #4
 80033e8:	bf02      	ittt	eq
 80033ea:	68e5      	ldreq	r5, [r4, #12]
 80033ec:	6833      	ldreq	r3, [r6, #0]
 80033ee:	1aed      	subeq	r5, r5, r3
 80033f0:	68a3      	ldr	r3, [r4, #8]
 80033f2:	bf0c      	ite	eq
 80033f4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80033f8:	2500      	movne	r5, #0
 80033fa:	4293      	cmp	r3, r2
 80033fc:	bfc4      	itt	gt
 80033fe:	1a9b      	subgt	r3, r3, r2
 8003400:	18ed      	addgt	r5, r5, r3
 8003402:	2600      	movs	r6, #0
 8003404:	341a      	adds	r4, #26
 8003406:	42b5      	cmp	r5, r6
 8003408:	d11a      	bne.n	8003440 <_printf_common+0xc8>
 800340a:	2000      	movs	r0, #0
 800340c:	e008      	b.n	8003420 <_printf_common+0xa8>
 800340e:	2301      	movs	r3, #1
 8003410:	4652      	mov	r2, sl
 8003412:	4641      	mov	r1, r8
 8003414:	4638      	mov	r0, r7
 8003416:	47c8      	blx	r9
 8003418:	3001      	adds	r0, #1
 800341a:	d103      	bne.n	8003424 <_printf_common+0xac>
 800341c:	f04f 30ff 	mov.w	r0, #4294967295
 8003420:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003424:	3501      	adds	r5, #1
 8003426:	e7c6      	b.n	80033b6 <_printf_common+0x3e>
 8003428:	18e1      	adds	r1, r4, r3
 800342a:	1c5a      	adds	r2, r3, #1
 800342c:	2030      	movs	r0, #48	@ 0x30
 800342e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8003432:	4422      	add	r2, r4
 8003434:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8003438:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800343c:	3302      	adds	r3, #2
 800343e:	e7c7      	b.n	80033d0 <_printf_common+0x58>
 8003440:	2301      	movs	r3, #1
 8003442:	4622      	mov	r2, r4
 8003444:	4641      	mov	r1, r8
 8003446:	4638      	mov	r0, r7
 8003448:	47c8      	blx	r9
 800344a:	3001      	adds	r0, #1
 800344c:	d0e6      	beq.n	800341c <_printf_common+0xa4>
 800344e:	3601      	adds	r6, #1
 8003450:	e7d9      	b.n	8003406 <_printf_common+0x8e>
	...

08003454 <_printf_i>:
 8003454:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003458:	7e0f      	ldrb	r7, [r1, #24]
 800345a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800345c:	2f78      	cmp	r7, #120	@ 0x78
 800345e:	4691      	mov	r9, r2
 8003460:	4680      	mov	r8, r0
 8003462:	460c      	mov	r4, r1
 8003464:	469a      	mov	sl, r3
 8003466:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800346a:	d807      	bhi.n	800347c <_printf_i+0x28>
 800346c:	2f62      	cmp	r7, #98	@ 0x62
 800346e:	d80a      	bhi.n	8003486 <_printf_i+0x32>
 8003470:	2f00      	cmp	r7, #0
 8003472:	f000 80d2 	beq.w	800361a <_printf_i+0x1c6>
 8003476:	2f58      	cmp	r7, #88	@ 0x58
 8003478:	f000 80b9 	beq.w	80035ee <_printf_i+0x19a>
 800347c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003480:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8003484:	e03a      	b.n	80034fc <_printf_i+0xa8>
 8003486:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800348a:	2b15      	cmp	r3, #21
 800348c:	d8f6      	bhi.n	800347c <_printf_i+0x28>
 800348e:	a101      	add	r1, pc, #4	@ (adr r1, 8003494 <_printf_i+0x40>)
 8003490:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003494:	080034ed 	.word	0x080034ed
 8003498:	08003501 	.word	0x08003501
 800349c:	0800347d 	.word	0x0800347d
 80034a0:	0800347d 	.word	0x0800347d
 80034a4:	0800347d 	.word	0x0800347d
 80034a8:	0800347d 	.word	0x0800347d
 80034ac:	08003501 	.word	0x08003501
 80034b0:	0800347d 	.word	0x0800347d
 80034b4:	0800347d 	.word	0x0800347d
 80034b8:	0800347d 	.word	0x0800347d
 80034bc:	0800347d 	.word	0x0800347d
 80034c0:	08003601 	.word	0x08003601
 80034c4:	0800352b 	.word	0x0800352b
 80034c8:	080035bb 	.word	0x080035bb
 80034cc:	0800347d 	.word	0x0800347d
 80034d0:	0800347d 	.word	0x0800347d
 80034d4:	08003623 	.word	0x08003623
 80034d8:	0800347d 	.word	0x0800347d
 80034dc:	0800352b 	.word	0x0800352b
 80034e0:	0800347d 	.word	0x0800347d
 80034e4:	0800347d 	.word	0x0800347d
 80034e8:	080035c3 	.word	0x080035c3
 80034ec:	6833      	ldr	r3, [r6, #0]
 80034ee:	1d1a      	adds	r2, r3, #4
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	6032      	str	r2, [r6, #0]
 80034f4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80034f8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80034fc:	2301      	movs	r3, #1
 80034fe:	e09d      	b.n	800363c <_printf_i+0x1e8>
 8003500:	6833      	ldr	r3, [r6, #0]
 8003502:	6820      	ldr	r0, [r4, #0]
 8003504:	1d19      	adds	r1, r3, #4
 8003506:	6031      	str	r1, [r6, #0]
 8003508:	0606      	lsls	r6, r0, #24
 800350a:	d501      	bpl.n	8003510 <_printf_i+0xbc>
 800350c:	681d      	ldr	r5, [r3, #0]
 800350e:	e003      	b.n	8003518 <_printf_i+0xc4>
 8003510:	0645      	lsls	r5, r0, #25
 8003512:	d5fb      	bpl.n	800350c <_printf_i+0xb8>
 8003514:	f9b3 5000 	ldrsh.w	r5, [r3]
 8003518:	2d00      	cmp	r5, #0
 800351a:	da03      	bge.n	8003524 <_printf_i+0xd0>
 800351c:	232d      	movs	r3, #45	@ 0x2d
 800351e:	426d      	negs	r5, r5
 8003520:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003524:	4859      	ldr	r0, [pc, #356]	@ (800368c <_printf_i+0x238>)
 8003526:	230a      	movs	r3, #10
 8003528:	e011      	b.n	800354e <_printf_i+0xfa>
 800352a:	6821      	ldr	r1, [r4, #0]
 800352c:	6833      	ldr	r3, [r6, #0]
 800352e:	0608      	lsls	r0, r1, #24
 8003530:	f853 5b04 	ldr.w	r5, [r3], #4
 8003534:	d402      	bmi.n	800353c <_printf_i+0xe8>
 8003536:	0649      	lsls	r1, r1, #25
 8003538:	bf48      	it	mi
 800353a:	b2ad      	uxthmi	r5, r5
 800353c:	2f6f      	cmp	r7, #111	@ 0x6f
 800353e:	4853      	ldr	r0, [pc, #332]	@ (800368c <_printf_i+0x238>)
 8003540:	6033      	str	r3, [r6, #0]
 8003542:	bf14      	ite	ne
 8003544:	230a      	movne	r3, #10
 8003546:	2308      	moveq	r3, #8
 8003548:	2100      	movs	r1, #0
 800354a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800354e:	6866      	ldr	r6, [r4, #4]
 8003550:	60a6      	str	r6, [r4, #8]
 8003552:	2e00      	cmp	r6, #0
 8003554:	bfa2      	ittt	ge
 8003556:	6821      	ldrge	r1, [r4, #0]
 8003558:	f021 0104 	bicge.w	r1, r1, #4
 800355c:	6021      	strge	r1, [r4, #0]
 800355e:	b90d      	cbnz	r5, 8003564 <_printf_i+0x110>
 8003560:	2e00      	cmp	r6, #0
 8003562:	d04b      	beq.n	80035fc <_printf_i+0x1a8>
 8003564:	4616      	mov	r6, r2
 8003566:	fbb5 f1f3 	udiv	r1, r5, r3
 800356a:	fb03 5711 	mls	r7, r3, r1, r5
 800356e:	5dc7      	ldrb	r7, [r0, r7]
 8003570:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003574:	462f      	mov	r7, r5
 8003576:	42bb      	cmp	r3, r7
 8003578:	460d      	mov	r5, r1
 800357a:	d9f4      	bls.n	8003566 <_printf_i+0x112>
 800357c:	2b08      	cmp	r3, #8
 800357e:	d10b      	bne.n	8003598 <_printf_i+0x144>
 8003580:	6823      	ldr	r3, [r4, #0]
 8003582:	07df      	lsls	r7, r3, #31
 8003584:	d508      	bpl.n	8003598 <_printf_i+0x144>
 8003586:	6923      	ldr	r3, [r4, #16]
 8003588:	6861      	ldr	r1, [r4, #4]
 800358a:	4299      	cmp	r1, r3
 800358c:	bfde      	ittt	le
 800358e:	2330      	movle	r3, #48	@ 0x30
 8003590:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003594:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003598:	1b92      	subs	r2, r2, r6
 800359a:	6122      	str	r2, [r4, #16]
 800359c:	f8cd a000 	str.w	sl, [sp]
 80035a0:	464b      	mov	r3, r9
 80035a2:	aa03      	add	r2, sp, #12
 80035a4:	4621      	mov	r1, r4
 80035a6:	4640      	mov	r0, r8
 80035a8:	f7ff fee6 	bl	8003378 <_printf_common>
 80035ac:	3001      	adds	r0, #1
 80035ae:	d14a      	bne.n	8003646 <_printf_i+0x1f2>
 80035b0:	f04f 30ff 	mov.w	r0, #4294967295
 80035b4:	b004      	add	sp, #16
 80035b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80035ba:	6823      	ldr	r3, [r4, #0]
 80035bc:	f043 0320 	orr.w	r3, r3, #32
 80035c0:	6023      	str	r3, [r4, #0]
 80035c2:	4833      	ldr	r0, [pc, #204]	@ (8003690 <_printf_i+0x23c>)
 80035c4:	2778      	movs	r7, #120	@ 0x78
 80035c6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80035ca:	6823      	ldr	r3, [r4, #0]
 80035cc:	6831      	ldr	r1, [r6, #0]
 80035ce:	061f      	lsls	r7, r3, #24
 80035d0:	f851 5b04 	ldr.w	r5, [r1], #4
 80035d4:	d402      	bmi.n	80035dc <_printf_i+0x188>
 80035d6:	065f      	lsls	r7, r3, #25
 80035d8:	bf48      	it	mi
 80035da:	b2ad      	uxthmi	r5, r5
 80035dc:	6031      	str	r1, [r6, #0]
 80035de:	07d9      	lsls	r1, r3, #31
 80035e0:	bf44      	itt	mi
 80035e2:	f043 0320 	orrmi.w	r3, r3, #32
 80035e6:	6023      	strmi	r3, [r4, #0]
 80035e8:	b11d      	cbz	r5, 80035f2 <_printf_i+0x19e>
 80035ea:	2310      	movs	r3, #16
 80035ec:	e7ac      	b.n	8003548 <_printf_i+0xf4>
 80035ee:	4827      	ldr	r0, [pc, #156]	@ (800368c <_printf_i+0x238>)
 80035f0:	e7e9      	b.n	80035c6 <_printf_i+0x172>
 80035f2:	6823      	ldr	r3, [r4, #0]
 80035f4:	f023 0320 	bic.w	r3, r3, #32
 80035f8:	6023      	str	r3, [r4, #0]
 80035fa:	e7f6      	b.n	80035ea <_printf_i+0x196>
 80035fc:	4616      	mov	r6, r2
 80035fe:	e7bd      	b.n	800357c <_printf_i+0x128>
 8003600:	6833      	ldr	r3, [r6, #0]
 8003602:	6825      	ldr	r5, [r4, #0]
 8003604:	6961      	ldr	r1, [r4, #20]
 8003606:	1d18      	adds	r0, r3, #4
 8003608:	6030      	str	r0, [r6, #0]
 800360a:	062e      	lsls	r6, r5, #24
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	d501      	bpl.n	8003614 <_printf_i+0x1c0>
 8003610:	6019      	str	r1, [r3, #0]
 8003612:	e002      	b.n	800361a <_printf_i+0x1c6>
 8003614:	0668      	lsls	r0, r5, #25
 8003616:	d5fb      	bpl.n	8003610 <_printf_i+0x1bc>
 8003618:	8019      	strh	r1, [r3, #0]
 800361a:	2300      	movs	r3, #0
 800361c:	6123      	str	r3, [r4, #16]
 800361e:	4616      	mov	r6, r2
 8003620:	e7bc      	b.n	800359c <_printf_i+0x148>
 8003622:	6833      	ldr	r3, [r6, #0]
 8003624:	1d1a      	adds	r2, r3, #4
 8003626:	6032      	str	r2, [r6, #0]
 8003628:	681e      	ldr	r6, [r3, #0]
 800362a:	6862      	ldr	r2, [r4, #4]
 800362c:	2100      	movs	r1, #0
 800362e:	4630      	mov	r0, r6
 8003630:	f7fc fdde 	bl	80001f0 <memchr>
 8003634:	b108      	cbz	r0, 800363a <_printf_i+0x1e6>
 8003636:	1b80      	subs	r0, r0, r6
 8003638:	6060      	str	r0, [r4, #4]
 800363a:	6863      	ldr	r3, [r4, #4]
 800363c:	6123      	str	r3, [r4, #16]
 800363e:	2300      	movs	r3, #0
 8003640:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003644:	e7aa      	b.n	800359c <_printf_i+0x148>
 8003646:	6923      	ldr	r3, [r4, #16]
 8003648:	4632      	mov	r2, r6
 800364a:	4649      	mov	r1, r9
 800364c:	4640      	mov	r0, r8
 800364e:	47d0      	blx	sl
 8003650:	3001      	adds	r0, #1
 8003652:	d0ad      	beq.n	80035b0 <_printf_i+0x15c>
 8003654:	6823      	ldr	r3, [r4, #0]
 8003656:	079b      	lsls	r3, r3, #30
 8003658:	d413      	bmi.n	8003682 <_printf_i+0x22e>
 800365a:	68e0      	ldr	r0, [r4, #12]
 800365c:	9b03      	ldr	r3, [sp, #12]
 800365e:	4298      	cmp	r0, r3
 8003660:	bfb8      	it	lt
 8003662:	4618      	movlt	r0, r3
 8003664:	e7a6      	b.n	80035b4 <_printf_i+0x160>
 8003666:	2301      	movs	r3, #1
 8003668:	4632      	mov	r2, r6
 800366a:	4649      	mov	r1, r9
 800366c:	4640      	mov	r0, r8
 800366e:	47d0      	blx	sl
 8003670:	3001      	adds	r0, #1
 8003672:	d09d      	beq.n	80035b0 <_printf_i+0x15c>
 8003674:	3501      	adds	r5, #1
 8003676:	68e3      	ldr	r3, [r4, #12]
 8003678:	9903      	ldr	r1, [sp, #12]
 800367a:	1a5b      	subs	r3, r3, r1
 800367c:	42ab      	cmp	r3, r5
 800367e:	dcf2      	bgt.n	8003666 <_printf_i+0x212>
 8003680:	e7eb      	b.n	800365a <_printf_i+0x206>
 8003682:	2500      	movs	r5, #0
 8003684:	f104 0619 	add.w	r6, r4, #25
 8003688:	e7f5      	b.n	8003676 <_printf_i+0x222>
 800368a:	bf00      	nop
 800368c:	080037f5 	.word	0x080037f5
 8003690:	08003806 	.word	0x08003806

08003694 <memmove>:
 8003694:	4288      	cmp	r0, r1
 8003696:	b510      	push	{r4, lr}
 8003698:	eb01 0402 	add.w	r4, r1, r2
 800369c:	d902      	bls.n	80036a4 <memmove+0x10>
 800369e:	4284      	cmp	r4, r0
 80036a0:	4623      	mov	r3, r4
 80036a2:	d807      	bhi.n	80036b4 <memmove+0x20>
 80036a4:	1e43      	subs	r3, r0, #1
 80036a6:	42a1      	cmp	r1, r4
 80036a8:	d008      	beq.n	80036bc <memmove+0x28>
 80036aa:	f811 2b01 	ldrb.w	r2, [r1], #1
 80036ae:	f803 2f01 	strb.w	r2, [r3, #1]!
 80036b2:	e7f8      	b.n	80036a6 <memmove+0x12>
 80036b4:	4402      	add	r2, r0
 80036b6:	4601      	mov	r1, r0
 80036b8:	428a      	cmp	r2, r1
 80036ba:	d100      	bne.n	80036be <memmove+0x2a>
 80036bc:	bd10      	pop	{r4, pc}
 80036be:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80036c2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80036c6:	e7f7      	b.n	80036b8 <memmove+0x24>

080036c8 <_sbrk_r>:
 80036c8:	b538      	push	{r3, r4, r5, lr}
 80036ca:	4d06      	ldr	r5, [pc, #24]	@ (80036e4 <_sbrk_r+0x1c>)
 80036cc:	2300      	movs	r3, #0
 80036ce:	4604      	mov	r4, r0
 80036d0:	4608      	mov	r0, r1
 80036d2:	602b      	str	r3, [r5, #0]
 80036d4:	f7fd fa08 	bl	8000ae8 <_sbrk>
 80036d8:	1c43      	adds	r3, r0, #1
 80036da:	d102      	bne.n	80036e2 <_sbrk_r+0x1a>
 80036dc:	682b      	ldr	r3, [r5, #0]
 80036de:	b103      	cbz	r3, 80036e2 <_sbrk_r+0x1a>
 80036e0:	6023      	str	r3, [r4, #0]
 80036e2:	bd38      	pop	{r3, r4, r5, pc}
 80036e4:	20000220 	.word	0x20000220

080036e8 <memcpy>:
 80036e8:	440a      	add	r2, r1
 80036ea:	4291      	cmp	r1, r2
 80036ec:	f100 33ff 	add.w	r3, r0, #4294967295
 80036f0:	d100      	bne.n	80036f4 <memcpy+0xc>
 80036f2:	4770      	bx	lr
 80036f4:	b510      	push	{r4, lr}
 80036f6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80036fa:	f803 4f01 	strb.w	r4, [r3, #1]!
 80036fe:	4291      	cmp	r1, r2
 8003700:	d1f9      	bne.n	80036f6 <memcpy+0xe>
 8003702:	bd10      	pop	{r4, pc}

08003704 <_realloc_r>:
 8003704:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003708:	4680      	mov	r8, r0
 800370a:	4615      	mov	r5, r2
 800370c:	460c      	mov	r4, r1
 800370e:	b921      	cbnz	r1, 800371a <_realloc_r+0x16>
 8003710:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003714:	4611      	mov	r1, r2
 8003716:	f7ff bc4b 	b.w	8002fb0 <_malloc_r>
 800371a:	b92a      	cbnz	r2, 8003728 <_realloc_r+0x24>
 800371c:	f7ff fbdc 	bl	8002ed8 <_free_r>
 8003720:	2400      	movs	r4, #0
 8003722:	4620      	mov	r0, r4
 8003724:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003728:	f000 f81a 	bl	8003760 <_malloc_usable_size_r>
 800372c:	4285      	cmp	r5, r0
 800372e:	4606      	mov	r6, r0
 8003730:	d802      	bhi.n	8003738 <_realloc_r+0x34>
 8003732:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8003736:	d8f4      	bhi.n	8003722 <_realloc_r+0x1e>
 8003738:	4629      	mov	r1, r5
 800373a:	4640      	mov	r0, r8
 800373c:	f7ff fc38 	bl	8002fb0 <_malloc_r>
 8003740:	4607      	mov	r7, r0
 8003742:	2800      	cmp	r0, #0
 8003744:	d0ec      	beq.n	8003720 <_realloc_r+0x1c>
 8003746:	42b5      	cmp	r5, r6
 8003748:	462a      	mov	r2, r5
 800374a:	4621      	mov	r1, r4
 800374c:	bf28      	it	cs
 800374e:	4632      	movcs	r2, r6
 8003750:	f7ff ffca 	bl	80036e8 <memcpy>
 8003754:	4621      	mov	r1, r4
 8003756:	4640      	mov	r0, r8
 8003758:	f7ff fbbe 	bl	8002ed8 <_free_r>
 800375c:	463c      	mov	r4, r7
 800375e:	e7e0      	b.n	8003722 <_realloc_r+0x1e>

08003760 <_malloc_usable_size_r>:
 8003760:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003764:	1f18      	subs	r0, r3, #4
 8003766:	2b00      	cmp	r3, #0
 8003768:	bfbc      	itt	lt
 800376a:	580b      	ldrlt	r3, [r1, r0]
 800376c:	18c0      	addlt	r0, r0, r3
 800376e:	4770      	bx	lr

08003770 <_init>:
 8003770:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003772:	bf00      	nop
 8003774:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003776:	bc08      	pop	{r3}
 8003778:	469e      	mov	lr, r3
 800377a:	4770      	bx	lr

0800377c <_fini>:
 800377c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800377e:	bf00      	nop
 8003780:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003782:	bc08      	pop	{r3}
 8003784:	469e      	mov	lr, r3
 8003786:	4770      	bx	lr
