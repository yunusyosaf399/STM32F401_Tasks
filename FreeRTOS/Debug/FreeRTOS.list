
FreeRTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000057d4  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000088  08005974  08005974  00006974  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080059fc  080059fc  00007010  2**0
                  CONTENTS
  4 .ARM          00000008  080059fc  080059fc  000069fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005a04  08005a04  00007010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005a04  08005a04  00006a04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005a08  08005a08  00006a08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  08005a0c  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004a08  20000010  08005a1c  00007010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004a18  08005a1c  00007a18  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00007010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016dfb  00000000  00000000  00007040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003308  00000000  00000000  0001de3b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001450  00000000  00000000  00021148  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000fd1  00000000  00000000  00022598  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00002f8a  00000000  00000000  00023569  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001630a  00000000  00000000  000264f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00097589  00000000  00000000  0003c7fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d3d86  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000055e0  00000000  00000000  000d3dcc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000064  00000000  00000000  000d93ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000010 	.word	0x20000010
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800595c 	.word	0x0800595c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000014 	.word	0x20000014
 80001dc:	0800595c 	.word	0x0800595c

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295
 80001f4:	f000 b96a 	b.w	80004cc <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9d08      	ldr	r5, [sp, #32]
 8000216:	460c      	mov	r4, r1
 8000218:	2b00      	cmp	r3, #0
 800021a:	d14e      	bne.n	80002ba <__udivmoddi4+0xaa>
 800021c:	4694      	mov	ip, r2
 800021e:	458c      	cmp	ip, r1
 8000220:	4686      	mov	lr, r0
 8000222:	fab2 f282 	clz	r2, r2
 8000226:	d962      	bls.n	80002ee <__udivmoddi4+0xde>
 8000228:	b14a      	cbz	r2, 800023e <__udivmoddi4+0x2e>
 800022a:	f1c2 0320 	rsb	r3, r2, #32
 800022e:	4091      	lsls	r1, r2
 8000230:	fa20 f303 	lsr.w	r3, r0, r3
 8000234:	fa0c fc02 	lsl.w	ip, ip, r2
 8000238:	4319      	orrs	r1, r3
 800023a:	fa00 fe02 	lsl.w	lr, r0, r2
 800023e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000242:	fa1f f68c 	uxth.w	r6, ip
 8000246:	fbb1 f4f7 	udiv	r4, r1, r7
 800024a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800024e:	fb07 1114 	mls	r1, r7, r4, r1
 8000252:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000256:	fb04 f106 	mul.w	r1, r4, r6
 800025a:	4299      	cmp	r1, r3
 800025c:	d90a      	bls.n	8000274 <__udivmoddi4+0x64>
 800025e:	eb1c 0303 	adds.w	r3, ip, r3
 8000262:	f104 30ff 	add.w	r0, r4, #4294967295
 8000266:	f080 8112 	bcs.w	800048e <__udivmoddi4+0x27e>
 800026a:	4299      	cmp	r1, r3
 800026c:	f240 810f 	bls.w	800048e <__udivmoddi4+0x27e>
 8000270:	3c02      	subs	r4, #2
 8000272:	4463      	add	r3, ip
 8000274:	1a59      	subs	r1, r3, r1
 8000276:	fa1f f38e 	uxth.w	r3, lr
 800027a:	fbb1 f0f7 	udiv	r0, r1, r7
 800027e:	fb07 1110 	mls	r1, r7, r0, r1
 8000282:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000286:	fb00 f606 	mul.w	r6, r0, r6
 800028a:	429e      	cmp	r6, r3
 800028c:	d90a      	bls.n	80002a4 <__udivmoddi4+0x94>
 800028e:	eb1c 0303 	adds.w	r3, ip, r3
 8000292:	f100 31ff 	add.w	r1, r0, #4294967295
 8000296:	f080 80fc 	bcs.w	8000492 <__udivmoddi4+0x282>
 800029a:	429e      	cmp	r6, r3
 800029c:	f240 80f9 	bls.w	8000492 <__udivmoddi4+0x282>
 80002a0:	4463      	add	r3, ip
 80002a2:	3802      	subs	r0, #2
 80002a4:	1b9b      	subs	r3, r3, r6
 80002a6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002aa:	2100      	movs	r1, #0
 80002ac:	b11d      	cbz	r5, 80002b6 <__udivmoddi4+0xa6>
 80002ae:	40d3      	lsrs	r3, r2
 80002b0:	2200      	movs	r2, #0
 80002b2:	e9c5 3200 	strd	r3, r2, [r5]
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	428b      	cmp	r3, r1
 80002bc:	d905      	bls.n	80002ca <__udivmoddi4+0xba>
 80002be:	b10d      	cbz	r5, 80002c4 <__udivmoddi4+0xb4>
 80002c0:	e9c5 0100 	strd	r0, r1, [r5]
 80002c4:	2100      	movs	r1, #0
 80002c6:	4608      	mov	r0, r1
 80002c8:	e7f5      	b.n	80002b6 <__udivmoddi4+0xa6>
 80002ca:	fab3 f183 	clz	r1, r3
 80002ce:	2900      	cmp	r1, #0
 80002d0:	d146      	bne.n	8000360 <__udivmoddi4+0x150>
 80002d2:	42a3      	cmp	r3, r4
 80002d4:	d302      	bcc.n	80002dc <__udivmoddi4+0xcc>
 80002d6:	4290      	cmp	r0, r2
 80002d8:	f0c0 80f0 	bcc.w	80004bc <__udivmoddi4+0x2ac>
 80002dc:	1a86      	subs	r6, r0, r2
 80002de:	eb64 0303 	sbc.w	r3, r4, r3
 80002e2:	2001      	movs	r0, #1
 80002e4:	2d00      	cmp	r5, #0
 80002e6:	d0e6      	beq.n	80002b6 <__udivmoddi4+0xa6>
 80002e8:	e9c5 6300 	strd	r6, r3, [r5]
 80002ec:	e7e3      	b.n	80002b6 <__udivmoddi4+0xa6>
 80002ee:	2a00      	cmp	r2, #0
 80002f0:	f040 8090 	bne.w	8000414 <__udivmoddi4+0x204>
 80002f4:	eba1 040c 	sub.w	r4, r1, ip
 80002f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002fc:	fa1f f78c 	uxth.w	r7, ip
 8000300:	2101      	movs	r1, #1
 8000302:	fbb4 f6f8 	udiv	r6, r4, r8
 8000306:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800030a:	fb08 4416 	mls	r4, r8, r6, r4
 800030e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000312:	fb07 f006 	mul.w	r0, r7, r6
 8000316:	4298      	cmp	r0, r3
 8000318:	d908      	bls.n	800032c <__udivmoddi4+0x11c>
 800031a:	eb1c 0303 	adds.w	r3, ip, r3
 800031e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x11a>
 8000324:	4298      	cmp	r0, r3
 8000326:	f200 80cd 	bhi.w	80004c4 <__udivmoddi4+0x2b4>
 800032a:	4626      	mov	r6, r4
 800032c:	1a1c      	subs	r4, r3, r0
 800032e:	fa1f f38e 	uxth.w	r3, lr
 8000332:	fbb4 f0f8 	udiv	r0, r4, r8
 8000336:	fb08 4410 	mls	r4, r8, r0, r4
 800033a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800033e:	fb00 f707 	mul.w	r7, r0, r7
 8000342:	429f      	cmp	r7, r3
 8000344:	d908      	bls.n	8000358 <__udivmoddi4+0x148>
 8000346:	eb1c 0303 	adds.w	r3, ip, r3
 800034a:	f100 34ff 	add.w	r4, r0, #4294967295
 800034e:	d202      	bcs.n	8000356 <__udivmoddi4+0x146>
 8000350:	429f      	cmp	r7, r3
 8000352:	f200 80b0 	bhi.w	80004b6 <__udivmoddi4+0x2a6>
 8000356:	4620      	mov	r0, r4
 8000358:	1bdb      	subs	r3, r3, r7
 800035a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800035e:	e7a5      	b.n	80002ac <__udivmoddi4+0x9c>
 8000360:	f1c1 0620 	rsb	r6, r1, #32
 8000364:	408b      	lsls	r3, r1
 8000366:	fa22 f706 	lsr.w	r7, r2, r6
 800036a:	431f      	orrs	r7, r3
 800036c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000370:	fa04 f301 	lsl.w	r3, r4, r1
 8000374:	ea43 030c 	orr.w	r3, r3, ip
 8000378:	40f4      	lsrs	r4, r6
 800037a:	fa00 f801 	lsl.w	r8, r0, r1
 800037e:	0c38      	lsrs	r0, r7, #16
 8000380:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000384:	fbb4 fef0 	udiv	lr, r4, r0
 8000388:	fa1f fc87 	uxth.w	ip, r7
 800038c:	fb00 441e 	mls	r4, r0, lr, r4
 8000390:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000394:	fb0e f90c 	mul.w	r9, lr, ip
 8000398:	45a1      	cmp	r9, r4
 800039a:	fa02 f201 	lsl.w	r2, r2, r1
 800039e:	d90a      	bls.n	80003b6 <__udivmoddi4+0x1a6>
 80003a0:	193c      	adds	r4, r7, r4
 80003a2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003a6:	f080 8084 	bcs.w	80004b2 <__udivmoddi4+0x2a2>
 80003aa:	45a1      	cmp	r9, r4
 80003ac:	f240 8081 	bls.w	80004b2 <__udivmoddi4+0x2a2>
 80003b0:	f1ae 0e02 	sub.w	lr, lr, #2
 80003b4:	443c      	add	r4, r7
 80003b6:	eba4 0409 	sub.w	r4, r4, r9
 80003ba:	fa1f f983 	uxth.w	r9, r3
 80003be:	fbb4 f3f0 	udiv	r3, r4, r0
 80003c2:	fb00 4413 	mls	r4, r0, r3, r4
 80003c6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003ca:	fb03 fc0c 	mul.w	ip, r3, ip
 80003ce:	45a4      	cmp	ip, r4
 80003d0:	d907      	bls.n	80003e2 <__udivmoddi4+0x1d2>
 80003d2:	193c      	adds	r4, r7, r4
 80003d4:	f103 30ff 	add.w	r0, r3, #4294967295
 80003d8:	d267      	bcs.n	80004aa <__udivmoddi4+0x29a>
 80003da:	45a4      	cmp	ip, r4
 80003dc:	d965      	bls.n	80004aa <__udivmoddi4+0x29a>
 80003de:	3b02      	subs	r3, #2
 80003e0:	443c      	add	r4, r7
 80003e2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003e6:	fba0 9302 	umull	r9, r3, r0, r2
 80003ea:	eba4 040c 	sub.w	r4, r4, ip
 80003ee:	429c      	cmp	r4, r3
 80003f0:	46ce      	mov	lr, r9
 80003f2:	469c      	mov	ip, r3
 80003f4:	d351      	bcc.n	800049a <__udivmoddi4+0x28a>
 80003f6:	d04e      	beq.n	8000496 <__udivmoddi4+0x286>
 80003f8:	b155      	cbz	r5, 8000410 <__udivmoddi4+0x200>
 80003fa:	ebb8 030e 	subs.w	r3, r8, lr
 80003fe:	eb64 040c 	sbc.w	r4, r4, ip
 8000402:	fa04 f606 	lsl.w	r6, r4, r6
 8000406:	40cb      	lsrs	r3, r1
 8000408:	431e      	orrs	r6, r3
 800040a:	40cc      	lsrs	r4, r1
 800040c:	e9c5 6400 	strd	r6, r4, [r5]
 8000410:	2100      	movs	r1, #0
 8000412:	e750      	b.n	80002b6 <__udivmoddi4+0xa6>
 8000414:	f1c2 0320 	rsb	r3, r2, #32
 8000418:	fa20 f103 	lsr.w	r1, r0, r3
 800041c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000420:	fa24 f303 	lsr.w	r3, r4, r3
 8000424:	4094      	lsls	r4, r2
 8000426:	430c      	orrs	r4, r1
 8000428:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800042c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000430:	fa1f f78c 	uxth.w	r7, ip
 8000434:	fbb3 f0f8 	udiv	r0, r3, r8
 8000438:	fb08 3110 	mls	r1, r8, r0, r3
 800043c:	0c23      	lsrs	r3, r4, #16
 800043e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000442:	fb00 f107 	mul.w	r1, r0, r7
 8000446:	4299      	cmp	r1, r3
 8000448:	d908      	bls.n	800045c <__udivmoddi4+0x24c>
 800044a:	eb1c 0303 	adds.w	r3, ip, r3
 800044e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000452:	d22c      	bcs.n	80004ae <__udivmoddi4+0x29e>
 8000454:	4299      	cmp	r1, r3
 8000456:	d92a      	bls.n	80004ae <__udivmoddi4+0x29e>
 8000458:	3802      	subs	r0, #2
 800045a:	4463      	add	r3, ip
 800045c:	1a5b      	subs	r3, r3, r1
 800045e:	b2a4      	uxth	r4, r4
 8000460:	fbb3 f1f8 	udiv	r1, r3, r8
 8000464:	fb08 3311 	mls	r3, r8, r1, r3
 8000468:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800046c:	fb01 f307 	mul.w	r3, r1, r7
 8000470:	42a3      	cmp	r3, r4
 8000472:	d908      	bls.n	8000486 <__udivmoddi4+0x276>
 8000474:	eb1c 0404 	adds.w	r4, ip, r4
 8000478:	f101 36ff 	add.w	r6, r1, #4294967295
 800047c:	d213      	bcs.n	80004a6 <__udivmoddi4+0x296>
 800047e:	42a3      	cmp	r3, r4
 8000480:	d911      	bls.n	80004a6 <__udivmoddi4+0x296>
 8000482:	3902      	subs	r1, #2
 8000484:	4464      	add	r4, ip
 8000486:	1ae4      	subs	r4, r4, r3
 8000488:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800048c:	e739      	b.n	8000302 <__udivmoddi4+0xf2>
 800048e:	4604      	mov	r4, r0
 8000490:	e6f0      	b.n	8000274 <__udivmoddi4+0x64>
 8000492:	4608      	mov	r0, r1
 8000494:	e706      	b.n	80002a4 <__udivmoddi4+0x94>
 8000496:	45c8      	cmp	r8, r9
 8000498:	d2ae      	bcs.n	80003f8 <__udivmoddi4+0x1e8>
 800049a:	ebb9 0e02 	subs.w	lr, r9, r2
 800049e:	eb63 0c07 	sbc.w	ip, r3, r7
 80004a2:	3801      	subs	r0, #1
 80004a4:	e7a8      	b.n	80003f8 <__udivmoddi4+0x1e8>
 80004a6:	4631      	mov	r1, r6
 80004a8:	e7ed      	b.n	8000486 <__udivmoddi4+0x276>
 80004aa:	4603      	mov	r3, r0
 80004ac:	e799      	b.n	80003e2 <__udivmoddi4+0x1d2>
 80004ae:	4630      	mov	r0, r6
 80004b0:	e7d4      	b.n	800045c <__udivmoddi4+0x24c>
 80004b2:	46d6      	mov	lr, sl
 80004b4:	e77f      	b.n	80003b6 <__udivmoddi4+0x1a6>
 80004b6:	4463      	add	r3, ip
 80004b8:	3802      	subs	r0, #2
 80004ba:	e74d      	b.n	8000358 <__udivmoddi4+0x148>
 80004bc:	4606      	mov	r6, r0
 80004be:	4623      	mov	r3, r4
 80004c0:	4608      	mov	r0, r1
 80004c2:	e70f      	b.n	80002e4 <__udivmoddi4+0xd4>
 80004c4:	3e02      	subs	r6, #2
 80004c6:	4463      	add	r3, ip
 80004c8:	e730      	b.n	800032c <__udivmoddi4+0x11c>
 80004ca:	bf00      	nop

080004cc <__aeabi_idiv0>:
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop

080004d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004d4:	f000 faae 	bl	8000a34 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004d8:	f000 f826 	bl	8000528 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004dc:	f000 f8ae 	bl	800063c <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80004e0:	f000 f882 	bl	80005e8 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80004e4:	f002 fc7e 	bl	8002de4 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of Task1 */
  Task1Handle = osThreadNew(StartTask1, NULL, &Task1_attributes);
 80004e8:	4a09      	ldr	r2, [pc, #36]	@ (8000510 <main+0x40>)
 80004ea:	2100      	movs	r1, #0
 80004ec:	4809      	ldr	r0, [pc, #36]	@ (8000514 <main+0x44>)
 80004ee:	f002 fcc3 	bl	8002e78 <osThreadNew>
 80004f2:	4603      	mov	r3, r0
 80004f4:	4a08      	ldr	r2, [pc, #32]	@ (8000518 <main+0x48>)
 80004f6:	6013      	str	r3, [r2, #0]

  /* creation of Task2 */
  Task2Handle = osThreadNew(StartTask02, NULL, &Task2_attributes);
 80004f8:	4a08      	ldr	r2, [pc, #32]	@ (800051c <main+0x4c>)
 80004fa:	2100      	movs	r1, #0
 80004fc:	4808      	ldr	r0, [pc, #32]	@ (8000520 <main+0x50>)
 80004fe:	f002 fcbb 	bl	8002e78 <osThreadNew>
 8000502:	4603      	mov	r3, r0
 8000504:	4a07      	ldr	r2, [pc, #28]	@ (8000524 <main+0x54>)
 8000506:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000508:	f002 fc90 	bl	8002e2c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800050c:	bf00      	nop
 800050e:	e7fd      	b.n	800050c <main+0x3c>
 8000510:	0800599c 	.word	0x0800599c
 8000514:	080006c9 	.word	0x080006c9
 8000518:	20000074 	.word	0x20000074
 800051c:	080059c0 	.word	0x080059c0
 8000520:	080006fd 	.word	0x080006fd
 8000524:	20000078 	.word	0x20000078

08000528 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000528:	b580      	push	{r7, lr}
 800052a:	b094      	sub	sp, #80	@ 0x50
 800052c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800052e:	f107 0320 	add.w	r3, r7, #32
 8000532:	2230      	movs	r2, #48	@ 0x30
 8000534:	2100      	movs	r1, #0
 8000536:	4618      	mov	r0, r3
 8000538:	f005 f9d6 	bl	80058e8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800053c:	f107 030c 	add.w	r3, r7, #12
 8000540:	2200      	movs	r2, #0
 8000542:	601a      	str	r2, [r3, #0]
 8000544:	605a      	str	r2, [r3, #4]
 8000546:	609a      	str	r2, [r3, #8]
 8000548:	60da      	str	r2, [r3, #12]
 800054a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800054c:	2300      	movs	r3, #0
 800054e:	60bb      	str	r3, [r7, #8]
 8000550:	4b23      	ldr	r3, [pc, #140]	@ (80005e0 <SystemClock_Config+0xb8>)
 8000552:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000554:	4a22      	ldr	r2, [pc, #136]	@ (80005e0 <SystemClock_Config+0xb8>)
 8000556:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800055a:	6413      	str	r3, [r2, #64]	@ 0x40
 800055c:	4b20      	ldr	r3, [pc, #128]	@ (80005e0 <SystemClock_Config+0xb8>)
 800055e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000560:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000564:	60bb      	str	r3, [r7, #8]
 8000566:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000568:	2300      	movs	r3, #0
 800056a:	607b      	str	r3, [r7, #4]
 800056c:	4b1d      	ldr	r3, [pc, #116]	@ (80005e4 <SystemClock_Config+0xbc>)
 800056e:	681b      	ldr	r3, [r3, #0]
 8000570:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000574:	4a1b      	ldr	r2, [pc, #108]	@ (80005e4 <SystemClock_Config+0xbc>)
 8000576:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800057a:	6013      	str	r3, [r2, #0]
 800057c:	4b19      	ldr	r3, [pc, #100]	@ (80005e4 <SystemClock_Config+0xbc>)
 800057e:	681b      	ldr	r3, [r3, #0]
 8000580:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000584:	607b      	str	r3, [r7, #4]
 8000586:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000588:	2302      	movs	r3, #2
 800058a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800058c:	2301      	movs	r3, #1
 800058e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000590:	2310      	movs	r3, #16
 8000592:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000594:	2300      	movs	r3, #0
 8000596:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000598:	f107 0320 	add.w	r3, r7, #32
 800059c:	4618      	mov	r0, r3
 800059e:	f000 fdc1 	bl	8001124 <HAL_RCC_OscConfig>
 80005a2:	4603      	mov	r3, r0
 80005a4:	2b00      	cmp	r3, #0
 80005a6:	d001      	beq.n	80005ac <SystemClock_Config+0x84>
  {
    Error_Handler();
 80005a8:	f000 f8d4 	bl	8000754 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005ac:	230f      	movs	r3, #15
 80005ae:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80005b0:	2300      	movs	r3, #0
 80005b2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005b4:	2300      	movs	r3, #0
 80005b6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005b8:	2300      	movs	r3, #0
 80005ba:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005bc:	2300      	movs	r3, #0
 80005be:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80005c0:	f107 030c 	add.w	r3, r7, #12
 80005c4:	2100      	movs	r1, #0
 80005c6:	4618      	mov	r0, r3
 80005c8:	f001 f824 	bl	8001614 <HAL_RCC_ClockConfig>
 80005cc:	4603      	mov	r3, r0
 80005ce:	2b00      	cmp	r3, #0
 80005d0:	d001      	beq.n	80005d6 <SystemClock_Config+0xae>
  {
    Error_Handler();
 80005d2:	f000 f8bf 	bl	8000754 <Error_Handler>
  }
}
 80005d6:	bf00      	nop
 80005d8:	3750      	adds	r7, #80	@ 0x50
 80005da:	46bd      	mov	sp, r7
 80005dc:	bd80      	pop	{r7, pc}
 80005de:	bf00      	nop
 80005e0:	40023800 	.word	0x40023800
 80005e4:	40007000 	.word	0x40007000

080005e8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80005ec:	4b11      	ldr	r3, [pc, #68]	@ (8000634 <MX_USART1_UART_Init+0x4c>)
 80005ee:	4a12      	ldr	r2, [pc, #72]	@ (8000638 <MX_USART1_UART_Init+0x50>)
 80005f0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80005f2:	4b10      	ldr	r3, [pc, #64]	@ (8000634 <MX_USART1_UART_Init+0x4c>)
 80005f4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80005f8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80005fa:	4b0e      	ldr	r3, [pc, #56]	@ (8000634 <MX_USART1_UART_Init+0x4c>)
 80005fc:	2200      	movs	r2, #0
 80005fe:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000600:	4b0c      	ldr	r3, [pc, #48]	@ (8000634 <MX_USART1_UART_Init+0x4c>)
 8000602:	2200      	movs	r2, #0
 8000604:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000606:	4b0b      	ldr	r3, [pc, #44]	@ (8000634 <MX_USART1_UART_Init+0x4c>)
 8000608:	2200      	movs	r2, #0
 800060a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800060c:	4b09      	ldr	r3, [pc, #36]	@ (8000634 <MX_USART1_UART_Init+0x4c>)
 800060e:	220c      	movs	r2, #12
 8000610:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000612:	4b08      	ldr	r3, [pc, #32]	@ (8000634 <MX_USART1_UART_Init+0x4c>)
 8000614:	2200      	movs	r2, #0
 8000616:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000618:	4b06      	ldr	r3, [pc, #24]	@ (8000634 <MX_USART1_UART_Init+0x4c>)
 800061a:	2200      	movs	r2, #0
 800061c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800061e:	4805      	ldr	r0, [pc, #20]	@ (8000634 <MX_USART1_UART_Init+0x4c>)
 8000620:	f001 fc7e 	bl	8001f20 <HAL_UART_Init>
 8000624:	4603      	mov	r3, r0
 8000626:	2b00      	cmp	r3, #0
 8000628:	d001      	beq.n	800062e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800062a:	f000 f893 	bl	8000754 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800062e:	bf00      	nop
 8000630:	bd80      	pop	{r7, pc}
 8000632:	bf00      	nop
 8000634:	2000002c 	.word	0x2000002c
 8000638:	40011000 	.word	0x40011000

0800063c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	b086      	sub	sp, #24
 8000640:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000642:	1d3b      	adds	r3, r7, #4
 8000644:	2200      	movs	r2, #0
 8000646:	601a      	str	r2, [r3, #0]
 8000648:	605a      	str	r2, [r3, #4]
 800064a:	609a      	str	r2, [r3, #8]
 800064c:	60da      	str	r2, [r3, #12]
 800064e:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000650:	2300      	movs	r3, #0
 8000652:	603b      	str	r3, [r7, #0]
 8000654:	4b1a      	ldr	r3, [pc, #104]	@ (80006c0 <MX_GPIO_Init+0x84>)
 8000656:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000658:	4a19      	ldr	r2, [pc, #100]	@ (80006c0 <MX_GPIO_Init+0x84>)
 800065a:	f043 0301 	orr.w	r3, r3, #1
 800065e:	6313      	str	r3, [r2, #48]	@ 0x30
 8000660:	4b17      	ldr	r3, [pc, #92]	@ (80006c0 <MX_GPIO_Init+0x84>)
 8000662:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000664:	f003 0301 	and.w	r3, r3, #1
 8000668:	603b      	str	r3, [r7, #0]
 800066a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 800066c:	2200      	movs	r2, #0
 800066e:	2130      	movs	r1, #48	@ 0x30
 8000670:	4814      	ldr	r0, [pc, #80]	@ (80006c4 <MX_GPIO_Init+0x88>)
 8000672:	f000 fd19 	bl	80010a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000676:	2304      	movs	r3, #4
 8000678:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800067a:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800067e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000680:	2301      	movs	r3, #1
 8000682:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000684:	1d3b      	adds	r3, r7, #4
 8000686:	4619      	mov	r1, r3
 8000688:	480e      	ldr	r0, [pc, #56]	@ (80006c4 <MX_GPIO_Init+0x88>)
 800068a:	f000 fb89 	bl	8000da0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800068e:	2330      	movs	r3, #48	@ 0x30
 8000690:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000692:	2301      	movs	r3, #1
 8000694:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000696:	2300      	movs	r3, #0
 8000698:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800069a:	2300      	movs	r3, #0
 800069c:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800069e:	1d3b      	adds	r3, r7, #4
 80006a0:	4619      	mov	r1, r3
 80006a2:	4808      	ldr	r0, [pc, #32]	@ (80006c4 <MX_GPIO_Init+0x88>)
 80006a4:	f000 fb7c 	bl	8000da0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 80006a8:	2200      	movs	r2, #0
 80006aa:	2100      	movs	r1, #0
 80006ac:	2008      	movs	r0, #8
 80006ae:	f000 fabb 	bl	8000c28 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 80006b2:	2008      	movs	r0, #8
 80006b4:	f000 fad4 	bl	8000c60 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80006b8:	bf00      	nop
 80006ba:	3718      	adds	r7, #24
 80006bc:	46bd      	mov	sp, r7
 80006be:	bd80      	pop	{r7, pc}
 80006c0:	40023800 	.word	0x40023800
 80006c4:	40020000 	.word	0x40020000

080006c8 <StartTask1>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartTask1 */
void StartTask1(void *argument)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	b082      	sub	sp, #8
 80006cc:	af00      	add	r7, sp, #0
 80006ce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 80006d0:	2201      	movs	r2, #1
 80006d2:	2110      	movs	r1, #16
 80006d4:	4808      	ldr	r0, [pc, #32]	@ (80006f8 <StartTask1+0x30>)
 80006d6:	f000 fce7 	bl	80010a8 <HAL_GPIO_WritePin>
        osDelay(1000);
 80006da:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80006de:	f002 fc5d 	bl	8002f9c <osDelay>
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 80006e2:	2200      	movs	r2, #0
 80006e4:	2110      	movs	r1, #16
 80006e6:	4804      	ldr	r0, [pc, #16]	@ (80006f8 <StartTask1+0x30>)
 80006e8:	f000 fcde 	bl	80010a8 <HAL_GPIO_WritePin>
        osDelay(1000);
 80006ec:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80006f0:	f002 fc54 	bl	8002f9c <osDelay>
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 80006f4:	bf00      	nop
 80006f6:	e7eb      	b.n	80006d0 <StartTask1+0x8>
 80006f8:	40020000 	.word	0x40020000

080006fc <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void *argument)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b082      	sub	sp, #8
 8000700:	af00      	add	r7, sp, #0
 8000702:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
  /* Infinite loop */
  for(;;)
  {

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 1);
 8000704:	2201      	movs	r2, #1
 8000706:	2120      	movs	r1, #32
 8000708:	4808      	ldr	r0, [pc, #32]	@ (800072c <StartTask02+0x30>)
 800070a:	f000 fccd 	bl	80010a8 <HAL_GPIO_WritePin>
	osDelay(1000);
 800070e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000712:	f002 fc43 	bl	8002f9c <osDelay>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 0);
 8000716:	2200      	movs	r2, #0
 8000718:	2120      	movs	r1, #32
 800071a:	4804      	ldr	r0, [pc, #16]	@ (800072c <StartTask02+0x30>)
 800071c:	f000 fcc4 	bl	80010a8 <HAL_GPIO_WritePin>
	osDelay(1000);
 8000720:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000724:	f002 fc3a 	bl	8002f9c <osDelay>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 1);
 8000728:	bf00      	nop
 800072a:	e7eb      	b.n	8000704 <StartTask02+0x8>
 800072c:	40020000 	.word	0x40020000

08000730 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	b082      	sub	sp, #8
 8000734:	af00      	add	r7, sp, #0
 8000736:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM3) {
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	681b      	ldr	r3, [r3, #0]
 800073c:	4a04      	ldr	r2, [pc, #16]	@ (8000750 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800073e:	4293      	cmp	r3, r2
 8000740:	d101      	bne.n	8000746 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000742:	f000 f999 	bl	8000a78 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000746:	bf00      	nop
 8000748:	3708      	adds	r7, #8
 800074a:	46bd      	mov	sp, r7
 800074c:	bd80      	pop	{r7, pc}
 800074e:	bf00      	nop
 8000750:	40000400 	.word	0x40000400

08000754 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000754:	b480      	push	{r7}
 8000756:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000758:	b672      	cpsid	i
}
 800075a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800075c:	bf00      	nop
 800075e:	e7fd      	b.n	800075c <Error_Handler+0x8>

08000760 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	b082      	sub	sp, #8
 8000764:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000766:	2300      	movs	r3, #0
 8000768:	607b      	str	r3, [r7, #4]
 800076a:	4b12      	ldr	r3, [pc, #72]	@ (80007b4 <HAL_MspInit+0x54>)
 800076c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800076e:	4a11      	ldr	r2, [pc, #68]	@ (80007b4 <HAL_MspInit+0x54>)
 8000770:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000774:	6453      	str	r3, [r2, #68]	@ 0x44
 8000776:	4b0f      	ldr	r3, [pc, #60]	@ (80007b4 <HAL_MspInit+0x54>)
 8000778:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800077a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800077e:	607b      	str	r3, [r7, #4]
 8000780:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000782:	2300      	movs	r3, #0
 8000784:	603b      	str	r3, [r7, #0]
 8000786:	4b0b      	ldr	r3, [pc, #44]	@ (80007b4 <HAL_MspInit+0x54>)
 8000788:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800078a:	4a0a      	ldr	r2, [pc, #40]	@ (80007b4 <HAL_MspInit+0x54>)
 800078c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000790:	6413      	str	r3, [r2, #64]	@ 0x40
 8000792:	4b08      	ldr	r3, [pc, #32]	@ (80007b4 <HAL_MspInit+0x54>)
 8000794:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000796:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800079a:	603b      	str	r3, [r7, #0]
 800079c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800079e:	2200      	movs	r2, #0
 80007a0:	210f      	movs	r1, #15
 80007a2:	f06f 0001 	mvn.w	r0, #1
 80007a6:	f000 fa3f 	bl	8000c28 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007aa:	bf00      	nop
 80007ac:	3708      	adds	r7, #8
 80007ae:	46bd      	mov	sp, r7
 80007b0:	bd80      	pop	{r7, pc}
 80007b2:	bf00      	nop
 80007b4:	40023800 	.word	0x40023800

080007b8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b08a      	sub	sp, #40	@ 0x28
 80007bc:	af00      	add	r7, sp, #0
 80007be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007c0:	f107 0314 	add.w	r3, r7, #20
 80007c4:	2200      	movs	r2, #0
 80007c6:	601a      	str	r2, [r3, #0]
 80007c8:	605a      	str	r2, [r3, #4]
 80007ca:	609a      	str	r2, [r3, #8]
 80007cc:	60da      	str	r2, [r3, #12]
 80007ce:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	681b      	ldr	r3, [r3, #0]
 80007d4:	4a1d      	ldr	r2, [pc, #116]	@ (800084c <HAL_UART_MspInit+0x94>)
 80007d6:	4293      	cmp	r3, r2
 80007d8:	d134      	bne.n	8000844 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80007da:	2300      	movs	r3, #0
 80007dc:	613b      	str	r3, [r7, #16]
 80007de:	4b1c      	ldr	r3, [pc, #112]	@ (8000850 <HAL_UART_MspInit+0x98>)
 80007e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80007e2:	4a1b      	ldr	r2, [pc, #108]	@ (8000850 <HAL_UART_MspInit+0x98>)
 80007e4:	f043 0310 	orr.w	r3, r3, #16
 80007e8:	6453      	str	r3, [r2, #68]	@ 0x44
 80007ea:	4b19      	ldr	r3, [pc, #100]	@ (8000850 <HAL_UART_MspInit+0x98>)
 80007ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80007ee:	f003 0310 	and.w	r3, r3, #16
 80007f2:	613b      	str	r3, [r7, #16]
 80007f4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007f6:	2300      	movs	r3, #0
 80007f8:	60fb      	str	r3, [r7, #12]
 80007fa:	4b15      	ldr	r3, [pc, #84]	@ (8000850 <HAL_UART_MspInit+0x98>)
 80007fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007fe:	4a14      	ldr	r2, [pc, #80]	@ (8000850 <HAL_UART_MspInit+0x98>)
 8000800:	f043 0301 	orr.w	r3, r3, #1
 8000804:	6313      	str	r3, [r2, #48]	@ 0x30
 8000806:	4b12      	ldr	r3, [pc, #72]	@ (8000850 <HAL_UART_MspInit+0x98>)
 8000808:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800080a:	f003 0301 	and.w	r3, r3, #1
 800080e:	60fb      	str	r3, [r7, #12]
 8000810:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000812:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000816:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000818:	2302      	movs	r3, #2
 800081a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800081c:	2300      	movs	r3, #0
 800081e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000820:	2303      	movs	r3, #3
 8000822:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000824:	2307      	movs	r3, #7
 8000826:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000828:	f107 0314 	add.w	r3, r7, #20
 800082c:	4619      	mov	r1, r3
 800082e:	4809      	ldr	r0, [pc, #36]	@ (8000854 <HAL_UART_MspInit+0x9c>)
 8000830:	f000 fab6 	bl	8000da0 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8000834:	2200      	movs	r2, #0
 8000836:	2105      	movs	r1, #5
 8000838:	2025      	movs	r0, #37	@ 0x25
 800083a:	f000 f9f5 	bl	8000c28 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800083e:	2025      	movs	r0, #37	@ 0x25
 8000840:	f000 fa0e 	bl	8000c60 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8000844:	bf00      	nop
 8000846:	3728      	adds	r7, #40	@ 0x28
 8000848:	46bd      	mov	sp, r7
 800084a:	bd80      	pop	{r7, pc}
 800084c:	40011000 	.word	0x40011000
 8000850:	40023800 	.word	0x40023800
 8000854:	40020000 	.word	0x40020000

08000858 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	b08e      	sub	sp, #56	@ 0x38
 800085c:	af00      	add	r7, sp, #0
 800085e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000860:	2300      	movs	r3, #0
 8000862:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000864:	2300      	movs	r3, #0
 8000866:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM3 clock */
  __HAL_RCC_TIM3_CLK_ENABLE();
 8000868:	2300      	movs	r3, #0
 800086a:	60fb      	str	r3, [r7, #12]
 800086c:	4b33      	ldr	r3, [pc, #204]	@ (800093c <HAL_InitTick+0xe4>)
 800086e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000870:	4a32      	ldr	r2, [pc, #200]	@ (800093c <HAL_InitTick+0xe4>)
 8000872:	f043 0302 	orr.w	r3, r3, #2
 8000876:	6413      	str	r3, [r2, #64]	@ 0x40
 8000878:	4b30      	ldr	r3, [pc, #192]	@ (800093c <HAL_InitTick+0xe4>)
 800087a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800087c:	f003 0302 	and.w	r3, r3, #2
 8000880:	60fb      	str	r3, [r7, #12]
 8000882:	68fb      	ldr	r3, [r7, #12]

/* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000884:	f107 0210 	add.w	r2, r7, #16
 8000888:	f107 0314 	add.w	r3, r7, #20
 800088c:	4611      	mov	r1, r2
 800088e:	4618      	mov	r0, r3
 8000890:	f001 f8a0 	bl	80019d4 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000894:	6a3b      	ldr	r3, [r7, #32]
 8000896:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM3 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000898:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800089a:	2b00      	cmp	r3, #0
 800089c:	d103      	bne.n	80008a6 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800089e:	f001 f871 	bl	8001984 <HAL_RCC_GetPCLK1Freq>
 80008a2:	6378      	str	r0, [r7, #52]	@ 0x34
 80008a4:	e004      	b.n	80008b0 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80008a6:	f001 f86d 	bl	8001984 <HAL_RCC_GetPCLK1Freq>
 80008aa:	4603      	mov	r3, r0
 80008ac:	005b      	lsls	r3, r3, #1
 80008ae:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM3 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80008b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80008b2:	4a23      	ldr	r2, [pc, #140]	@ (8000940 <HAL_InitTick+0xe8>)
 80008b4:	fba2 2303 	umull	r2, r3, r2, r3
 80008b8:	0c9b      	lsrs	r3, r3, #18
 80008ba:	3b01      	subs	r3, #1
 80008bc:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM3 */
  htim3.Instance = TIM3;
 80008be:	4b21      	ldr	r3, [pc, #132]	@ (8000944 <HAL_InitTick+0xec>)
 80008c0:	4a21      	ldr	r2, [pc, #132]	@ (8000948 <HAL_InitTick+0xf0>)
 80008c2:	601a      	str	r2, [r3, #0]
  + Period = [(TIM3CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim3.Init.Period = (1000000U / 1000U) - 1U;
 80008c4:	4b1f      	ldr	r3, [pc, #124]	@ (8000944 <HAL_InitTick+0xec>)
 80008c6:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80008ca:	60da      	str	r2, [r3, #12]
  htim3.Init.Prescaler = uwPrescalerValue;
 80008cc:	4a1d      	ldr	r2, [pc, #116]	@ (8000944 <HAL_InitTick+0xec>)
 80008ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80008d0:	6053      	str	r3, [r2, #4]
  htim3.Init.ClockDivision = 0;
 80008d2:	4b1c      	ldr	r3, [pc, #112]	@ (8000944 <HAL_InitTick+0xec>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	611a      	str	r2, [r3, #16]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008d8:	4b1a      	ldr	r3, [pc, #104]	@ (8000944 <HAL_InitTick+0xec>)
 80008da:	2200      	movs	r2, #0
 80008dc:	609a      	str	r2, [r3, #8]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008de:	4b19      	ldr	r3, [pc, #100]	@ (8000944 <HAL_InitTick+0xec>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim3);
 80008e4:	4817      	ldr	r0, [pc, #92]	@ (8000944 <HAL_InitTick+0xec>)
 80008e6:	f001 f8a7 	bl	8001a38 <HAL_TIM_Base_Init>
 80008ea:	4603      	mov	r3, r0
 80008ec:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 80008f0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	d11b      	bne.n	8000930 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim3);
 80008f8:	4812      	ldr	r0, [pc, #72]	@ (8000944 <HAL_InitTick+0xec>)
 80008fa:	f001 f8f7 	bl	8001aec <HAL_TIM_Base_Start_IT>
 80008fe:	4603      	mov	r3, r0
 8000900:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8000904:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000908:	2b00      	cmp	r3, #0
 800090a:	d111      	bne.n	8000930 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM3 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800090c:	201d      	movs	r0, #29
 800090e:	f000 f9a7 	bl	8000c60 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	2b0f      	cmp	r3, #15
 8000916:	d808      	bhi.n	800092a <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM3_IRQn, TickPriority, 0U);
 8000918:	2200      	movs	r2, #0
 800091a:	6879      	ldr	r1, [r7, #4]
 800091c:	201d      	movs	r0, #29
 800091e:	f000 f983 	bl	8000c28 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000922:	4a0a      	ldr	r2, [pc, #40]	@ (800094c <HAL_InitTick+0xf4>)
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	6013      	str	r3, [r2, #0]
 8000928:	e002      	b.n	8000930 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 800092a:	2301      	movs	r3, #1
 800092c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000930:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8000934:	4618      	mov	r0, r3
 8000936:	3738      	adds	r7, #56	@ 0x38
 8000938:	46bd      	mov	sp, r7
 800093a:	bd80      	pop	{r7, pc}
 800093c:	40023800 	.word	0x40023800
 8000940:	431bde83 	.word	0x431bde83
 8000944:	2000007c 	.word	0x2000007c
 8000948:	40000400 	.word	0x40000400
 800094c:	20000004 	.word	0x20000004

08000950 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000950:	b480      	push	{r7}
 8000952:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000954:	bf00      	nop
 8000956:	e7fd      	b.n	8000954 <NMI_Handler+0x4>

08000958 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000958:	b480      	push	{r7}
 800095a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800095c:	bf00      	nop
 800095e:	e7fd      	b.n	800095c <HardFault_Handler+0x4>

08000960 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000960:	b480      	push	{r7}
 8000962:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000964:	bf00      	nop
 8000966:	e7fd      	b.n	8000964 <MemManage_Handler+0x4>

08000968 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000968:	b480      	push	{r7}
 800096a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800096c:	bf00      	nop
 800096e:	e7fd      	b.n	800096c <BusFault_Handler+0x4>

08000970 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000970:	b480      	push	{r7}
 8000972:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000974:	bf00      	nop
 8000976:	e7fd      	b.n	8000974 <UsageFault_Handler+0x4>

08000978 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000978:	b480      	push	{r7}
 800097a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800097c:	bf00      	nop
 800097e:	46bd      	mov	sp, r7
 8000980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000984:	4770      	bx	lr

08000986 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8000986:	b580      	push	{r7, lr}
 8000988:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 800098a:	2004      	movs	r0, #4
 800098c:	f000 fba6 	bl	80010dc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8000990:	bf00      	nop
 8000992:	bd80      	pop	{r7, pc}

08000994 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000998:	4802      	ldr	r0, [pc, #8]	@ (80009a4 <TIM3_IRQHandler+0x10>)
 800099a:	f001 f909 	bl	8001bb0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800099e:	bf00      	nop
 80009a0:	bd80      	pop	{r7, pc}
 80009a2:	bf00      	nop
 80009a4:	2000007c 	.word	0x2000007c

080009a8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80009ac:	4802      	ldr	r0, [pc, #8]	@ (80009b8 <USART1_IRQHandler+0x10>)
 80009ae:	f001 fb07 	bl	8001fc0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80009b2:	bf00      	nop
 80009b4:	bd80      	pop	{r7, pc}
 80009b6:	bf00      	nop
 80009b8:	2000002c 	.word	0x2000002c

080009bc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80009bc:	b480      	push	{r7}
 80009be:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80009c0:	4b06      	ldr	r3, [pc, #24]	@ (80009dc <SystemInit+0x20>)
 80009c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80009c6:	4a05      	ldr	r2, [pc, #20]	@ (80009dc <SystemInit+0x20>)
 80009c8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80009cc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80009d0:	bf00      	nop
 80009d2:	46bd      	mov	sp, r7
 80009d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d8:	4770      	bx	lr
 80009da:	bf00      	nop
 80009dc:	e000ed00 	.word	0xe000ed00

080009e0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80009e0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000a18 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80009e4:	f7ff ffea 	bl	80009bc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80009e8:	480c      	ldr	r0, [pc, #48]	@ (8000a1c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80009ea:	490d      	ldr	r1, [pc, #52]	@ (8000a20 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80009ec:	4a0d      	ldr	r2, [pc, #52]	@ (8000a24 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80009ee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009f0:	e002      	b.n	80009f8 <LoopCopyDataInit>

080009f2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009f2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009f4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009f6:	3304      	adds	r3, #4

080009f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009f8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009fa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009fc:	d3f9      	bcc.n	80009f2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009fe:	4a0a      	ldr	r2, [pc, #40]	@ (8000a28 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000a00:	4c0a      	ldr	r4, [pc, #40]	@ (8000a2c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000a02:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a04:	e001      	b.n	8000a0a <LoopFillZerobss>

08000a06 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a06:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a08:	3204      	adds	r2, #4

08000a0a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a0a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a0c:	d3fb      	bcc.n	8000a06 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000a0e:	f004 ff73 	bl	80058f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000a12:	f7ff fd5d 	bl	80004d0 <main>
  bx  lr    
 8000a16:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000a18:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000a1c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a20:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000a24:	08005a0c 	.word	0x08005a0c
  ldr r2, =_sbss
 8000a28:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000a2c:	20004a18 	.word	0x20004a18

08000a30 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000a30:	e7fe      	b.n	8000a30 <ADC_IRQHandler>
	...

08000a34 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000a38:	4b0e      	ldr	r3, [pc, #56]	@ (8000a74 <HAL_Init+0x40>)
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	4a0d      	ldr	r2, [pc, #52]	@ (8000a74 <HAL_Init+0x40>)
 8000a3e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000a42:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000a44:	4b0b      	ldr	r3, [pc, #44]	@ (8000a74 <HAL_Init+0x40>)
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	4a0a      	ldr	r2, [pc, #40]	@ (8000a74 <HAL_Init+0x40>)
 8000a4a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000a4e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a50:	4b08      	ldr	r3, [pc, #32]	@ (8000a74 <HAL_Init+0x40>)
 8000a52:	681b      	ldr	r3, [r3, #0]
 8000a54:	4a07      	ldr	r2, [pc, #28]	@ (8000a74 <HAL_Init+0x40>)
 8000a56:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000a5a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a5c:	2003      	movs	r0, #3
 8000a5e:	f000 f8d8 	bl	8000c12 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a62:	200f      	movs	r0, #15
 8000a64:	f7ff fef8 	bl	8000858 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a68:	f7ff fe7a 	bl	8000760 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a6c:	2300      	movs	r3, #0
}
 8000a6e:	4618      	mov	r0, r3
 8000a70:	bd80      	pop	{r7, pc}
 8000a72:	bf00      	nop
 8000a74:	40023c00 	.word	0x40023c00

08000a78 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a78:	b480      	push	{r7}
 8000a7a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a7c:	4b06      	ldr	r3, [pc, #24]	@ (8000a98 <HAL_IncTick+0x20>)
 8000a7e:	781b      	ldrb	r3, [r3, #0]
 8000a80:	461a      	mov	r2, r3
 8000a82:	4b06      	ldr	r3, [pc, #24]	@ (8000a9c <HAL_IncTick+0x24>)
 8000a84:	681b      	ldr	r3, [r3, #0]
 8000a86:	4413      	add	r3, r2
 8000a88:	4a04      	ldr	r2, [pc, #16]	@ (8000a9c <HAL_IncTick+0x24>)
 8000a8a:	6013      	str	r3, [r2, #0]
}
 8000a8c:	bf00      	nop
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a94:	4770      	bx	lr
 8000a96:	bf00      	nop
 8000a98:	20000008 	.word	0x20000008
 8000a9c:	200000c4 	.word	0x200000c4

08000aa0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000aa0:	b480      	push	{r7}
 8000aa2:	af00      	add	r7, sp, #0
  return uwTick;
 8000aa4:	4b03      	ldr	r3, [pc, #12]	@ (8000ab4 <HAL_GetTick+0x14>)
 8000aa6:	681b      	ldr	r3, [r3, #0]
}
 8000aa8:	4618      	mov	r0, r3
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab0:	4770      	bx	lr
 8000ab2:	bf00      	nop
 8000ab4:	200000c4 	.word	0x200000c4

08000ab8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ab8:	b480      	push	{r7}
 8000aba:	b085      	sub	sp, #20
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	f003 0307 	and.w	r3, r3, #7
 8000ac6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ac8:	4b0c      	ldr	r3, [pc, #48]	@ (8000afc <__NVIC_SetPriorityGrouping+0x44>)
 8000aca:	68db      	ldr	r3, [r3, #12]
 8000acc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ace:	68ba      	ldr	r2, [r7, #8]
 8000ad0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000ad4:	4013      	ands	r3, r2
 8000ad6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ad8:	68fb      	ldr	r3, [r7, #12]
 8000ada:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000adc:	68bb      	ldr	r3, [r7, #8]
 8000ade:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ae0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000ae4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000ae8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000aea:	4a04      	ldr	r2, [pc, #16]	@ (8000afc <__NVIC_SetPriorityGrouping+0x44>)
 8000aec:	68bb      	ldr	r3, [r7, #8]
 8000aee:	60d3      	str	r3, [r2, #12]
}
 8000af0:	bf00      	nop
 8000af2:	3714      	adds	r7, #20
 8000af4:	46bd      	mov	sp, r7
 8000af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afa:	4770      	bx	lr
 8000afc:	e000ed00 	.word	0xe000ed00

08000b00 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b00:	b480      	push	{r7}
 8000b02:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b04:	4b04      	ldr	r3, [pc, #16]	@ (8000b18 <__NVIC_GetPriorityGrouping+0x18>)
 8000b06:	68db      	ldr	r3, [r3, #12]
 8000b08:	0a1b      	lsrs	r3, r3, #8
 8000b0a:	f003 0307 	and.w	r3, r3, #7
}
 8000b0e:	4618      	mov	r0, r3
 8000b10:	46bd      	mov	sp, r7
 8000b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b16:	4770      	bx	lr
 8000b18:	e000ed00 	.word	0xe000ed00

08000b1c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b1c:	b480      	push	{r7}
 8000b1e:	b083      	sub	sp, #12
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	4603      	mov	r3, r0
 8000b24:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	db0b      	blt.n	8000b46 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b2e:	79fb      	ldrb	r3, [r7, #7]
 8000b30:	f003 021f 	and.w	r2, r3, #31
 8000b34:	4907      	ldr	r1, [pc, #28]	@ (8000b54 <__NVIC_EnableIRQ+0x38>)
 8000b36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b3a:	095b      	lsrs	r3, r3, #5
 8000b3c:	2001      	movs	r0, #1
 8000b3e:	fa00 f202 	lsl.w	r2, r0, r2
 8000b42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000b46:	bf00      	nop
 8000b48:	370c      	adds	r7, #12
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b50:	4770      	bx	lr
 8000b52:	bf00      	nop
 8000b54:	e000e100 	.word	0xe000e100

08000b58 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b58:	b480      	push	{r7}
 8000b5a:	b083      	sub	sp, #12
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	4603      	mov	r3, r0
 8000b60:	6039      	str	r1, [r7, #0]
 8000b62:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	db0a      	blt.n	8000b82 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b6c:	683b      	ldr	r3, [r7, #0]
 8000b6e:	b2da      	uxtb	r2, r3
 8000b70:	490c      	ldr	r1, [pc, #48]	@ (8000ba4 <__NVIC_SetPriority+0x4c>)
 8000b72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b76:	0112      	lsls	r2, r2, #4
 8000b78:	b2d2      	uxtb	r2, r2
 8000b7a:	440b      	add	r3, r1
 8000b7c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b80:	e00a      	b.n	8000b98 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b82:	683b      	ldr	r3, [r7, #0]
 8000b84:	b2da      	uxtb	r2, r3
 8000b86:	4908      	ldr	r1, [pc, #32]	@ (8000ba8 <__NVIC_SetPriority+0x50>)
 8000b88:	79fb      	ldrb	r3, [r7, #7]
 8000b8a:	f003 030f 	and.w	r3, r3, #15
 8000b8e:	3b04      	subs	r3, #4
 8000b90:	0112      	lsls	r2, r2, #4
 8000b92:	b2d2      	uxtb	r2, r2
 8000b94:	440b      	add	r3, r1
 8000b96:	761a      	strb	r2, [r3, #24]
}
 8000b98:	bf00      	nop
 8000b9a:	370c      	adds	r7, #12
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba2:	4770      	bx	lr
 8000ba4:	e000e100 	.word	0xe000e100
 8000ba8:	e000ed00 	.word	0xe000ed00

08000bac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000bac:	b480      	push	{r7}
 8000bae:	b089      	sub	sp, #36	@ 0x24
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	60f8      	str	r0, [r7, #12]
 8000bb4:	60b9      	str	r1, [r7, #8]
 8000bb6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000bb8:	68fb      	ldr	r3, [r7, #12]
 8000bba:	f003 0307 	and.w	r3, r3, #7
 8000bbe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000bc0:	69fb      	ldr	r3, [r7, #28]
 8000bc2:	f1c3 0307 	rsb	r3, r3, #7
 8000bc6:	2b04      	cmp	r3, #4
 8000bc8:	bf28      	it	cs
 8000bca:	2304      	movcs	r3, #4
 8000bcc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000bce:	69fb      	ldr	r3, [r7, #28]
 8000bd0:	3304      	adds	r3, #4
 8000bd2:	2b06      	cmp	r3, #6
 8000bd4:	d902      	bls.n	8000bdc <NVIC_EncodePriority+0x30>
 8000bd6:	69fb      	ldr	r3, [r7, #28]
 8000bd8:	3b03      	subs	r3, #3
 8000bda:	e000      	b.n	8000bde <NVIC_EncodePriority+0x32>
 8000bdc:	2300      	movs	r3, #0
 8000bde:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000be0:	f04f 32ff 	mov.w	r2, #4294967295
 8000be4:	69bb      	ldr	r3, [r7, #24]
 8000be6:	fa02 f303 	lsl.w	r3, r2, r3
 8000bea:	43da      	mvns	r2, r3
 8000bec:	68bb      	ldr	r3, [r7, #8]
 8000bee:	401a      	ands	r2, r3
 8000bf0:	697b      	ldr	r3, [r7, #20]
 8000bf2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000bf4:	f04f 31ff 	mov.w	r1, #4294967295
 8000bf8:	697b      	ldr	r3, [r7, #20]
 8000bfa:	fa01 f303 	lsl.w	r3, r1, r3
 8000bfe:	43d9      	mvns	r1, r3
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c04:	4313      	orrs	r3, r2
         );
}
 8000c06:	4618      	mov	r0, r3
 8000c08:	3724      	adds	r7, #36	@ 0x24
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c10:	4770      	bx	lr

08000c12 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c12:	b580      	push	{r7, lr}
 8000c14:	b082      	sub	sp, #8
 8000c16:	af00      	add	r7, sp, #0
 8000c18:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c1a:	6878      	ldr	r0, [r7, #4]
 8000c1c:	f7ff ff4c 	bl	8000ab8 <__NVIC_SetPriorityGrouping>
}
 8000c20:	bf00      	nop
 8000c22:	3708      	adds	r7, #8
 8000c24:	46bd      	mov	sp, r7
 8000c26:	bd80      	pop	{r7, pc}

08000c28 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b086      	sub	sp, #24
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	4603      	mov	r3, r0
 8000c30:	60b9      	str	r1, [r7, #8]
 8000c32:	607a      	str	r2, [r7, #4]
 8000c34:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000c36:	2300      	movs	r3, #0
 8000c38:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000c3a:	f7ff ff61 	bl	8000b00 <__NVIC_GetPriorityGrouping>
 8000c3e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c40:	687a      	ldr	r2, [r7, #4]
 8000c42:	68b9      	ldr	r1, [r7, #8]
 8000c44:	6978      	ldr	r0, [r7, #20]
 8000c46:	f7ff ffb1 	bl	8000bac <NVIC_EncodePriority>
 8000c4a:	4602      	mov	r2, r0
 8000c4c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c50:	4611      	mov	r1, r2
 8000c52:	4618      	mov	r0, r3
 8000c54:	f7ff ff80 	bl	8000b58 <__NVIC_SetPriority>
}
 8000c58:	bf00      	nop
 8000c5a:	3718      	adds	r7, #24
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	bd80      	pop	{r7, pc}

08000c60 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b082      	sub	sp, #8
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	4603      	mov	r3, r0
 8000c68:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000c6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c6e:	4618      	mov	r0, r3
 8000c70:	f7ff ff54 	bl	8000b1c <__NVIC_EnableIRQ>
}
 8000c74:	bf00      	nop
 8000c76:	3708      	adds	r7, #8
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	bd80      	pop	{r7, pc}

08000c7c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b084      	sub	sp, #16
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000c88:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8000c8a:	f7ff ff09 	bl	8000aa0 <HAL_GetTick>
 8000c8e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8000c96:	b2db      	uxtb	r3, r3
 8000c98:	2b02      	cmp	r3, #2
 8000c9a:	d008      	beq.n	8000cae <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	2280      	movs	r2, #128	@ 0x80
 8000ca0:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8000caa:	2301      	movs	r3, #1
 8000cac:	e052      	b.n	8000d54 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	681a      	ldr	r2, [r3, #0]
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	f022 0216 	bic.w	r2, r2, #22
 8000cbc:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	695a      	ldr	r2, [r3, #20]
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8000ccc:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d103      	bne.n	8000cde <HAL_DMA_Abort+0x62>
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d007      	beq.n	8000cee <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	681a      	ldr	r2, [r3, #0]
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	f022 0208 	bic.w	r2, r2, #8
 8000cec:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	681a      	ldr	r2, [r3, #0]
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	f022 0201 	bic.w	r2, r2, #1
 8000cfc:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000cfe:	e013      	b.n	8000d28 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000d00:	f7ff fece 	bl	8000aa0 <HAL_GetTick>
 8000d04:	4602      	mov	r2, r0
 8000d06:	68bb      	ldr	r3, [r7, #8]
 8000d08:	1ad3      	subs	r3, r2, r3
 8000d0a:	2b05      	cmp	r3, #5
 8000d0c:	d90c      	bls.n	8000d28 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	2220      	movs	r2, #32
 8000d12:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	2203      	movs	r2, #3
 8000d18:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	2200      	movs	r2, #0
 8000d20:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8000d24:	2303      	movs	r3, #3
 8000d26:	e015      	b.n	8000d54 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	f003 0301 	and.w	r3, r3, #1
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d1e4      	bne.n	8000d00 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000d3a:	223f      	movs	r2, #63	@ 0x3f
 8000d3c:	409a      	lsls	r2, r3
 8000d3e:	68fb      	ldr	r3, [r7, #12]
 8000d40:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	2201      	movs	r2, #1
 8000d46:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8000d52:	2300      	movs	r3, #0
}
 8000d54:	4618      	mov	r0, r3
 8000d56:	3710      	adds	r7, #16
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	bd80      	pop	{r7, pc}

08000d5c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	b083      	sub	sp, #12
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8000d6a:	b2db      	uxtb	r3, r3
 8000d6c:	2b02      	cmp	r3, #2
 8000d6e:	d004      	beq.n	8000d7a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	2280      	movs	r2, #128	@ 0x80
 8000d74:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8000d76:	2301      	movs	r3, #1
 8000d78:	e00c      	b.n	8000d94 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	2205      	movs	r2, #5
 8000d7e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	681a      	ldr	r2, [r3, #0]
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	f022 0201 	bic.w	r2, r2, #1
 8000d90:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8000d92:	2300      	movs	r3, #0
}
 8000d94:	4618      	mov	r0, r3
 8000d96:	370c      	adds	r7, #12
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9e:	4770      	bx	lr

08000da0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000da0:	b480      	push	{r7}
 8000da2:	b089      	sub	sp, #36	@ 0x24
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	6078      	str	r0, [r7, #4]
 8000da8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000daa:	2300      	movs	r3, #0
 8000dac:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000dae:	2300      	movs	r3, #0
 8000db0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000db2:	2300      	movs	r3, #0
 8000db4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000db6:	2300      	movs	r3, #0
 8000db8:	61fb      	str	r3, [r7, #28]
 8000dba:	e159      	b.n	8001070 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000dbc:	2201      	movs	r2, #1
 8000dbe:	69fb      	ldr	r3, [r7, #28]
 8000dc0:	fa02 f303 	lsl.w	r3, r2, r3
 8000dc4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000dc6:	683b      	ldr	r3, [r7, #0]
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	697a      	ldr	r2, [r7, #20]
 8000dcc:	4013      	ands	r3, r2
 8000dce:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000dd0:	693a      	ldr	r2, [r7, #16]
 8000dd2:	697b      	ldr	r3, [r7, #20]
 8000dd4:	429a      	cmp	r2, r3
 8000dd6:	f040 8148 	bne.w	800106a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000dda:	683b      	ldr	r3, [r7, #0]
 8000ddc:	685b      	ldr	r3, [r3, #4]
 8000dde:	f003 0303 	and.w	r3, r3, #3
 8000de2:	2b01      	cmp	r3, #1
 8000de4:	d005      	beq.n	8000df2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000de6:	683b      	ldr	r3, [r7, #0]
 8000de8:	685b      	ldr	r3, [r3, #4]
 8000dea:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000dee:	2b02      	cmp	r3, #2
 8000df0:	d130      	bne.n	8000e54 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	689b      	ldr	r3, [r3, #8]
 8000df6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000df8:	69fb      	ldr	r3, [r7, #28]
 8000dfa:	005b      	lsls	r3, r3, #1
 8000dfc:	2203      	movs	r2, #3
 8000dfe:	fa02 f303 	lsl.w	r3, r2, r3
 8000e02:	43db      	mvns	r3, r3
 8000e04:	69ba      	ldr	r2, [r7, #24]
 8000e06:	4013      	ands	r3, r2
 8000e08:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000e0a:	683b      	ldr	r3, [r7, #0]
 8000e0c:	68da      	ldr	r2, [r3, #12]
 8000e0e:	69fb      	ldr	r3, [r7, #28]
 8000e10:	005b      	lsls	r3, r3, #1
 8000e12:	fa02 f303 	lsl.w	r3, r2, r3
 8000e16:	69ba      	ldr	r2, [r7, #24]
 8000e18:	4313      	orrs	r3, r2
 8000e1a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	69ba      	ldr	r2, [r7, #24]
 8000e20:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	685b      	ldr	r3, [r3, #4]
 8000e26:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000e28:	2201      	movs	r2, #1
 8000e2a:	69fb      	ldr	r3, [r7, #28]
 8000e2c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e30:	43db      	mvns	r3, r3
 8000e32:	69ba      	ldr	r2, [r7, #24]
 8000e34:	4013      	ands	r3, r2
 8000e36:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000e38:	683b      	ldr	r3, [r7, #0]
 8000e3a:	685b      	ldr	r3, [r3, #4]
 8000e3c:	091b      	lsrs	r3, r3, #4
 8000e3e:	f003 0201 	and.w	r2, r3, #1
 8000e42:	69fb      	ldr	r3, [r7, #28]
 8000e44:	fa02 f303 	lsl.w	r3, r2, r3
 8000e48:	69ba      	ldr	r2, [r7, #24]
 8000e4a:	4313      	orrs	r3, r2
 8000e4c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	69ba      	ldr	r2, [r7, #24]
 8000e52:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000e54:	683b      	ldr	r3, [r7, #0]
 8000e56:	685b      	ldr	r3, [r3, #4]
 8000e58:	f003 0303 	and.w	r3, r3, #3
 8000e5c:	2b03      	cmp	r3, #3
 8000e5e:	d017      	beq.n	8000e90 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	68db      	ldr	r3, [r3, #12]
 8000e64:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000e66:	69fb      	ldr	r3, [r7, #28]
 8000e68:	005b      	lsls	r3, r3, #1
 8000e6a:	2203      	movs	r2, #3
 8000e6c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e70:	43db      	mvns	r3, r3
 8000e72:	69ba      	ldr	r2, [r7, #24]
 8000e74:	4013      	ands	r3, r2
 8000e76:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000e78:	683b      	ldr	r3, [r7, #0]
 8000e7a:	689a      	ldr	r2, [r3, #8]
 8000e7c:	69fb      	ldr	r3, [r7, #28]
 8000e7e:	005b      	lsls	r3, r3, #1
 8000e80:	fa02 f303 	lsl.w	r3, r2, r3
 8000e84:	69ba      	ldr	r2, [r7, #24]
 8000e86:	4313      	orrs	r3, r2
 8000e88:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	69ba      	ldr	r2, [r7, #24]
 8000e8e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e90:	683b      	ldr	r3, [r7, #0]
 8000e92:	685b      	ldr	r3, [r3, #4]
 8000e94:	f003 0303 	and.w	r3, r3, #3
 8000e98:	2b02      	cmp	r3, #2
 8000e9a:	d123      	bne.n	8000ee4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000e9c:	69fb      	ldr	r3, [r7, #28]
 8000e9e:	08da      	lsrs	r2, r3, #3
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	3208      	adds	r2, #8
 8000ea4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ea8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000eaa:	69fb      	ldr	r3, [r7, #28]
 8000eac:	f003 0307 	and.w	r3, r3, #7
 8000eb0:	009b      	lsls	r3, r3, #2
 8000eb2:	220f      	movs	r2, #15
 8000eb4:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb8:	43db      	mvns	r3, r3
 8000eba:	69ba      	ldr	r2, [r7, #24]
 8000ebc:	4013      	ands	r3, r2
 8000ebe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000ec0:	683b      	ldr	r3, [r7, #0]
 8000ec2:	691a      	ldr	r2, [r3, #16]
 8000ec4:	69fb      	ldr	r3, [r7, #28]
 8000ec6:	f003 0307 	and.w	r3, r3, #7
 8000eca:	009b      	lsls	r3, r3, #2
 8000ecc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed0:	69ba      	ldr	r2, [r7, #24]
 8000ed2:	4313      	orrs	r3, r2
 8000ed4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000ed6:	69fb      	ldr	r3, [r7, #28]
 8000ed8:	08da      	lsrs	r2, r3, #3
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	3208      	adds	r2, #8
 8000ede:	69b9      	ldr	r1, [r7, #24]
 8000ee0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000eea:	69fb      	ldr	r3, [r7, #28]
 8000eec:	005b      	lsls	r3, r3, #1
 8000eee:	2203      	movs	r2, #3
 8000ef0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef4:	43db      	mvns	r3, r3
 8000ef6:	69ba      	ldr	r2, [r7, #24]
 8000ef8:	4013      	ands	r3, r2
 8000efa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000efc:	683b      	ldr	r3, [r7, #0]
 8000efe:	685b      	ldr	r3, [r3, #4]
 8000f00:	f003 0203 	and.w	r2, r3, #3
 8000f04:	69fb      	ldr	r3, [r7, #28]
 8000f06:	005b      	lsls	r3, r3, #1
 8000f08:	fa02 f303 	lsl.w	r3, r2, r3
 8000f0c:	69ba      	ldr	r2, [r7, #24]
 8000f0e:	4313      	orrs	r3, r2
 8000f10:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	69ba      	ldr	r2, [r7, #24]
 8000f16:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000f18:	683b      	ldr	r3, [r7, #0]
 8000f1a:	685b      	ldr	r3, [r3, #4]
 8000f1c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	f000 80a2 	beq.w	800106a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f26:	2300      	movs	r3, #0
 8000f28:	60fb      	str	r3, [r7, #12]
 8000f2a:	4b57      	ldr	r3, [pc, #348]	@ (8001088 <HAL_GPIO_Init+0x2e8>)
 8000f2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f2e:	4a56      	ldr	r2, [pc, #344]	@ (8001088 <HAL_GPIO_Init+0x2e8>)
 8000f30:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000f34:	6453      	str	r3, [r2, #68]	@ 0x44
 8000f36:	4b54      	ldr	r3, [pc, #336]	@ (8001088 <HAL_GPIO_Init+0x2e8>)
 8000f38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f3a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000f3e:	60fb      	str	r3, [r7, #12]
 8000f40:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000f42:	4a52      	ldr	r2, [pc, #328]	@ (800108c <HAL_GPIO_Init+0x2ec>)
 8000f44:	69fb      	ldr	r3, [r7, #28]
 8000f46:	089b      	lsrs	r3, r3, #2
 8000f48:	3302      	adds	r3, #2
 8000f4a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000f50:	69fb      	ldr	r3, [r7, #28]
 8000f52:	f003 0303 	and.w	r3, r3, #3
 8000f56:	009b      	lsls	r3, r3, #2
 8000f58:	220f      	movs	r2, #15
 8000f5a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f5e:	43db      	mvns	r3, r3
 8000f60:	69ba      	ldr	r2, [r7, #24]
 8000f62:	4013      	ands	r3, r2
 8000f64:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	4a49      	ldr	r2, [pc, #292]	@ (8001090 <HAL_GPIO_Init+0x2f0>)
 8000f6a:	4293      	cmp	r3, r2
 8000f6c:	d019      	beq.n	8000fa2 <HAL_GPIO_Init+0x202>
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	4a48      	ldr	r2, [pc, #288]	@ (8001094 <HAL_GPIO_Init+0x2f4>)
 8000f72:	4293      	cmp	r3, r2
 8000f74:	d013      	beq.n	8000f9e <HAL_GPIO_Init+0x1fe>
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	4a47      	ldr	r2, [pc, #284]	@ (8001098 <HAL_GPIO_Init+0x2f8>)
 8000f7a:	4293      	cmp	r3, r2
 8000f7c:	d00d      	beq.n	8000f9a <HAL_GPIO_Init+0x1fa>
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	4a46      	ldr	r2, [pc, #280]	@ (800109c <HAL_GPIO_Init+0x2fc>)
 8000f82:	4293      	cmp	r3, r2
 8000f84:	d007      	beq.n	8000f96 <HAL_GPIO_Init+0x1f6>
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	4a45      	ldr	r2, [pc, #276]	@ (80010a0 <HAL_GPIO_Init+0x300>)
 8000f8a:	4293      	cmp	r3, r2
 8000f8c:	d101      	bne.n	8000f92 <HAL_GPIO_Init+0x1f2>
 8000f8e:	2304      	movs	r3, #4
 8000f90:	e008      	b.n	8000fa4 <HAL_GPIO_Init+0x204>
 8000f92:	2307      	movs	r3, #7
 8000f94:	e006      	b.n	8000fa4 <HAL_GPIO_Init+0x204>
 8000f96:	2303      	movs	r3, #3
 8000f98:	e004      	b.n	8000fa4 <HAL_GPIO_Init+0x204>
 8000f9a:	2302      	movs	r3, #2
 8000f9c:	e002      	b.n	8000fa4 <HAL_GPIO_Init+0x204>
 8000f9e:	2301      	movs	r3, #1
 8000fa0:	e000      	b.n	8000fa4 <HAL_GPIO_Init+0x204>
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	69fa      	ldr	r2, [r7, #28]
 8000fa6:	f002 0203 	and.w	r2, r2, #3
 8000faa:	0092      	lsls	r2, r2, #2
 8000fac:	4093      	lsls	r3, r2
 8000fae:	69ba      	ldr	r2, [r7, #24]
 8000fb0:	4313      	orrs	r3, r2
 8000fb2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000fb4:	4935      	ldr	r1, [pc, #212]	@ (800108c <HAL_GPIO_Init+0x2ec>)
 8000fb6:	69fb      	ldr	r3, [r7, #28]
 8000fb8:	089b      	lsrs	r3, r3, #2
 8000fba:	3302      	adds	r3, #2
 8000fbc:	69ba      	ldr	r2, [r7, #24]
 8000fbe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000fc2:	4b38      	ldr	r3, [pc, #224]	@ (80010a4 <HAL_GPIO_Init+0x304>)
 8000fc4:	689b      	ldr	r3, [r3, #8]
 8000fc6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fc8:	693b      	ldr	r3, [r7, #16]
 8000fca:	43db      	mvns	r3, r3
 8000fcc:	69ba      	ldr	r2, [r7, #24]
 8000fce:	4013      	ands	r3, r2
 8000fd0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000fd2:	683b      	ldr	r3, [r7, #0]
 8000fd4:	685b      	ldr	r3, [r3, #4]
 8000fd6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d003      	beq.n	8000fe6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8000fde:	69ba      	ldr	r2, [r7, #24]
 8000fe0:	693b      	ldr	r3, [r7, #16]
 8000fe2:	4313      	orrs	r3, r2
 8000fe4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000fe6:	4a2f      	ldr	r2, [pc, #188]	@ (80010a4 <HAL_GPIO_Init+0x304>)
 8000fe8:	69bb      	ldr	r3, [r7, #24]
 8000fea:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000fec:	4b2d      	ldr	r3, [pc, #180]	@ (80010a4 <HAL_GPIO_Init+0x304>)
 8000fee:	68db      	ldr	r3, [r3, #12]
 8000ff0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ff2:	693b      	ldr	r3, [r7, #16]
 8000ff4:	43db      	mvns	r3, r3
 8000ff6:	69ba      	ldr	r2, [r7, #24]
 8000ff8:	4013      	ands	r3, r2
 8000ffa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000ffc:	683b      	ldr	r3, [r7, #0]
 8000ffe:	685b      	ldr	r3, [r3, #4]
 8001000:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001004:	2b00      	cmp	r3, #0
 8001006:	d003      	beq.n	8001010 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001008:	69ba      	ldr	r2, [r7, #24]
 800100a:	693b      	ldr	r3, [r7, #16]
 800100c:	4313      	orrs	r3, r2
 800100e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001010:	4a24      	ldr	r2, [pc, #144]	@ (80010a4 <HAL_GPIO_Init+0x304>)
 8001012:	69bb      	ldr	r3, [r7, #24]
 8001014:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001016:	4b23      	ldr	r3, [pc, #140]	@ (80010a4 <HAL_GPIO_Init+0x304>)
 8001018:	685b      	ldr	r3, [r3, #4]
 800101a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800101c:	693b      	ldr	r3, [r7, #16]
 800101e:	43db      	mvns	r3, r3
 8001020:	69ba      	ldr	r2, [r7, #24]
 8001022:	4013      	ands	r3, r2
 8001024:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001026:	683b      	ldr	r3, [r7, #0]
 8001028:	685b      	ldr	r3, [r3, #4]
 800102a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800102e:	2b00      	cmp	r3, #0
 8001030:	d003      	beq.n	800103a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001032:	69ba      	ldr	r2, [r7, #24]
 8001034:	693b      	ldr	r3, [r7, #16]
 8001036:	4313      	orrs	r3, r2
 8001038:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800103a:	4a1a      	ldr	r2, [pc, #104]	@ (80010a4 <HAL_GPIO_Init+0x304>)
 800103c:	69bb      	ldr	r3, [r7, #24]
 800103e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001040:	4b18      	ldr	r3, [pc, #96]	@ (80010a4 <HAL_GPIO_Init+0x304>)
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001046:	693b      	ldr	r3, [r7, #16]
 8001048:	43db      	mvns	r3, r3
 800104a:	69ba      	ldr	r2, [r7, #24]
 800104c:	4013      	ands	r3, r2
 800104e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001050:	683b      	ldr	r3, [r7, #0]
 8001052:	685b      	ldr	r3, [r3, #4]
 8001054:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001058:	2b00      	cmp	r3, #0
 800105a:	d003      	beq.n	8001064 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800105c:	69ba      	ldr	r2, [r7, #24]
 800105e:	693b      	ldr	r3, [r7, #16]
 8001060:	4313      	orrs	r3, r2
 8001062:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001064:	4a0f      	ldr	r2, [pc, #60]	@ (80010a4 <HAL_GPIO_Init+0x304>)
 8001066:	69bb      	ldr	r3, [r7, #24]
 8001068:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800106a:	69fb      	ldr	r3, [r7, #28]
 800106c:	3301      	adds	r3, #1
 800106e:	61fb      	str	r3, [r7, #28]
 8001070:	69fb      	ldr	r3, [r7, #28]
 8001072:	2b0f      	cmp	r3, #15
 8001074:	f67f aea2 	bls.w	8000dbc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001078:	bf00      	nop
 800107a:	bf00      	nop
 800107c:	3724      	adds	r7, #36	@ 0x24
 800107e:	46bd      	mov	sp, r7
 8001080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001084:	4770      	bx	lr
 8001086:	bf00      	nop
 8001088:	40023800 	.word	0x40023800
 800108c:	40013800 	.word	0x40013800
 8001090:	40020000 	.word	0x40020000
 8001094:	40020400 	.word	0x40020400
 8001098:	40020800 	.word	0x40020800
 800109c:	40020c00 	.word	0x40020c00
 80010a0:	40021000 	.word	0x40021000
 80010a4:	40013c00 	.word	0x40013c00

080010a8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80010a8:	b480      	push	{r7}
 80010aa:	b083      	sub	sp, #12
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
 80010b0:	460b      	mov	r3, r1
 80010b2:	807b      	strh	r3, [r7, #2]
 80010b4:	4613      	mov	r3, r2
 80010b6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80010b8:	787b      	ldrb	r3, [r7, #1]
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d003      	beq.n	80010c6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80010be:	887a      	ldrh	r2, [r7, #2]
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80010c4:	e003      	b.n	80010ce <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80010c6:	887b      	ldrh	r3, [r7, #2]
 80010c8:	041a      	lsls	r2, r3, #16
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	619a      	str	r2, [r3, #24]
}
 80010ce:	bf00      	nop
 80010d0:	370c      	adds	r7, #12
 80010d2:	46bd      	mov	sp, r7
 80010d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d8:	4770      	bx	lr
	...

080010dc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b082      	sub	sp, #8
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	4603      	mov	r3, r0
 80010e4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80010e6:	4b08      	ldr	r3, [pc, #32]	@ (8001108 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80010e8:	695a      	ldr	r2, [r3, #20]
 80010ea:	88fb      	ldrh	r3, [r7, #6]
 80010ec:	4013      	ands	r3, r2
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d006      	beq.n	8001100 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80010f2:	4a05      	ldr	r2, [pc, #20]	@ (8001108 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80010f4:	88fb      	ldrh	r3, [r7, #6]
 80010f6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80010f8:	88fb      	ldrh	r3, [r7, #6]
 80010fa:	4618      	mov	r0, r3
 80010fc:	f000 f806 	bl	800110c <HAL_GPIO_EXTI_Callback>
  }
}
 8001100:	bf00      	nop
 8001102:	3708      	adds	r7, #8
 8001104:	46bd      	mov	sp, r7
 8001106:	bd80      	pop	{r7, pc}
 8001108:	40013c00 	.word	0x40013c00

0800110c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800110c:	b480      	push	{r7}
 800110e:	b083      	sub	sp, #12
 8001110:	af00      	add	r7, sp, #0
 8001112:	4603      	mov	r3, r0
 8001114:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001116:	bf00      	nop
 8001118:	370c      	adds	r7, #12
 800111a:	46bd      	mov	sp, r7
 800111c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001120:	4770      	bx	lr
	...

08001124 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b086      	sub	sp, #24
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	2b00      	cmp	r3, #0
 8001130:	d101      	bne.n	8001136 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001132:	2301      	movs	r3, #1
 8001134:	e267      	b.n	8001606 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	f003 0301 	and.w	r3, r3, #1
 800113e:	2b00      	cmp	r3, #0
 8001140:	d075      	beq.n	800122e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001142:	4b88      	ldr	r3, [pc, #544]	@ (8001364 <HAL_RCC_OscConfig+0x240>)
 8001144:	689b      	ldr	r3, [r3, #8]
 8001146:	f003 030c 	and.w	r3, r3, #12
 800114a:	2b04      	cmp	r3, #4
 800114c:	d00c      	beq.n	8001168 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800114e:	4b85      	ldr	r3, [pc, #532]	@ (8001364 <HAL_RCC_OscConfig+0x240>)
 8001150:	689b      	ldr	r3, [r3, #8]
 8001152:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001156:	2b08      	cmp	r3, #8
 8001158:	d112      	bne.n	8001180 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800115a:	4b82      	ldr	r3, [pc, #520]	@ (8001364 <HAL_RCC_OscConfig+0x240>)
 800115c:	685b      	ldr	r3, [r3, #4]
 800115e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001162:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001166:	d10b      	bne.n	8001180 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001168:	4b7e      	ldr	r3, [pc, #504]	@ (8001364 <HAL_RCC_OscConfig+0x240>)
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001170:	2b00      	cmp	r3, #0
 8001172:	d05b      	beq.n	800122c <HAL_RCC_OscConfig+0x108>
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	685b      	ldr	r3, [r3, #4]
 8001178:	2b00      	cmp	r3, #0
 800117a:	d157      	bne.n	800122c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800117c:	2301      	movs	r3, #1
 800117e:	e242      	b.n	8001606 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	685b      	ldr	r3, [r3, #4]
 8001184:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001188:	d106      	bne.n	8001198 <HAL_RCC_OscConfig+0x74>
 800118a:	4b76      	ldr	r3, [pc, #472]	@ (8001364 <HAL_RCC_OscConfig+0x240>)
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	4a75      	ldr	r2, [pc, #468]	@ (8001364 <HAL_RCC_OscConfig+0x240>)
 8001190:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001194:	6013      	str	r3, [r2, #0]
 8001196:	e01d      	b.n	80011d4 <HAL_RCC_OscConfig+0xb0>
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	685b      	ldr	r3, [r3, #4]
 800119c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80011a0:	d10c      	bne.n	80011bc <HAL_RCC_OscConfig+0x98>
 80011a2:	4b70      	ldr	r3, [pc, #448]	@ (8001364 <HAL_RCC_OscConfig+0x240>)
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	4a6f      	ldr	r2, [pc, #444]	@ (8001364 <HAL_RCC_OscConfig+0x240>)
 80011a8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80011ac:	6013      	str	r3, [r2, #0]
 80011ae:	4b6d      	ldr	r3, [pc, #436]	@ (8001364 <HAL_RCC_OscConfig+0x240>)
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	4a6c      	ldr	r2, [pc, #432]	@ (8001364 <HAL_RCC_OscConfig+0x240>)
 80011b4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80011b8:	6013      	str	r3, [r2, #0]
 80011ba:	e00b      	b.n	80011d4 <HAL_RCC_OscConfig+0xb0>
 80011bc:	4b69      	ldr	r3, [pc, #420]	@ (8001364 <HAL_RCC_OscConfig+0x240>)
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	4a68      	ldr	r2, [pc, #416]	@ (8001364 <HAL_RCC_OscConfig+0x240>)
 80011c2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80011c6:	6013      	str	r3, [r2, #0]
 80011c8:	4b66      	ldr	r3, [pc, #408]	@ (8001364 <HAL_RCC_OscConfig+0x240>)
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	4a65      	ldr	r2, [pc, #404]	@ (8001364 <HAL_RCC_OscConfig+0x240>)
 80011ce:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80011d2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	685b      	ldr	r3, [r3, #4]
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d013      	beq.n	8001204 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011dc:	f7ff fc60 	bl	8000aa0 <HAL_GetTick>
 80011e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011e2:	e008      	b.n	80011f6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80011e4:	f7ff fc5c 	bl	8000aa0 <HAL_GetTick>
 80011e8:	4602      	mov	r2, r0
 80011ea:	693b      	ldr	r3, [r7, #16]
 80011ec:	1ad3      	subs	r3, r2, r3
 80011ee:	2b64      	cmp	r3, #100	@ 0x64
 80011f0:	d901      	bls.n	80011f6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80011f2:	2303      	movs	r3, #3
 80011f4:	e207      	b.n	8001606 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011f6:	4b5b      	ldr	r3, [pc, #364]	@ (8001364 <HAL_RCC_OscConfig+0x240>)
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d0f0      	beq.n	80011e4 <HAL_RCC_OscConfig+0xc0>
 8001202:	e014      	b.n	800122e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001204:	f7ff fc4c 	bl	8000aa0 <HAL_GetTick>
 8001208:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800120a:	e008      	b.n	800121e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800120c:	f7ff fc48 	bl	8000aa0 <HAL_GetTick>
 8001210:	4602      	mov	r2, r0
 8001212:	693b      	ldr	r3, [r7, #16]
 8001214:	1ad3      	subs	r3, r2, r3
 8001216:	2b64      	cmp	r3, #100	@ 0x64
 8001218:	d901      	bls.n	800121e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800121a:	2303      	movs	r3, #3
 800121c:	e1f3      	b.n	8001606 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800121e:	4b51      	ldr	r3, [pc, #324]	@ (8001364 <HAL_RCC_OscConfig+0x240>)
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001226:	2b00      	cmp	r3, #0
 8001228:	d1f0      	bne.n	800120c <HAL_RCC_OscConfig+0xe8>
 800122a:	e000      	b.n	800122e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800122c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	f003 0302 	and.w	r3, r3, #2
 8001236:	2b00      	cmp	r3, #0
 8001238:	d063      	beq.n	8001302 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800123a:	4b4a      	ldr	r3, [pc, #296]	@ (8001364 <HAL_RCC_OscConfig+0x240>)
 800123c:	689b      	ldr	r3, [r3, #8]
 800123e:	f003 030c 	and.w	r3, r3, #12
 8001242:	2b00      	cmp	r3, #0
 8001244:	d00b      	beq.n	800125e <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001246:	4b47      	ldr	r3, [pc, #284]	@ (8001364 <HAL_RCC_OscConfig+0x240>)
 8001248:	689b      	ldr	r3, [r3, #8]
 800124a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800124e:	2b08      	cmp	r3, #8
 8001250:	d11c      	bne.n	800128c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001252:	4b44      	ldr	r3, [pc, #272]	@ (8001364 <HAL_RCC_OscConfig+0x240>)
 8001254:	685b      	ldr	r3, [r3, #4]
 8001256:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800125a:	2b00      	cmp	r3, #0
 800125c:	d116      	bne.n	800128c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800125e:	4b41      	ldr	r3, [pc, #260]	@ (8001364 <HAL_RCC_OscConfig+0x240>)
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	f003 0302 	and.w	r3, r3, #2
 8001266:	2b00      	cmp	r3, #0
 8001268:	d005      	beq.n	8001276 <HAL_RCC_OscConfig+0x152>
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	68db      	ldr	r3, [r3, #12]
 800126e:	2b01      	cmp	r3, #1
 8001270:	d001      	beq.n	8001276 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001272:	2301      	movs	r3, #1
 8001274:	e1c7      	b.n	8001606 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001276:	4b3b      	ldr	r3, [pc, #236]	@ (8001364 <HAL_RCC_OscConfig+0x240>)
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	691b      	ldr	r3, [r3, #16]
 8001282:	00db      	lsls	r3, r3, #3
 8001284:	4937      	ldr	r1, [pc, #220]	@ (8001364 <HAL_RCC_OscConfig+0x240>)
 8001286:	4313      	orrs	r3, r2
 8001288:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800128a:	e03a      	b.n	8001302 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	68db      	ldr	r3, [r3, #12]
 8001290:	2b00      	cmp	r3, #0
 8001292:	d020      	beq.n	80012d6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001294:	4b34      	ldr	r3, [pc, #208]	@ (8001368 <HAL_RCC_OscConfig+0x244>)
 8001296:	2201      	movs	r2, #1
 8001298:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800129a:	f7ff fc01 	bl	8000aa0 <HAL_GetTick>
 800129e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012a0:	e008      	b.n	80012b4 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80012a2:	f7ff fbfd 	bl	8000aa0 <HAL_GetTick>
 80012a6:	4602      	mov	r2, r0
 80012a8:	693b      	ldr	r3, [r7, #16]
 80012aa:	1ad3      	subs	r3, r2, r3
 80012ac:	2b02      	cmp	r3, #2
 80012ae:	d901      	bls.n	80012b4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80012b0:	2303      	movs	r3, #3
 80012b2:	e1a8      	b.n	8001606 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012b4:	4b2b      	ldr	r3, [pc, #172]	@ (8001364 <HAL_RCC_OscConfig+0x240>)
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	f003 0302 	and.w	r3, r3, #2
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d0f0      	beq.n	80012a2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012c0:	4b28      	ldr	r3, [pc, #160]	@ (8001364 <HAL_RCC_OscConfig+0x240>)
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	691b      	ldr	r3, [r3, #16]
 80012cc:	00db      	lsls	r3, r3, #3
 80012ce:	4925      	ldr	r1, [pc, #148]	@ (8001364 <HAL_RCC_OscConfig+0x240>)
 80012d0:	4313      	orrs	r3, r2
 80012d2:	600b      	str	r3, [r1, #0]
 80012d4:	e015      	b.n	8001302 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80012d6:	4b24      	ldr	r3, [pc, #144]	@ (8001368 <HAL_RCC_OscConfig+0x244>)
 80012d8:	2200      	movs	r2, #0
 80012da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012dc:	f7ff fbe0 	bl	8000aa0 <HAL_GetTick>
 80012e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80012e2:	e008      	b.n	80012f6 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80012e4:	f7ff fbdc 	bl	8000aa0 <HAL_GetTick>
 80012e8:	4602      	mov	r2, r0
 80012ea:	693b      	ldr	r3, [r7, #16]
 80012ec:	1ad3      	subs	r3, r2, r3
 80012ee:	2b02      	cmp	r3, #2
 80012f0:	d901      	bls.n	80012f6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80012f2:	2303      	movs	r3, #3
 80012f4:	e187      	b.n	8001606 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80012f6:	4b1b      	ldr	r3, [pc, #108]	@ (8001364 <HAL_RCC_OscConfig+0x240>)
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	f003 0302 	and.w	r3, r3, #2
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d1f0      	bne.n	80012e4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	f003 0308 	and.w	r3, r3, #8
 800130a:	2b00      	cmp	r3, #0
 800130c:	d036      	beq.n	800137c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	695b      	ldr	r3, [r3, #20]
 8001312:	2b00      	cmp	r3, #0
 8001314:	d016      	beq.n	8001344 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001316:	4b15      	ldr	r3, [pc, #84]	@ (800136c <HAL_RCC_OscConfig+0x248>)
 8001318:	2201      	movs	r2, #1
 800131a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800131c:	f7ff fbc0 	bl	8000aa0 <HAL_GetTick>
 8001320:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001322:	e008      	b.n	8001336 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001324:	f7ff fbbc 	bl	8000aa0 <HAL_GetTick>
 8001328:	4602      	mov	r2, r0
 800132a:	693b      	ldr	r3, [r7, #16]
 800132c:	1ad3      	subs	r3, r2, r3
 800132e:	2b02      	cmp	r3, #2
 8001330:	d901      	bls.n	8001336 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001332:	2303      	movs	r3, #3
 8001334:	e167      	b.n	8001606 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001336:	4b0b      	ldr	r3, [pc, #44]	@ (8001364 <HAL_RCC_OscConfig+0x240>)
 8001338:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800133a:	f003 0302 	and.w	r3, r3, #2
 800133e:	2b00      	cmp	r3, #0
 8001340:	d0f0      	beq.n	8001324 <HAL_RCC_OscConfig+0x200>
 8001342:	e01b      	b.n	800137c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001344:	4b09      	ldr	r3, [pc, #36]	@ (800136c <HAL_RCC_OscConfig+0x248>)
 8001346:	2200      	movs	r2, #0
 8001348:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800134a:	f7ff fba9 	bl	8000aa0 <HAL_GetTick>
 800134e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001350:	e00e      	b.n	8001370 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001352:	f7ff fba5 	bl	8000aa0 <HAL_GetTick>
 8001356:	4602      	mov	r2, r0
 8001358:	693b      	ldr	r3, [r7, #16]
 800135a:	1ad3      	subs	r3, r2, r3
 800135c:	2b02      	cmp	r3, #2
 800135e:	d907      	bls.n	8001370 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001360:	2303      	movs	r3, #3
 8001362:	e150      	b.n	8001606 <HAL_RCC_OscConfig+0x4e2>
 8001364:	40023800 	.word	0x40023800
 8001368:	42470000 	.word	0x42470000
 800136c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001370:	4b88      	ldr	r3, [pc, #544]	@ (8001594 <HAL_RCC_OscConfig+0x470>)
 8001372:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001374:	f003 0302 	and.w	r3, r3, #2
 8001378:	2b00      	cmp	r3, #0
 800137a:	d1ea      	bne.n	8001352 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	f003 0304 	and.w	r3, r3, #4
 8001384:	2b00      	cmp	r3, #0
 8001386:	f000 8097 	beq.w	80014b8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800138a:	2300      	movs	r3, #0
 800138c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800138e:	4b81      	ldr	r3, [pc, #516]	@ (8001594 <HAL_RCC_OscConfig+0x470>)
 8001390:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001392:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001396:	2b00      	cmp	r3, #0
 8001398:	d10f      	bne.n	80013ba <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800139a:	2300      	movs	r3, #0
 800139c:	60bb      	str	r3, [r7, #8]
 800139e:	4b7d      	ldr	r3, [pc, #500]	@ (8001594 <HAL_RCC_OscConfig+0x470>)
 80013a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013a2:	4a7c      	ldr	r2, [pc, #496]	@ (8001594 <HAL_RCC_OscConfig+0x470>)
 80013a4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80013a8:	6413      	str	r3, [r2, #64]	@ 0x40
 80013aa:	4b7a      	ldr	r3, [pc, #488]	@ (8001594 <HAL_RCC_OscConfig+0x470>)
 80013ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013ae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80013b2:	60bb      	str	r3, [r7, #8]
 80013b4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80013b6:	2301      	movs	r3, #1
 80013b8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013ba:	4b77      	ldr	r3, [pc, #476]	@ (8001598 <HAL_RCC_OscConfig+0x474>)
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d118      	bne.n	80013f8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80013c6:	4b74      	ldr	r3, [pc, #464]	@ (8001598 <HAL_RCC_OscConfig+0x474>)
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	4a73      	ldr	r2, [pc, #460]	@ (8001598 <HAL_RCC_OscConfig+0x474>)
 80013cc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80013d0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80013d2:	f7ff fb65 	bl	8000aa0 <HAL_GetTick>
 80013d6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013d8:	e008      	b.n	80013ec <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80013da:	f7ff fb61 	bl	8000aa0 <HAL_GetTick>
 80013de:	4602      	mov	r2, r0
 80013e0:	693b      	ldr	r3, [r7, #16]
 80013e2:	1ad3      	subs	r3, r2, r3
 80013e4:	2b02      	cmp	r3, #2
 80013e6:	d901      	bls.n	80013ec <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80013e8:	2303      	movs	r3, #3
 80013ea:	e10c      	b.n	8001606 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013ec:	4b6a      	ldr	r3, [pc, #424]	@ (8001598 <HAL_RCC_OscConfig+0x474>)
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d0f0      	beq.n	80013da <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	689b      	ldr	r3, [r3, #8]
 80013fc:	2b01      	cmp	r3, #1
 80013fe:	d106      	bne.n	800140e <HAL_RCC_OscConfig+0x2ea>
 8001400:	4b64      	ldr	r3, [pc, #400]	@ (8001594 <HAL_RCC_OscConfig+0x470>)
 8001402:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001404:	4a63      	ldr	r2, [pc, #396]	@ (8001594 <HAL_RCC_OscConfig+0x470>)
 8001406:	f043 0301 	orr.w	r3, r3, #1
 800140a:	6713      	str	r3, [r2, #112]	@ 0x70
 800140c:	e01c      	b.n	8001448 <HAL_RCC_OscConfig+0x324>
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	689b      	ldr	r3, [r3, #8]
 8001412:	2b05      	cmp	r3, #5
 8001414:	d10c      	bne.n	8001430 <HAL_RCC_OscConfig+0x30c>
 8001416:	4b5f      	ldr	r3, [pc, #380]	@ (8001594 <HAL_RCC_OscConfig+0x470>)
 8001418:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800141a:	4a5e      	ldr	r2, [pc, #376]	@ (8001594 <HAL_RCC_OscConfig+0x470>)
 800141c:	f043 0304 	orr.w	r3, r3, #4
 8001420:	6713      	str	r3, [r2, #112]	@ 0x70
 8001422:	4b5c      	ldr	r3, [pc, #368]	@ (8001594 <HAL_RCC_OscConfig+0x470>)
 8001424:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001426:	4a5b      	ldr	r2, [pc, #364]	@ (8001594 <HAL_RCC_OscConfig+0x470>)
 8001428:	f043 0301 	orr.w	r3, r3, #1
 800142c:	6713      	str	r3, [r2, #112]	@ 0x70
 800142e:	e00b      	b.n	8001448 <HAL_RCC_OscConfig+0x324>
 8001430:	4b58      	ldr	r3, [pc, #352]	@ (8001594 <HAL_RCC_OscConfig+0x470>)
 8001432:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001434:	4a57      	ldr	r2, [pc, #348]	@ (8001594 <HAL_RCC_OscConfig+0x470>)
 8001436:	f023 0301 	bic.w	r3, r3, #1
 800143a:	6713      	str	r3, [r2, #112]	@ 0x70
 800143c:	4b55      	ldr	r3, [pc, #340]	@ (8001594 <HAL_RCC_OscConfig+0x470>)
 800143e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001440:	4a54      	ldr	r2, [pc, #336]	@ (8001594 <HAL_RCC_OscConfig+0x470>)
 8001442:	f023 0304 	bic.w	r3, r3, #4
 8001446:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	689b      	ldr	r3, [r3, #8]
 800144c:	2b00      	cmp	r3, #0
 800144e:	d015      	beq.n	800147c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001450:	f7ff fb26 	bl	8000aa0 <HAL_GetTick>
 8001454:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001456:	e00a      	b.n	800146e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001458:	f7ff fb22 	bl	8000aa0 <HAL_GetTick>
 800145c:	4602      	mov	r2, r0
 800145e:	693b      	ldr	r3, [r7, #16]
 8001460:	1ad3      	subs	r3, r2, r3
 8001462:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001466:	4293      	cmp	r3, r2
 8001468:	d901      	bls.n	800146e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800146a:	2303      	movs	r3, #3
 800146c:	e0cb      	b.n	8001606 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800146e:	4b49      	ldr	r3, [pc, #292]	@ (8001594 <HAL_RCC_OscConfig+0x470>)
 8001470:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001472:	f003 0302 	and.w	r3, r3, #2
 8001476:	2b00      	cmp	r3, #0
 8001478:	d0ee      	beq.n	8001458 <HAL_RCC_OscConfig+0x334>
 800147a:	e014      	b.n	80014a6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800147c:	f7ff fb10 	bl	8000aa0 <HAL_GetTick>
 8001480:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001482:	e00a      	b.n	800149a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001484:	f7ff fb0c 	bl	8000aa0 <HAL_GetTick>
 8001488:	4602      	mov	r2, r0
 800148a:	693b      	ldr	r3, [r7, #16]
 800148c:	1ad3      	subs	r3, r2, r3
 800148e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001492:	4293      	cmp	r3, r2
 8001494:	d901      	bls.n	800149a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001496:	2303      	movs	r3, #3
 8001498:	e0b5      	b.n	8001606 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800149a:	4b3e      	ldr	r3, [pc, #248]	@ (8001594 <HAL_RCC_OscConfig+0x470>)
 800149c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800149e:	f003 0302 	and.w	r3, r3, #2
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d1ee      	bne.n	8001484 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80014a6:	7dfb      	ldrb	r3, [r7, #23]
 80014a8:	2b01      	cmp	r3, #1
 80014aa:	d105      	bne.n	80014b8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80014ac:	4b39      	ldr	r3, [pc, #228]	@ (8001594 <HAL_RCC_OscConfig+0x470>)
 80014ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014b0:	4a38      	ldr	r2, [pc, #224]	@ (8001594 <HAL_RCC_OscConfig+0x470>)
 80014b2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80014b6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	699b      	ldr	r3, [r3, #24]
 80014bc:	2b00      	cmp	r3, #0
 80014be:	f000 80a1 	beq.w	8001604 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80014c2:	4b34      	ldr	r3, [pc, #208]	@ (8001594 <HAL_RCC_OscConfig+0x470>)
 80014c4:	689b      	ldr	r3, [r3, #8]
 80014c6:	f003 030c 	and.w	r3, r3, #12
 80014ca:	2b08      	cmp	r3, #8
 80014cc:	d05c      	beq.n	8001588 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	699b      	ldr	r3, [r3, #24]
 80014d2:	2b02      	cmp	r3, #2
 80014d4:	d141      	bne.n	800155a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80014d6:	4b31      	ldr	r3, [pc, #196]	@ (800159c <HAL_RCC_OscConfig+0x478>)
 80014d8:	2200      	movs	r2, #0
 80014da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014dc:	f7ff fae0 	bl	8000aa0 <HAL_GetTick>
 80014e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80014e2:	e008      	b.n	80014f6 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80014e4:	f7ff fadc 	bl	8000aa0 <HAL_GetTick>
 80014e8:	4602      	mov	r2, r0
 80014ea:	693b      	ldr	r3, [r7, #16]
 80014ec:	1ad3      	subs	r3, r2, r3
 80014ee:	2b02      	cmp	r3, #2
 80014f0:	d901      	bls.n	80014f6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80014f2:	2303      	movs	r3, #3
 80014f4:	e087      	b.n	8001606 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80014f6:	4b27      	ldr	r3, [pc, #156]	@ (8001594 <HAL_RCC_OscConfig+0x470>)
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d1f0      	bne.n	80014e4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	69da      	ldr	r2, [r3, #28]
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	6a1b      	ldr	r3, [r3, #32]
 800150a:	431a      	orrs	r2, r3
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001510:	019b      	lsls	r3, r3, #6
 8001512:	431a      	orrs	r2, r3
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001518:	085b      	lsrs	r3, r3, #1
 800151a:	3b01      	subs	r3, #1
 800151c:	041b      	lsls	r3, r3, #16
 800151e:	431a      	orrs	r2, r3
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001524:	061b      	lsls	r3, r3, #24
 8001526:	491b      	ldr	r1, [pc, #108]	@ (8001594 <HAL_RCC_OscConfig+0x470>)
 8001528:	4313      	orrs	r3, r2
 800152a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800152c:	4b1b      	ldr	r3, [pc, #108]	@ (800159c <HAL_RCC_OscConfig+0x478>)
 800152e:	2201      	movs	r2, #1
 8001530:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001532:	f7ff fab5 	bl	8000aa0 <HAL_GetTick>
 8001536:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001538:	e008      	b.n	800154c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800153a:	f7ff fab1 	bl	8000aa0 <HAL_GetTick>
 800153e:	4602      	mov	r2, r0
 8001540:	693b      	ldr	r3, [r7, #16]
 8001542:	1ad3      	subs	r3, r2, r3
 8001544:	2b02      	cmp	r3, #2
 8001546:	d901      	bls.n	800154c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001548:	2303      	movs	r3, #3
 800154a:	e05c      	b.n	8001606 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800154c:	4b11      	ldr	r3, [pc, #68]	@ (8001594 <HAL_RCC_OscConfig+0x470>)
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001554:	2b00      	cmp	r3, #0
 8001556:	d0f0      	beq.n	800153a <HAL_RCC_OscConfig+0x416>
 8001558:	e054      	b.n	8001604 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800155a:	4b10      	ldr	r3, [pc, #64]	@ (800159c <HAL_RCC_OscConfig+0x478>)
 800155c:	2200      	movs	r2, #0
 800155e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001560:	f7ff fa9e 	bl	8000aa0 <HAL_GetTick>
 8001564:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001566:	e008      	b.n	800157a <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001568:	f7ff fa9a 	bl	8000aa0 <HAL_GetTick>
 800156c:	4602      	mov	r2, r0
 800156e:	693b      	ldr	r3, [r7, #16]
 8001570:	1ad3      	subs	r3, r2, r3
 8001572:	2b02      	cmp	r3, #2
 8001574:	d901      	bls.n	800157a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001576:	2303      	movs	r3, #3
 8001578:	e045      	b.n	8001606 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800157a:	4b06      	ldr	r3, [pc, #24]	@ (8001594 <HAL_RCC_OscConfig+0x470>)
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001582:	2b00      	cmp	r3, #0
 8001584:	d1f0      	bne.n	8001568 <HAL_RCC_OscConfig+0x444>
 8001586:	e03d      	b.n	8001604 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	699b      	ldr	r3, [r3, #24]
 800158c:	2b01      	cmp	r3, #1
 800158e:	d107      	bne.n	80015a0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001590:	2301      	movs	r3, #1
 8001592:	e038      	b.n	8001606 <HAL_RCC_OscConfig+0x4e2>
 8001594:	40023800 	.word	0x40023800
 8001598:	40007000 	.word	0x40007000
 800159c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80015a0:	4b1b      	ldr	r3, [pc, #108]	@ (8001610 <HAL_RCC_OscConfig+0x4ec>)
 80015a2:	685b      	ldr	r3, [r3, #4]
 80015a4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	699b      	ldr	r3, [r3, #24]
 80015aa:	2b01      	cmp	r3, #1
 80015ac:	d028      	beq.n	8001600 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80015b8:	429a      	cmp	r2, r3
 80015ba:	d121      	bne.n	8001600 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80015c6:	429a      	cmp	r2, r3
 80015c8:	d11a      	bne.n	8001600 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80015ca:	68fa      	ldr	r2, [r7, #12]
 80015cc:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80015d0:	4013      	ands	r3, r2
 80015d2:	687a      	ldr	r2, [r7, #4]
 80015d4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80015d6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80015d8:	4293      	cmp	r3, r2
 80015da:	d111      	bne.n	8001600 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80015e6:	085b      	lsrs	r3, r3, #1
 80015e8:	3b01      	subs	r3, #1
 80015ea:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80015ec:	429a      	cmp	r2, r3
 80015ee:	d107      	bne.n	8001600 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80015fa:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80015fc:	429a      	cmp	r2, r3
 80015fe:	d001      	beq.n	8001604 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8001600:	2301      	movs	r3, #1
 8001602:	e000      	b.n	8001606 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001604:	2300      	movs	r3, #0
}
 8001606:	4618      	mov	r0, r3
 8001608:	3718      	adds	r7, #24
 800160a:	46bd      	mov	sp, r7
 800160c:	bd80      	pop	{r7, pc}
 800160e:	bf00      	nop
 8001610:	40023800 	.word	0x40023800

08001614 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	b084      	sub	sp, #16
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]
 800161c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	2b00      	cmp	r3, #0
 8001622:	d101      	bne.n	8001628 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001624:	2301      	movs	r3, #1
 8001626:	e0cc      	b.n	80017c2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001628:	4b68      	ldr	r3, [pc, #416]	@ (80017cc <HAL_RCC_ClockConfig+0x1b8>)
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	f003 0307 	and.w	r3, r3, #7
 8001630:	683a      	ldr	r2, [r7, #0]
 8001632:	429a      	cmp	r2, r3
 8001634:	d90c      	bls.n	8001650 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001636:	4b65      	ldr	r3, [pc, #404]	@ (80017cc <HAL_RCC_ClockConfig+0x1b8>)
 8001638:	683a      	ldr	r2, [r7, #0]
 800163a:	b2d2      	uxtb	r2, r2
 800163c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800163e:	4b63      	ldr	r3, [pc, #396]	@ (80017cc <HAL_RCC_ClockConfig+0x1b8>)
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	f003 0307 	and.w	r3, r3, #7
 8001646:	683a      	ldr	r2, [r7, #0]
 8001648:	429a      	cmp	r2, r3
 800164a:	d001      	beq.n	8001650 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800164c:	2301      	movs	r3, #1
 800164e:	e0b8      	b.n	80017c2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	f003 0302 	and.w	r3, r3, #2
 8001658:	2b00      	cmp	r3, #0
 800165a:	d020      	beq.n	800169e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	f003 0304 	and.w	r3, r3, #4
 8001664:	2b00      	cmp	r3, #0
 8001666:	d005      	beq.n	8001674 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001668:	4b59      	ldr	r3, [pc, #356]	@ (80017d0 <HAL_RCC_ClockConfig+0x1bc>)
 800166a:	689b      	ldr	r3, [r3, #8]
 800166c:	4a58      	ldr	r2, [pc, #352]	@ (80017d0 <HAL_RCC_ClockConfig+0x1bc>)
 800166e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001672:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	f003 0308 	and.w	r3, r3, #8
 800167c:	2b00      	cmp	r3, #0
 800167e:	d005      	beq.n	800168c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001680:	4b53      	ldr	r3, [pc, #332]	@ (80017d0 <HAL_RCC_ClockConfig+0x1bc>)
 8001682:	689b      	ldr	r3, [r3, #8]
 8001684:	4a52      	ldr	r2, [pc, #328]	@ (80017d0 <HAL_RCC_ClockConfig+0x1bc>)
 8001686:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800168a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800168c:	4b50      	ldr	r3, [pc, #320]	@ (80017d0 <HAL_RCC_ClockConfig+0x1bc>)
 800168e:	689b      	ldr	r3, [r3, #8]
 8001690:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	689b      	ldr	r3, [r3, #8]
 8001698:	494d      	ldr	r1, [pc, #308]	@ (80017d0 <HAL_RCC_ClockConfig+0x1bc>)
 800169a:	4313      	orrs	r3, r2
 800169c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	f003 0301 	and.w	r3, r3, #1
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d044      	beq.n	8001734 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	685b      	ldr	r3, [r3, #4]
 80016ae:	2b01      	cmp	r3, #1
 80016b0:	d107      	bne.n	80016c2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016b2:	4b47      	ldr	r3, [pc, #284]	@ (80017d0 <HAL_RCC_ClockConfig+0x1bc>)
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d119      	bne.n	80016f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80016be:	2301      	movs	r3, #1
 80016c0:	e07f      	b.n	80017c2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	685b      	ldr	r3, [r3, #4]
 80016c6:	2b02      	cmp	r3, #2
 80016c8:	d003      	beq.n	80016d2 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80016ce:	2b03      	cmp	r3, #3
 80016d0:	d107      	bne.n	80016e2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016d2:	4b3f      	ldr	r3, [pc, #252]	@ (80017d0 <HAL_RCC_ClockConfig+0x1bc>)
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d109      	bne.n	80016f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80016de:	2301      	movs	r3, #1
 80016e0:	e06f      	b.n	80017c2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016e2:	4b3b      	ldr	r3, [pc, #236]	@ (80017d0 <HAL_RCC_ClockConfig+0x1bc>)
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	f003 0302 	and.w	r3, r3, #2
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d101      	bne.n	80016f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80016ee:	2301      	movs	r3, #1
 80016f0:	e067      	b.n	80017c2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80016f2:	4b37      	ldr	r3, [pc, #220]	@ (80017d0 <HAL_RCC_ClockConfig+0x1bc>)
 80016f4:	689b      	ldr	r3, [r3, #8]
 80016f6:	f023 0203 	bic.w	r2, r3, #3
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	685b      	ldr	r3, [r3, #4]
 80016fe:	4934      	ldr	r1, [pc, #208]	@ (80017d0 <HAL_RCC_ClockConfig+0x1bc>)
 8001700:	4313      	orrs	r3, r2
 8001702:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001704:	f7ff f9cc 	bl	8000aa0 <HAL_GetTick>
 8001708:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800170a:	e00a      	b.n	8001722 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800170c:	f7ff f9c8 	bl	8000aa0 <HAL_GetTick>
 8001710:	4602      	mov	r2, r0
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	1ad3      	subs	r3, r2, r3
 8001716:	f241 3288 	movw	r2, #5000	@ 0x1388
 800171a:	4293      	cmp	r3, r2
 800171c:	d901      	bls.n	8001722 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800171e:	2303      	movs	r3, #3
 8001720:	e04f      	b.n	80017c2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001722:	4b2b      	ldr	r3, [pc, #172]	@ (80017d0 <HAL_RCC_ClockConfig+0x1bc>)
 8001724:	689b      	ldr	r3, [r3, #8]
 8001726:	f003 020c 	and.w	r2, r3, #12
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	685b      	ldr	r3, [r3, #4]
 800172e:	009b      	lsls	r3, r3, #2
 8001730:	429a      	cmp	r2, r3
 8001732:	d1eb      	bne.n	800170c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001734:	4b25      	ldr	r3, [pc, #148]	@ (80017cc <HAL_RCC_ClockConfig+0x1b8>)
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	f003 0307 	and.w	r3, r3, #7
 800173c:	683a      	ldr	r2, [r7, #0]
 800173e:	429a      	cmp	r2, r3
 8001740:	d20c      	bcs.n	800175c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001742:	4b22      	ldr	r3, [pc, #136]	@ (80017cc <HAL_RCC_ClockConfig+0x1b8>)
 8001744:	683a      	ldr	r2, [r7, #0]
 8001746:	b2d2      	uxtb	r2, r2
 8001748:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800174a:	4b20      	ldr	r3, [pc, #128]	@ (80017cc <HAL_RCC_ClockConfig+0x1b8>)
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	f003 0307 	and.w	r3, r3, #7
 8001752:	683a      	ldr	r2, [r7, #0]
 8001754:	429a      	cmp	r2, r3
 8001756:	d001      	beq.n	800175c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001758:	2301      	movs	r3, #1
 800175a:	e032      	b.n	80017c2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	f003 0304 	and.w	r3, r3, #4
 8001764:	2b00      	cmp	r3, #0
 8001766:	d008      	beq.n	800177a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001768:	4b19      	ldr	r3, [pc, #100]	@ (80017d0 <HAL_RCC_ClockConfig+0x1bc>)
 800176a:	689b      	ldr	r3, [r3, #8]
 800176c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	68db      	ldr	r3, [r3, #12]
 8001774:	4916      	ldr	r1, [pc, #88]	@ (80017d0 <HAL_RCC_ClockConfig+0x1bc>)
 8001776:	4313      	orrs	r3, r2
 8001778:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	f003 0308 	and.w	r3, r3, #8
 8001782:	2b00      	cmp	r3, #0
 8001784:	d009      	beq.n	800179a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001786:	4b12      	ldr	r3, [pc, #72]	@ (80017d0 <HAL_RCC_ClockConfig+0x1bc>)
 8001788:	689b      	ldr	r3, [r3, #8]
 800178a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	691b      	ldr	r3, [r3, #16]
 8001792:	00db      	lsls	r3, r3, #3
 8001794:	490e      	ldr	r1, [pc, #56]	@ (80017d0 <HAL_RCC_ClockConfig+0x1bc>)
 8001796:	4313      	orrs	r3, r2
 8001798:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800179a:	f000 f821 	bl	80017e0 <HAL_RCC_GetSysClockFreq>
 800179e:	4602      	mov	r2, r0
 80017a0:	4b0b      	ldr	r3, [pc, #44]	@ (80017d0 <HAL_RCC_ClockConfig+0x1bc>)
 80017a2:	689b      	ldr	r3, [r3, #8]
 80017a4:	091b      	lsrs	r3, r3, #4
 80017a6:	f003 030f 	and.w	r3, r3, #15
 80017aa:	490a      	ldr	r1, [pc, #40]	@ (80017d4 <HAL_RCC_ClockConfig+0x1c0>)
 80017ac:	5ccb      	ldrb	r3, [r1, r3]
 80017ae:	fa22 f303 	lsr.w	r3, r2, r3
 80017b2:	4a09      	ldr	r2, [pc, #36]	@ (80017d8 <HAL_RCC_ClockConfig+0x1c4>)
 80017b4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80017b6:	4b09      	ldr	r3, [pc, #36]	@ (80017dc <HAL_RCC_ClockConfig+0x1c8>)
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	4618      	mov	r0, r3
 80017bc:	f7ff f84c 	bl	8000858 <HAL_InitTick>

  return HAL_OK;
 80017c0:	2300      	movs	r3, #0
}
 80017c2:	4618      	mov	r0, r3
 80017c4:	3710      	adds	r7, #16
 80017c6:	46bd      	mov	sp, r7
 80017c8:	bd80      	pop	{r7, pc}
 80017ca:	bf00      	nop
 80017cc:	40023c00 	.word	0x40023c00
 80017d0:	40023800 	.word	0x40023800
 80017d4:	080059e4 	.word	0x080059e4
 80017d8:	20000000 	.word	0x20000000
 80017dc:	20000004 	.word	0x20000004

080017e0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80017e0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80017e4:	b090      	sub	sp, #64	@ 0x40
 80017e6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80017e8:	2300      	movs	r3, #0
 80017ea:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 80017ec:	2300      	movs	r3, #0
 80017ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 80017f0:	2300      	movs	r3, #0
 80017f2:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 80017f4:	2300      	movs	r3, #0
 80017f6:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80017f8:	4b59      	ldr	r3, [pc, #356]	@ (8001960 <HAL_RCC_GetSysClockFreq+0x180>)
 80017fa:	689b      	ldr	r3, [r3, #8]
 80017fc:	f003 030c 	and.w	r3, r3, #12
 8001800:	2b08      	cmp	r3, #8
 8001802:	d00d      	beq.n	8001820 <HAL_RCC_GetSysClockFreq+0x40>
 8001804:	2b08      	cmp	r3, #8
 8001806:	f200 80a1 	bhi.w	800194c <HAL_RCC_GetSysClockFreq+0x16c>
 800180a:	2b00      	cmp	r3, #0
 800180c:	d002      	beq.n	8001814 <HAL_RCC_GetSysClockFreq+0x34>
 800180e:	2b04      	cmp	r3, #4
 8001810:	d003      	beq.n	800181a <HAL_RCC_GetSysClockFreq+0x3a>
 8001812:	e09b      	b.n	800194c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001814:	4b53      	ldr	r3, [pc, #332]	@ (8001964 <HAL_RCC_GetSysClockFreq+0x184>)
 8001816:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001818:	e09b      	b.n	8001952 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800181a:	4b53      	ldr	r3, [pc, #332]	@ (8001968 <HAL_RCC_GetSysClockFreq+0x188>)
 800181c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800181e:	e098      	b.n	8001952 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001820:	4b4f      	ldr	r3, [pc, #316]	@ (8001960 <HAL_RCC_GetSysClockFreq+0x180>)
 8001822:	685b      	ldr	r3, [r3, #4]
 8001824:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001828:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800182a:	4b4d      	ldr	r3, [pc, #308]	@ (8001960 <HAL_RCC_GetSysClockFreq+0x180>)
 800182c:	685b      	ldr	r3, [r3, #4]
 800182e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001832:	2b00      	cmp	r3, #0
 8001834:	d028      	beq.n	8001888 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001836:	4b4a      	ldr	r3, [pc, #296]	@ (8001960 <HAL_RCC_GetSysClockFreq+0x180>)
 8001838:	685b      	ldr	r3, [r3, #4]
 800183a:	099b      	lsrs	r3, r3, #6
 800183c:	2200      	movs	r2, #0
 800183e:	623b      	str	r3, [r7, #32]
 8001840:	627a      	str	r2, [r7, #36]	@ 0x24
 8001842:	6a3b      	ldr	r3, [r7, #32]
 8001844:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001848:	2100      	movs	r1, #0
 800184a:	4b47      	ldr	r3, [pc, #284]	@ (8001968 <HAL_RCC_GetSysClockFreq+0x188>)
 800184c:	fb03 f201 	mul.w	r2, r3, r1
 8001850:	2300      	movs	r3, #0
 8001852:	fb00 f303 	mul.w	r3, r0, r3
 8001856:	4413      	add	r3, r2
 8001858:	4a43      	ldr	r2, [pc, #268]	@ (8001968 <HAL_RCC_GetSysClockFreq+0x188>)
 800185a:	fba0 1202 	umull	r1, r2, r0, r2
 800185e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001860:	460a      	mov	r2, r1
 8001862:	62ba      	str	r2, [r7, #40]	@ 0x28
 8001864:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001866:	4413      	add	r3, r2
 8001868:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800186a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800186c:	2200      	movs	r2, #0
 800186e:	61bb      	str	r3, [r7, #24]
 8001870:	61fa      	str	r2, [r7, #28]
 8001872:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001876:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800187a:	f7fe fcb1 	bl	80001e0 <__aeabi_uldivmod>
 800187e:	4602      	mov	r2, r0
 8001880:	460b      	mov	r3, r1
 8001882:	4613      	mov	r3, r2
 8001884:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001886:	e053      	b.n	8001930 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001888:	4b35      	ldr	r3, [pc, #212]	@ (8001960 <HAL_RCC_GetSysClockFreq+0x180>)
 800188a:	685b      	ldr	r3, [r3, #4]
 800188c:	099b      	lsrs	r3, r3, #6
 800188e:	2200      	movs	r2, #0
 8001890:	613b      	str	r3, [r7, #16]
 8001892:	617a      	str	r2, [r7, #20]
 8001894:	693b      	ldr	r3, [r7, #16]
 8001896:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800189a:	f04f 0b00 	mov.w	fp, #0
 800189e:	4652      	mov	r2, sl
 80018a0:	465b      	mov	r3, fp
 80018a2:	f04f 0000 	mov.w	r0, #0
 80018a6:	f04f 0100 	mov.w	r1, #0
 80018aa:	0159      	lsls	r1, r3, #5
 80018ac:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80018b0:	0150      	lsls	r0, r2, #5
 80018b2:	4602      	mov	r2, r0
 80018b4:	460b      	mov	r3, r1
 80018b6:	ebb2 080a 	subs.w	r8, r2, sl
 80018ba:	eb63 090b 	sbc.w	r9, r3, fp
 80018be:	f04f 0200 	mov.w	r2, #0
 80018c2:	f04f 0300 	mov.w	r3, #0
 80018c6:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80018ca:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80018ce:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80018d2:	ebb2 0408 	subs.w	r4, r2, r8
 80018d6:	eb63 0509 	sbc.w	r5, r3, r9
 80018da:	f04f 0200 	mov.w	r2, #0
 80018de:	f04f 0300 	mov.w	r3, #0
 80018e2:	00eb      	lsls	r3, r5, #3
 80018e4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80018e8:	00e2      	lsls	r2, r4, #3
 80018ea:	4614      	mov	r4, r2
 80018ec:	461d      	mov	r5, r3
 80018ee:	eb14 030a 	adds.w	r3, r4, sl
 80018f2:	603b      	str	r3, [r7, #0]
 80018f4:	eb45 030b 	adc.w	r3, r5, fp
 80018f8:	607b      	str	r3, [r7, #4]
 80018fa:	f04f 0200 	mov.w	r2, #0
 80018fe:	f04f 0300 	mov.w	r3, #0
 8001902:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001906:	4629      	mov	r1, r5
 8001908:	028b      	lsls	r3, r1, #10
 800190a:	4621      	mov	r1, r4
 800190c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001910:	4621      	mov	r1, r4
 8001912:	028a      	lsls	r2, r1, #10
 8001914:	4610      	mov	r0, r2
 8001916:	4619      	mov	r1, r3
 8001918:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800191a:	2200      	movs	r2, #0
 800191c:	60bb      	str	r3, [r7, #8]
 800191e:	60fa      	str	r2, [r7, #12]
 8001920:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001924:	f7fe fc5c 	bl	80001e0 <__aeabi_uldivmod>
 8001928:	4602      	mov	r2, r0
 800192a:	460b      	mov	r3, r1
 800192c:	4613      	mov	r3, r2
 800192e:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8001930:	4b0b      	ldr	r3, [pc, #44]	@ (8001960 <HAL_RCC_GetSysClockFreq+0x180>)
 8001932:	685b      	ldr	r3, [r3, #4]
 8001934:	0c1b      	lsrs	r3, r3, #16
 8001936:	f003 0303 	and.w	r3, r3, #3
 800193a:	3301      	adds	r3, #1
 800193c:	005b      	lsls	r3, r3, #1
 800193e:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8001940:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001942:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001944:	fbb2 f3f3 	udiv	r3, r2, r3
 8001948:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800194a:	e002      	b.n	8001952 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800194c:	4b05      	ldr	r3, [pc, #20]	@ (8001964 <HAL_RCC_GetSysClockFreq+0x184>)
 800194e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001950:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001952:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8001954:	4618      	mov	r0, r3
 8001956:	3740      	adds	r7, #64	@ 0x40
 8001958:	46bd      	mov	sp, r7
 800195a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800195e:	bf00      	nop
 8001960:	40023800 	.word	0x40023800
 8001964:	00f42400 	.word	0x00f42400
 8001968:	017d7840 	.word	0x017d7840

0800196c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800196c:	b480      	push	{r7}
 800196e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001970:	4b03      	ldr	r3, [pc, #12]	@ (8001980 <HAL_RCC_GetHCLKFreq+0x14>)
 8001972:	681b      	ldr	r3, [r3, #0]
}
 8001974:	4618      	mov	r0, r3
 8001976:	46bd      	mov	sp, r7
 8001978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197c:	4770      	bx	lr
 800197e:	bf00      	nop
 8001980:	20000000 	.word	0x20000000

08001984 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001988:	f7ff fff0 	bl	800196c <HAL_RCC_GetHCLKFreq>
 800198c:	4602      	mov	r2, r0
 800198e:	4b05      	ldr	r3, [pc, #20]	@ (80019a4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001990:	689b      	ldr	r3, [r3, #8]
 8001992:	0a9b      	lsrs	r3, r3, #10
 8001994:	f003 0307 	and.w	r3, r3, #7
 8001998:	4903      	ldr	r1, [pc, #12]	@ (80019a8 <HAL_RCC_GetPCLK1Freq+0x24>)
 800199a:	5ccb      	ldrb	r3, [r1, r3]
 800199c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80019a0:	4618      	mov	r0, r3
 80019a2:	bd80      	pop	{r7, pc}
 80019a4:	40023800 	.word	0x40023800
 80019a8:	080059f4 	.word	0x080059f4

080019ac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80019b0:	f7ff ffdc 	bl	800196c <HAL_RCC_GetHCLKFreq>
 80019b4:	4602      	mov	r2, r0
 80019b6:	4b05      	ldr	r3, [pc, #20]	@ (80019cc <HAL_RCC_GetPCLK2Freq+0x20>)
 80019b8:	689b      	ldr	r3, [r3, #8]
 80019ba:	0b5b      	lsrs	r3, r3, #13
 80019bc:	f003 0307 	and.w	r3, r3, #7
 80019c0:	4903      	ldr	r1, [pc, #12]	@ (80019d0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80019c2:	5ccb      	ldrb	r3, [r1, r3]
 80019c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80019c8:	4618      	mov	r0, r3
 80019ca:	bd80      	pop	{r7, pc}
 80019cc:	40023800 	.word	0x40023800
 80019d0:	080059f4 	.word	0x080059f4

080019d4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80019d4:	b480      	push	{r7}
 80019d6:	b083      	sub	sp, #12
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]
 80019dc:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	220f      	movs	r2, #15
 80019e2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80019e4:	4b12      	ldr	r3, [pc, #72]	@ (8001a30 <HAL_RCC_GetClockConfig+0x5c>)
 80019e6:	689b      	ldr	r3, [r3, #8]
 80019e8:	f003 0203 	and.w	r2, r3, #3
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80019f0:	4b0f      	ldr	r3, [pc, #60]	@ (8001a30 <HAL_RCC_GetClockConfig+0x5c>)
 80019f2:	689b      	ldr	r3, [r3, #8]
 80019f4:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80019fc:	4b0c      	ldr	r3, [pc, #48]	@ (8001a30 <HAL_RCC_GetClockConfig+0x5c>)
 80019fe:	689b      	ldr	r3, [r3, #8]
 8001a00:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001a08:	4b09      	ldr	r3, [pc, #36]	@ (8001a30 <HAL_RCC_GetClockConfig+0x5c>)
 8001a0a:	689b      	ldr	r3, [r3, #8]
 8001a0c:	08db      	lsrs	r3, r3, #3
 8001a0e:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001a16:	4b07      	ldr	r3, [pc, #28]	@ (8001a34 <HAL_RCC_GetClockConfig+0x60>)
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	f003 0207 	and.w	r2, r3, #7
 8001a1e:	683b      	ldr	r3, [r7, #0]
 8001a20:	601a      	str	r2, [r3, #0]
}
 8001a22:	bf00      	nop
 8001a24:	370c      	adds	r7, #12
 8001a26:	46bd      	mov	sp, r7
 8001a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2c:	4770      	bx	lr
 8001a2e:	bf00      	nop
 8001a30:	40023800 	.word	0x40023800
 8001a34:	40023c00 	.word	0x40023c00

08001a38 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b082      	sub	sp, #8
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d101      	bne.n	8001a4a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001a46:	2301      	movs	r3, #1
 8001a48:	e041      	b.n	8001ace <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001a50:	b2db      	uxtb	r3, r3
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d106      	bne.n	8001a64 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	2200      	movs	r2, #0
 8001a5a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001a5e:	6878      	ldr	r0, [r7, #4]
 8001a60:	f000 f839 	bl	8001ad6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	2202      	movs	r2, #2
 8001a68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681a      	ldr	r2, [r3, #0]
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	3304      	adds	r3, #4
 8001a74:	4619      	mov	r1, r3
 8001a76:	4610      	mov	r0, r2
 8001a78:	f000 f9b2 	bl	8001de0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	2201      	movs	r2, #1
 8001a80:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	2201      	movs	r2, #1
 8001a88:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	2201      	movs	r2, #1
 8001a90:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	2201      	movs	r2, #1
 8001a98:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	2201      	movs	r2, #1
 8001aa0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	2201      	movs	r2, #1
 8001aa8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	2201      	movs	r2, #1
 8001ab0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	2201      	movs	r2, #1
 8001ab8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	2201      	movs	r2, #1
 8001ac0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	2201      	movs	r2, #1
 8001ac8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001acc:	2300      	movs	r3, #0
}
 8001ace:	4618      	mov	r0, r3
 8001ad0:	3708      	adds	r7, #8
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	bd80      	pop	{r7, pc}

08001ad6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001ad6:	b480      	push	{r7}
 8001ad8:	b083      	sub	sp, #12
 8001ada:	af00      	add	r7, sp, #0
 8001adc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001ade:	bf00      	nop
 8001ae0:	370c      	adds	r7, #12
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae8:	4770      	bx	lr
	...

08001aec <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001aec:	b480      	push	{r7}
 8001aee:	b085      	sub	sp, #20
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001afa:	b2db      	uxtb	r3, r3
 8001afc:	2b01      	cmp	r3, #1
 8001afe:	d001      	beq.n	8001b04 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001b00:	2301      	movs	r3, #1
 8001b02:	e044      	b.n	8001b8e <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	2202      	movs	r2, #2
 8001b08:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	68da      	ldr	r2, [r3, #12]
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	f042 0201 	orr.w	r2, r2, #1
 8001b1a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	4a1e      	ldr	r2, [pc, #120]	@ (8001b9c <HAL_TIM_Base_Start_IT+0xb0>)
 8001b22:	4293      	cmp	r3, r2
 8001b24:	d018      	beq.n	8001b58 <HAL_TIM_Base_Start_IT+0x6c>
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001b2e:	d013      	beq.n	8001b58 <HAL_TIM_Base_Start_IT+0x6c>
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	4a1a      	ldr	r2, [pc, #104]	@ (8001ba0 <HAL_TIM_Base_Start_IT+0xb4>)
 8001b36:	4293      	cmp	r3, r2
 8001b38:	d00e      	beq.n	8001b58 <HAL_TIM_Base_Start_IT+0x6c>
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	4a19      	ldr	r2, [pc, #100]	@ (8001ba4 <HAL_TIM_Base_Start_IT+0xb8>)
 8001b40:	4293      	cmp	r3, r2
 8001b42:	d009      	beq.n	8001b58 <HAL_TIM_Base_Start_IT+0x6c>
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	4a17      	ldr	r2, [pc, #92]	@ (8001ba8 <HAL_TIM_Base_Start_IT+0xbc>)
 8001b4a:	4293      	cmp	r3, r2
 8001b4c:	d004      	beq.n	8001b58 <HAL_TIM_Base_Start_IT+0x6c>
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	4a16      	ldr	r2, [pc, #88]	@ (8001bac <HAL_TIM_Base_Start_IT+0xc0>)
 8001b54:	4293      	cmp	r3, r2
 8001b56:	d111      	bne.n	8001b7c <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	689b      	ldr	r3, [r3, #8]
 8001b5e:	f003 0307 	and.w	r3, r3, #7
 8001b62:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	2b06      	cmp	r3, #6
 8001b68:	d010      	beq.n	8001b8c <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	681a      	ldr	r2, [r3, #0]
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	f042 0201 	orr.w	r2, r2, #1
 8001b78:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001b7a:	e007      	b.n	8001b8c <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	681a      	ldr	r2, [r3, #0]
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	f042 0201 	orr.w	r2, r2, #1
 8001b8a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001b8c:	2300      	movs	r3, #0
}
 8001b8e:	4618      	mov	r0, r3
 8001b90:	3714      	adds	r7, #20
 8001b92:	46bd      	mov	sp, r7
 8001b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b98:	4770      	bx	lr
 8001b9a:	bf00      	nop
 8001b9c:	40010000 	.word	0x40010000
 8001ba0:	40000400 	.word	0x40000400
 8001ba4:	40000800 	.word	0x40000800
 8001ba8:	40000c00 	.word	0x40000c00
 8001bac:	40014000 	.word	0x40014000

08001bb0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b084      	sub	sp, #16
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	68db      	ldr	r3, [r3, #12]
 8001bbe:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	691b      	ldr	r3, [r3, #16]
 8001bc6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001bc8:	68bb      	ldr	r3, [r7, #8]
 8001bca:	f003 0302 	and.w	r3, r3, #2
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d020      	beq.n	8001c14 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	f003 0302 	and.w	r3, r3, #2
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d01b      	beq.n	8001c14 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	f06f 0202 	mvn.w	r2, #2
 8001be4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	2201      	movs	r2, #1
 8001bea:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	699b      	ldr	r3, [r3, #24]
 8001bf2:	f003 0303 	and.w	r3, r3, #3
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d003      	beq.n	8001c02 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001bfa:	6878      	ldr	r0, [r7, #4]
 8001bfc:	f000 f8d2 	bl	8001da4 <HAL_TIM_IC_CaptureCallback>
 8001c00:	e005      	b.n	8001c0e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c02:	6878      	ldr	r0, [r7, #4]
 8001c04:	f000 f8c4 	bl	8001d90 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c08:	6878      	ldr	r0, [r7, #4]
 8001c0a:	f000 f8d5 	bl	8001db8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	2200      	movs	r2, #0
 8001c12:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8001c14:	68bb      	ldr	r3, [r7, #8]
 8001c16:	f003 0304 	and.w	r3, r3, #4
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d020      	beq.n	8001c60 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	f003 0304 	and.w	r3, r3, #4
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d01b      	beq.n	8001c60 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	f06f 0204 	mvn.w	r2, #4
 8001c30:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	2202      	movs	r2, #2
 8001c36:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	699b      	ldr	r3, [r3, #24]
 8001c3e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d003      	beq.n	8001c4e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001c46:	6878      	ldr	r0, [r7, #4]
 8001c48:	f000 f8ac 	bl	8001da4 <HAL_TIM_IC_CaptureCallback>
 8001c4c:	e005      	b.n	8001c5a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c4e:	6878      	ldr	r0, [r7, #4]
 8001c50:	f000 f89e 	bl	8001d90 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c54:	6878      	ldr	r0, [r7, #4]
 8001c56:	f000 f8af 	bl	8001db8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8001c60:	68bb      	ldr	r3, [r7, #8]
 8001c62:	f003 0308 	and.w	r3, r3, #8
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d020      	beq.n	8001cac <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	f003 0308 	and.w	r3, r3, #8
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d01b      	beq.n	8001cac <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	f06f 0208 	mvn.w	r2, #8
 8001c7c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	2204      	movs	r2, #4
 8001c82:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	69db      	ldr	r3, [r3, #28]
 8001c8a:	f003 0303 	and.w	r3, r3, #3
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d003      	beq.n	8001c9a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001c92:	6878      	ldr	r0, [r7, #4]
 8001c94:	f000 f886 	bl	8001da4 <HAL_TIM_IC_CaptureCallback>
 8001c98:	e005      	b.n	8001ca6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c9a:	6878      	ldr	r0, [r7, #4]
 8001c9c:	f000 f878 	bl	8001d90 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ca0:	6878      	ldr	r0, [r7, #4]
 8001ca2:	f000 f889 	bl	8001db8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	2200      	movs	r2, #0
 8001caa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8001cac:	68bb      	ldr	r3, [r7, #8]
 8001cae:	f003 0310 	and.w	r3, r3, #16
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d020      	beq.n	8001cf8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	f003 0310 	and.w	r3, r3, #16
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d01b      	beq.n	8001cf8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	f06f 0210 	mvn.w	r2, #16
 8001cc8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	2208      	movs	r2, #8
 8001cce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	69db      	ldr	r3, [r3, #28]
 8001cd6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d003      	beq.n	8001ce6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001cde:	6878      	ldr	r0, [r7, #4]
 8001ce0:	f000 f860 	bl	8001da4 <HAL_TIM_IC_CaptureCallback>
 8001ce4:	e005      	b.n	8001cf2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ce6:	6878      	ldr	r0, [r7, #4]
 8001ce8:	f000 f852 	bl	8001d90 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001cec:	6878      	ldr	r0, [r7, #4]
 8001cee:	f000 f863 	bl	8001db8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8001cf8:	68bb      	ldr	r3, [r7, #8]
 8001cfa:	f003 0301 	and.w	r3, r3, #1
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d00c      	beq.n	8001d1c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	f003 0301 	and.w	r3, r3, #1
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d007      	beq.n	8001d1c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	f06f 0201 	mvn.w	r2, #1
 8001d14:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001d16:	6878      	ldr	r0, [r7, #4]
 8001d18:	f7fe fd0a 	bl	8000730 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8001d1c:	68bb      	ldr	r3, [r7, #8]
 8001d1e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d00c      	beq.n	8001d40 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d007      	beq.n	8001d40 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8001d38:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001d3a:	6878      	ldr	r0, [r7, #4]
 8001d3c:	f000 f8e6 	bl	8001f0c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8001d40:	68bb      	ldr	r3, [r7, #8]
 8001d42:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d00c      	beq.n	8001d64 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d007      	beq.n	8001d64 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8001d5c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001d5e:	6878      	ldr	r0, [r7, #4]
 8001d60:	f000 f834 	bl	8001dcc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8001d64:	68bb      	ldr	r3, [r7, #8]
 8001d66:	f003 0320 	and.w	r3, r3, #32
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d00c      	beq.n	8001d88 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	f003 0320 	and.w	r3, r3, #32
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d007      	beq.n	8001d88 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	f06f 0220 	mvn.w	r2, #32
 8001d80:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001d82:	6878      	ldr	r0, [r7, #4]
 8001d84:	f000 f8b8 	bl	8001ef8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001d88:	bf00      	nop
 8001d8a:	3710      	adds	r7, #16
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	bd80      	pop	{r7, pc}

08001d90 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001d90:	b480      	push	{r7}
 8001d92:	b083      	sub	sp, #12
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001d98:	bf00      	nop
 8001d9a:	370c      	adds	r7, #12
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da2:	4770      	bx	lr

08001da4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001da4:	b480      	push	{r7}
 8001da6:	b083      	sub	sp, #12
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001dac:	bf00      	nop
 8001dae:	370c      	adds	r7, #12
 8001db0:	46bd      	mov	sp, r7
 8001db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db6:	4770      	bx	lr

08001db8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001db8:	b480      	push	{r7}
 8001dba:	b083      	sub	sp, #12
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001dc0:	bf00      	nop
 8001dc2:	370c      	adds	r7, #12
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dca:	4770      	bx	lr

08001dcc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001dcc:	b480      	push	{r7}
 8001dce:	b083      	sub	sp, #12
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001dd4:	bf00      	nop
 8001dd6:	370c      	adds	r7, #12
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dde:	4770      	bx	lr

08001de0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001de0:	b480      	push	{r7}
 8001de2:	b085      	sub	sp, #20
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
 8001de8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	4a3a      	ldr	r2, [pc, #232]	@ (8001edc <TIM_Base_SetConfig+0xfc>)
 8001df4:	4293      	cmp	r3, r2
 8001df6:	d00f      	beq.n	8001e18 <TIM_Base_SetConfig+0x38>
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001dfe:	d00b      	beq.n	8001e18 <TIM_Base_SetConfig+0x38>
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	4a37      	ldr	r2, [pc, #220]	@ (8001ee0 <TIM_Base_SetConfig+0x100>)
 8001e04:	4293      	cmp	r3, r2
 8001e06:	d007      	beq.n	8001e18 <TIM_Base_SetConfig+0x38>
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	4a36      	ldr	r2, [pc, #216]	@ (8001ee4 <TIM_Base_SetConfig+0x104>)
 8001e0c:	4293      	cmp	r3, r2
 8001e0e:	d003      	beq.n	8001e18 <TIM_Base_SetConfig+0x38>
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	4a35      	ldr	r2, [pc, #212]	@ (8001ee8 <TIM_Base_SetConfig+0x108>)
 8001e14:	4293      	cmp	r3, r2
 8001e16:	d108      	bne.n	8001e2a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001e1e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001e20:	683b      	ldr	r3, [r7, #0]
 8001e22:	685b      	ldr	r3, [r3, #4]
 8001e24:	68fa      	ldr	r2, [r7, #12]
 8001e26:	4313      	orrs	r3, r2
 8001e28:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	4a2b      	ldr	r2, [pc, #172]	@ (8001edc <TIM_Base_SetConfig+0xfc>)
 8001e2e:	4293      	cmp	r3, r2
 8001e30:	d01b      	beq.n	8001e6a <TIM_Base_SetConfig+0x8a>
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001e38:	d017      	beq.n	8001e6a <TIM_Base_SetConfig+0x8a>
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	4a28      	ldr	r2, [pc, #160]	@ (8001ee0 <TIM_Base_SetConfig+0x100>)
 8001e3e:	4293      	cmp	r3, r2
 8001e40:	d013      	beq.n	8001e6a <TIM_Base_SetConfig+0x8a>
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	4a27      	ldr	r2, [pc, #156]	@ (8001ee4 <TIM_Base_SetConfig+0x104>)
 8001e46:	4293      	cmp	r3, r2
 8001e48:	d00f      	beq.n	8001e6a <TIM_Base_SetConfig+0x8a>
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	4a26      	ldr	r2, [pc, #152]	@ (8001ee8 <TIM_Base_SetConfig+0x108>)
 8001e4e:	4293      	cmp	r3, r2
 8001e50:	d00b      	beq.n	8001e6a <TIM_Base_SetConfig+0x8a>
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	4a25      	ldr	r2, [pc, #148]	@ (8001eec <TIM_Base_SetConfig+0x10c>)
 8001e56:	4293      	cmp	r3, r2
 8001e58:	d007      	beq.n	8001e6a <TIM_Base_SetConfig+0x8a>
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	4a24      	ldr	r2, [pc, #144]	@ (8001ef0 <TIM_Base_SetConfig+0x110>)
 8001e5e:	4293      	cmp	r3, r2
 8001e60:	d003      	beq.n	8001e6a <TIM_Base_SetConfig+0x8a>
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	4a23      	ldr	r2, [pc, #140]	@ (8001ef4 <TIM_Base_SetConfig+0x114>)
 8001e66:	4293      	cmp	r3, r2
 8001e68:	d108      	bne.n	8001e7c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001e70:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001e72:	683b      	ldr	r3, [r7, #0]
 8001e74:	68db      	ldr	r3, [r3, #12]
 8001e76:	68fa      	ldr	r2, [r7, #12]
 8001e78:	4313      	orrs	r3, r2
 8001e7a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8001e82:	683b      	ldr	r3, [r7, #0]
 8001e84:	695b      	ldr	r3, [r3, #20]
 8001e86:	4313      	orrs	r3, r2
 8001e88:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	68fa      	ldr	r2, [r7, #12]
 8001e8e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001e90:	683b      	ldr	r3, [r7, #0]
 8001e92:	689a      	ldr	r2, [r3, #8]
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001e98:	683b      	ldr	r3, [r7, #0]
 8001e9a:	681a      	ldr	r2, [r3, #0]
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	4a0e      	ldr	r2, [pc, #56]	@ (8001edc <TIM_Base_SetConfig+0xfc>)
 8001ea4:	4293      	cmp	r3, r2
 8001ea6:	d103      	bne.n	8001eb0 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001ea8:	683b      	ldr	r3, [r7, #0]
 8001eaa:	691a      	ldr	r2, [r3, #16]
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	2201      	movs	r2, #1
 8001eb4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	691b      	ldr	r3, [r3, #16]
 8001eba:	f003 0301 	and.w	r3, r3, #1
 8001ebe:	2b01      	cmp	r3, #1
 8001ec0:	d105      	bne.n	8001ece <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	691b      	ldr	r3, [r3, #16]
 8001ec6:	f023 0201 	bic.w	r2, r3, #1
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	611a      	str	r2, [r3, #16]
  }
}
 8001ece:	bf00      	nop
 8001ed0:	3714      	adds	r7, #20
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed8:	4770      	bx	lr
 8001eda:	bf00      	nop
 8001edc:	40010000 	.word	0x40010000
 8001ee0:	40000400 	.word	0x40000400
 8001ee4:	40000800 	.word	0x40000800
 8001ee8:	40000c00 	.word	0x40000c00
 8001eec:	40014000 	.word	0x40014000
 8001ef0:	40014400 	.word	0x40014400
 8001ef4:	40014800 	.word	0x40014800

08001ef8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001ef8:	b480      	push	{r7}
 8001efa:	b083      	sub	sp, #12
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001f00:	bf00      	nop
 8001f02:	370c      	adds	r7, #12
 8001f04:	46bd      	mov	sp, r7
 8001f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0a:	4770      	bx	lr

08001f0c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001f0c:	b480      	push	{r7}
 8001f0e:	b083      	sub	sp, #12
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001f14:	bf00      	nop
 8001f16:	370c      	adds	r7, #12
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1e:	4770      	bx	lr

08001f20 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	b082      	sub	sp, #8
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d101      	bne.n	8001f32 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001f2e:	2301      	movs	r3, #1
 8001f30:	e042      	b.n	8001fb8 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001f38:	b2db      	uxtb	r3, r3
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d106      	bne.n	8001f4c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	2200      	movs	r2, #0
 8001f42:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001f46:	6878      	ldr	r0, [r7, #4]
 8001f48:	f7fe fc36 	bl	80007b8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	2224      	movs	r2, #36	@ 0x24
 8001f50:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	68da      	ldr	r2, [r3, #12]
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8001f62:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001f64:	6878      	ldr	r0, [r7, #4]
 8001f66:	f000 fc85 	bl	8002874 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	691a      	ldr	r2, [r3, #16]
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8001f78:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	695a      	ldr	r2, [r3, #20]
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8001f88:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	68da      	ldr	r2, [r3, #12]
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8001f98:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	2220      	movs	r2, #32
 8001fa4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	2220      	movs	r2, #32
 8001fac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8001fb6:	2300      	movs	r3, #0
}
 8001fb8:	4618      	mov	r0, r3
 8001fba:	3708      	adds	r7, #8
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	bd80      	pop	{r7, pc}

08001fc0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	b0ba      	sub	sp, #232	@ 0xe8
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	68db      	ldr	r3, [r3, #12]
 8001fd8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	695b      	ldr	r3, [r3, #20]
 8001fe2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8001fec:	2300      	movs	r3, #0
 8001fee:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8001ff2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001ff6:	f003 030f 	and.w	r3, r3, #15
 8001ffa:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8001ffe:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002002:	2b00      	cmp	r3, #0
 8002004:	d10f      	bne.n	8002026 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002006:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800200a:	f003 0320 	and.w	r3, r3, #32
 800200e:	2b00      	cmp	r3, #0
 8002010:	d009      	beq.n	8002026 <HAL_UART_IRQHandler+0x66>
 8002012:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002016:	f003 0320 	and.w	r3, r3, #32
 800201a:	2b00      	cmp	r3, #0
 800201c:	d003      	beq.n	8002026 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800201e:	6878      	ldr	r0, [r7, #4]
 8002020:	f000 fb69 	bl	80026f6 <UART_Receive_IT>
      return;
 8002024:	e25b      	b.n	80024de <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002026:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800202a:	2b00      	cmp	r3, #0
 800202c:	f000 80de 	beq.w	80021ec <HAL_UART_IRQHandler+0x22c>
 8002030:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002034:	f003 0301 	and.w	r3, r3, #1
 8002038:	2b00      	cmp	r3, #0
 800203a:	d106      	bne.n	800204a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800203c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002040:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8002044:	2b00      	cmp	r3, #0
 8002046:	f000 80d1 	beq.w	80021ec <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800204a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800204e:	f003 0301 	and.w	r3, r3, #1
 8002052:	2b00      	cmp	r3, #0
 8002054:	d00b      	beq.n	800206e <HAL_UART_IRQHandler+0xae>
 8002056:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800205a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800205e:	2b00      	cmp	r3, #0
 8002060:	d005      	beq.n	800206e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002066:	f043 0201 	orr.w	r2, r3, #1
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800206e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002072:	f003 0304 	and.w	r3, r3, #4
 8002076:	2b00      	cmp	r3, #0
 8002078:	d00b      	beq.n	8002092 <HAL_UART_IRQHandler+0xd2>
 800207a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800207e:	f003 0301 	and.w	r3, r3, #1
 8002082:	2b00      	cmp	r3, #0
 8002084:	d005      	beq.n	8002092 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800208a:	f043 0202 	orr.w	r2, r3, #2
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002092:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002096:	f003 0302 	and.w	r3, r3, #2
 800209a:	2b00      	cmp	r3, #0
 800209c:	d00b      	beq.n	80020b6 <HAL_UART_IRQHandler+0xf6>
 800209e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80020a2:	f003 0301 	and.w	r3, r3, #1
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d005      	beq.n	80020b6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020ae:	f043 0204 	orr.w	r2, r3, #4
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80020b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80020ba:	f003 0308 	and.w	r3, r3, #8
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d011      	beq.n	80020e6 <HAL_UART_IRQHandler+0x126>
 80020c2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80020c6:	f003 0320 	and.w	r3, r3, #32
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d105      	bne.n	80020da <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80020ce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80020d2:	f003 0301 	and.w	r3, r3, #1
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d005      	beq.n	80020e6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020de:	f043 0208 	orr.w	r2, r3, #8
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	f000 81f2 	beq.w	80024d4 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80020f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80020f4:	f003 0320 	and.w	r3, r3, #32
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d008      	beq.n	800210e <HAL_UART_IRQHandler+0x14e>
 80020fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002100:	f003 0320 	and.w	r3, r3, #32
 8002104:	2b00      	cmp	r3, #0
 8002106:	d002      	beq.n	800210e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002108:	6878      	ldr	r0, [r7, #4]
 800210a:	f000 faf4 	bl	80026f6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	695b      	ldr	r3, [r3, #20]
 8002114:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002118:	2b40      	cmp	r3, #64	@ 0x40
 800211a:	bf0c      	ite	eq
 800211c:	2301      	moveq	r3, #1
 800211e:	2300      	movne	r3, #0
 8002120:	b2db      	uxtb	r3, r3
 8002122:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800212a:	f003 0308 	and.w	r3, r3, #8
 800212e:	2b00      	cmp	r3, #0
 8002130:	d103      	bne.n	800213a <HAL_UART_IRQHandler+0x17a>
 8002132:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002136:	2b00      	cmp	r3, #0
 8002138:	d04f      	beq.n	80021da <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800213a:	6878      	ldr	r0, [r7, #4]
 800213c:	f000 f9fc 	bl	8002538 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	695b      	ldr	r3, [r3, #20]
 8002146:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800214a:	2b40      	cmp	r3, #64	@ 0x40
 800214c:	d141      	bne.n	80021d2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	3314      	adds	r3, #20
 8002154:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002158:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800215c:	e853 3f00 	ldrex	r3, [r3]
 8002160:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8002164:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002168:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800216c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	3314      	adds	r3, #20
 8002176:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800217a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800217e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002182:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8002186:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800218a:	e841 2300 	strex	r3, r2, [r1]
 800218e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8002192:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002196:	2b00      	cmp	r3, #0
 8002198:	d1d9      	bne.n	800214e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d013      	beq.n	80021ca <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80021a6:	4a7e      	ldr	r2, [pc, #504]	@ (80023a0 <HAL_UART_IRQHandler+0x3e0>)
 80021a8:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80021ae:	4618      	mov	r0, r3
 80021b0:	f7fe fdd4 	bl	8000d5c <HAL_DMA_Abort_IT>
 80021b4:	4603      	mov	r3, r0
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d016      	beq.n	80021e8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80021be:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80021c0:	687a      	ldr	r2, [r7, #4]
 80021c2:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80021c4:	4610      	mov	r0, r2
 80021c6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80021c8:	e00e      	b.n	80021e8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80021ca:	6878      	ldr	r0, [r7, #4]
 80021cc:	f000 f99e 	bl	800250c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80021d0:	e00a      	b.n	80021e8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80021d2:	6878      	ldr	r0, [r7, #4]
 80021d4:	f000 f99a 	bl	800250c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80021d8:	e006      	b.n	80021e8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80021da:	6878      	ldr	r0, [r7, #4]
 80021dc:	f000 f996 	bl	800250c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	2200      	movs	r2, #0
 80021e4:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80021e6:	e175      	b.n	80024d4 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80021e8:	bf00      	nop
    return;
 80021ea:	e173      	b.n	80024d4 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021f0:	2b01      	cmp	r3, #1
 80021f2:	f040 814f 	bne.w	8002494 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80021f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80021fa:	f003 0310 	and.w	r3, r3, #16
 80021fe:	2b00      	cmp	r3, #0
 8002200:	f000 8148 	beq.w	8002494 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002204:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002208:	f003 0310 	and.w	r3, r3, #16
 800220c:	2b00      	cmp	r3, #0
 800220e:	f000 8141 	beq.w	8002494 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002212:	2300      	movs	r3, #0
 8002214:	60bb      	str	r3, [r7, #8]
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	60bb      	str	r3, [r7, #8]
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	685b      	ldr	r3, [r3, #4]
 8002224:	60bb      	str	r3, [r7, #8]
 8002226:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	695b      	ldr	r3, [r3, #20]
 800222e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002232:	2b40      	cmp	r3, #64	@ 0x40
 8002234:	f040 80b6 	bne.w	80023a4 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	685b      	ldr	r3, [r3, #4]
 8002240:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002244:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8002248:	2b00      	cmp	r3, #0
 800224a:	f000 8145 	beq.w	80024d8 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8002252:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002256:	429a      	cmp	r2, r3
 8002258:	f080 813e 	bcs.w	80024d8 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002262:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002268:	69db      	ldr	r3, [r3, #28]
 800226a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800226e:	f000 8088 	beq.w	8002382 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	330c      	adds	r3, #12
 8002278:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800227c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002280:	e853 3f00 	ldrex	r3, [r3]
 8002284:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8002288:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800228c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002290:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	330c      	adds	r3, #12
 800229a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800229e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80022a2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80022a6:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80022aa:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80022ae:	e841 2300 	strex	r3, r2, [r1]
 80022b2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80022b6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d1d9      	bne.n	8002272 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	3314      	adds	r3, #20
 80022c4:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80022c6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80022c8:	e853 3f00 	ldrex	r3, [r3]
 80022cc:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80022ce:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80022d0:	f023 0301 	bic.w	r3, r3, #1
 80022d4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	3314      	adds	r3, #20
 80022de:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80022e2:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80022e6:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80022e8:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80022ea:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80022ee:	e841 2300 	strex	r3, r2, [r1]
 80022f2:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80022f4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d1e1      	bne.n	80022be <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	3314      	adds	r3, #20
 8002300:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002302:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002304:	e853 3f00 	ldrex	r3, [r3]
 8002308:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800230a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800230c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002310:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	3314      	adds	r3, #20
 800231a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800231e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002320:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002322:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8002324:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8002326:	e841 2300 	strex	r3, r2, [r1]
 800232a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800232c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800232e:	2b00      	cmp	r3, #0
 8002330:	d1e3      	bne.n	80022fa <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	2220      	movs	r2, #32
 8002336:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	2200      	movs	r2, #0
 800233e:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	330c      	adds	r3, #12
 8002346:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002348:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800234a:	e853 3f00 	ldrex	r3, [r3]
 800234e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8002350:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002352:	f023 0310 	bic.w	r3, r3, #16
 8002356:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	330c      	adds	r3, #12
 8002360:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8002364:	65ba      	str	r2, [r7, #88]	@ 0x58
 8002366:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002368:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800236a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800236c:	e841 2300 	strex	r3, r2, [r1]
 8002370:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8002372:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002374:	2b00      	cmp	r3, #0
 8002376:	d1e3      	bne.n	8002340 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800237c:	4618      	mov	r0, r3
 800237e:	f7fe fc7d 	bl	8000c7c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	2202      	movs	r2, #2
 8002386:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002390:	b29b      	uxth	r3, r3
 8002392:	1ad3      	subs	r3, r2, r3
 8002394:	b29b      	uxth	r3, r3
 8002396:	4619      	mov	r1, r3
 8002398:	6878      	ldr	r0, [r7, #4]
 800239a:	f000 f8c1 	bl	8002520 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800239e:	e09b      	b.n	80024d8 <HAL_UART_IRQHandler+0x518>
 80023a0:	080025ff 	.word	0x080025ff
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80023ac:	b29b      	uxth	r3, r3
 80023ae:	1ad3      	subs	r3, r2, r3
 80023b0:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80023b8:	b29b      	uxth	r3, r3
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	f000 808e 	beq.w	80024dc <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80023c0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	f000 8089 	beq.w	80024dc <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	330c      	adds	r3, #12
 80023d0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80023d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80023d4:	e853 3f00 	ldrex	r3, [r3]
 80023d8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80023da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80023dc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80023e0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	330c      	adds	r3, #12
 80023ea:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80023ee:	647a      	str	r2, [r7, #68]	@ 0x44
 80023f0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80023f2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80023f4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80023f6:	e841 2300 	strex	r3, r2, [r1]
 80023fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80023fc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d1e3      	bne.n	80023ca <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	3314      	adds	r3, #20
 8002408:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800240a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800240c:	e853 3f00 	ldrex	r3, [r3]
 8002410:	623b      	str	r3, [r7, #32]
   return(result);
 8002412:	6a3b      	ldr	r3, [r7, #32]
 8002414:	f023 0301 	bic.w	r3, r3, #1
 8002418:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	3314      	adds	r3, #20
 8002422:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8002426:	633a      	str	r2, [r7, #48]	@ 0x30
 8002428:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800242a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800242c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800242e:	e841 2300 	strex	r3, r2, [r1]
 8002432:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8002434:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002436:	2b00      	cmp	r3, #0
 8002438:	d1e3      	bne.n	8002402 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	2220      	movs	r2, #32
 800243e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	2200      	movs	r2, #0
 8002446:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	330c      	adds	r3, #12
 800244e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002450:	693b      	ldr	r3, [r7, #16]
 8002452:	e853 3f00 	ldrex	r3, [r3]
 8002456:	60fb      	str	r3, [r7, #12]
   return(result);
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	f023 0310 	bic.w	r3, r3, #16
 800245e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	330c      	adds	r3, #12
 8002468:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 800246c:	61fa      	str	r2, [r7, #28]
 800246e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002470:	69b9      	ldr	r1, [r7, #24]
 8002472:	69fa      	ldr	r2, [r7, #28]
 8002474:	e841 2300 	strex	r3, r2, [r1]
 8002478:	617b      	str	r3, [r7, #20]
   return(result);
 800247a:	697b      	ldr	r3, [r7, #20]
 800247c:	2b00      	cmp	r3, #0
 800247e:	d1e3      	bne.n	8002448 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	2202      	movs	r2, #2
 8002484:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002486:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800248a:	4619      	mov	r1, r3
 800248c:	6878      	ldr	r0, [r7, #4]
 800248e:	f000 f847 	bl	8002520 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002492:	e023      	b.n	80024dc <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002494:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002498:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800249c:	2b00      	cmp	r3, #0
 800249e:	d009      	beq.n	80024b4 <HAL_UART_IRQHandler+0x4f4>
 80024a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80024a4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d003      	beq.n	80024b4 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80024ac:	6878      	ldr	r0, [r7, #4]
 80024ae:	f000 f8ba 	bl	8002626 <UART_Transmit_IT>
    return;
 80024b2:	e014      	b.n	80024de <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80024b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80024b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d00e      	beq.n	80024de <HAL_UART_IRQHandler+0x51e>
 80024c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80024c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d008      	beq.n	80024de <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80024cc:	6878      	ldr	r0, [r7, #4]
 80024ce:	f000 f8fa 	bl	80026c6 <UART_EndTransmit_IT>
    return;
 80024d2:	e004      	b.n	80024de <HAL_UART_IRQHandler+0x51e>
    return;
 80024d4:	bf00      	nop
 80024d6:	e002      	b.n	80024de <HAL_UART_IRQHandler+0x51e>
      return;
 80024d8:	bf00      	nop
 80024da:	e000      	b.n	80024de <HAL_UART_IRQHandler+0x51e>
      return;
 80024dc:	bf00      	nop
  }
}
 80024de:	37e8      	adds	r7, #232	@ 0xe8
 80024e0:	46bd      	mov	sp, r7
 80024e2:	bd80      	pop	{r7, pc}

080024e4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80024e4:	b480      	push	{r7}
 80024e6:	b083      	sub	sp, #12
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80024ec:	bf00      	nop
 80024ee:	370c      	adds	r7, #12
 80024f0:	46bd      	mov	sp, r7
 80024f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f6:	4770      	bx	lr

080024f8 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80024f8:	b480      	push	{r7}
 80024fa:	b083      	sub	sp, #12
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8002500:	bf00      	nop
 8002502:	370c      	adds	r7, #12
 8002504:	46bd      	mov	sp, r7
 8002506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250a:	4770      	bx	lr

0800250c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800250c:	b480      	push	{r7}
 800250e:	b083      	sub	sp, #12
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002514:	bf00      	nop
 8002516:	370c      	adds	r7, #12
 8002518:	46bd      	mov	sp, r7
 800251a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251e:	4770      	bx	lr

08002520 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002520:	b480      	push	{r7}
 8002522:	b083      	sub	sp, #12
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]
 8002528:	460b      	mov	r3, r1
 800252a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800252c:	bf00      	nop
 800252e:	370c      	adds	r7, #12
 8002530:	46bd      	mov	sp, r7
 8002532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002536:	4770      	bx	lr

08002538 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002538:	b480      	push	{r7}
 800253a:	b095      	sub	sp, #84	@ 0x54
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	330c      	adds	r3, #12
 8002546:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002548:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800254a:	e853 3f00 	ldrex	r3, [r3]
 800254e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8002550:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002552:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002556:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	330c      	adds	r3, #12
 800255e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002560:	643a      	str	r2, [r7, #64]	@ 0x40
 8002562:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002564:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002566:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002568:	e841 2300 	strex	r3, r2, [r1]
 800256c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800256e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002570:	2b00      	cmp	r3, #0
 8002572:	d1e5      	bne.n	8002540 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	3314      	adds	r3, #20
 800257a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800257c:	6a3b      	ldr	r3, [r7, #32]
 800257e:	e853 3f00 	ldrex	r3, [r3]
 8002582:	61fb      	str	r3, [r7, #28]
   return(result);
 8002584:	69fb      	ldr	r3, [r7, #28]
 8002586:	f023 0301 	bic.w	r3, r3, #1
 800258a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	3314      	adds	r3, #20
 8002592:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002594:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002596:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002598:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800259a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800259c:	e841 2300 	strex	r3, r2, [r1]
 80025a0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80025a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d1e5      	bne.n	8002574 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025ac:	2b01      	cmp	r3, #1
 80025ae:	d119      	bne.n	80025e4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	330c      	adds	r3, #12
 80025b6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	e853 3f00 	ldrex	r3, [r3]
 80025be:	60bb      	str	r3, [r7, #8]
   return(result);
 80025c0:	68bb      	ldr	r3, [r7, #8]
 80025c2:	f023 0310 	bic.w	r3, r3, #16
 80025c6:	647b      	str	r3, [r7, #68]	@ 0x44
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	330c      	adds	r3, #12
 80025ce:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80025d0:	61ba      	str	r2, [r7, #24]
 80025d2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80025d4:	6979      	ldr	r1, [r7, #20]
 80025d6:	69ba      	ldr	r2, [r7, #24]
 80025d8:	e841 2300 	strex	r3, r2, [r1]
 80025dc:	613b      	str	r3, [r7, #16]
   return(result);
 80025de:	693b      	ldr	r3, [r7, #16]
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d1e5      	bne.n	80025b0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	2220      	movs	r2, #32
 80025e8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	2200      	movs	r2, #0
 80025f0:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80025f2:	bf00      	nop
 80025f4:	3754      	adds	r7, #84	@ 0x54
 80025f6:	46bd      	mov	sp, r7
 80025f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fc:	4770      	bx	lr

080025fe <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80025fe:	b580      	push	{r7, lr}
 8002600:	b084      	sub	sp, #16
 8002602:	af00      	add	r7, sp, #0
 8002604:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800260a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	2200      	movs	r2, #0
 8002610:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	2200      	movs	r2, #0
 8002616:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002618:	68f8      	ldr	r0, [r7, #12]
 800261a:	f7ff ff77 	bl	800250c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800261e:	bf00      	nop
 8002620:	3710      	adds	r7, #16
 8002622:	46bd      	mov	sp, r7
 8002624:	bd80      	pop	{r7, pc}

08002626 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002626:	b480      	push	{r7}
 8002628:	b085      	sub	sp, #20
 800262a:	af00      	add	r7, sp, #0
 800262c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002634:	b2db      	uxtb	r3, r3
 8002636:	2b21      	cmp	r3, #33	@ 0x21
 8002638:	d13e      	bne.n	80026b8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	689b      	ldr	r3, [r3, #8]
 800263e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002642:	d114      	bne.n	800266e <UART_Transmit_IT+0x48>
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	691b      	ldr	r3, [r3, #16]
 8002648:	2b00      	cmp	r3, #0
 800264a:	d110      	bne.n	800266e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	6a1b      	ldr	r3, [r3, #32]
 8002650:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	881b      	ldrh	r3, [r3, #0]
 8002656:	461a      	mov	r2, r3
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002660:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	6a1b      	ldr	r3, [r3, #32]
 8002666:	1c9a      	adds	r2, r3, #2
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	621a      	str	r2, [r3, #32]
 800266c:	e008      	b.n	8002680 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	6a1b      	ldr	r3, [r3, #32]
 8002672:	1c59      	adds	r1, r3, #1
 8002674:	687a      	ldr	r2, [r7, #4]
 8002676:	6211      	str	r1, [r2, #32]
 8002678:	781a      	ldrb	r2, [r3, #0]
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002684:	b29b      	uxth	r3, r3
 8002686:	3b01      	subs	r3, #1
 8002688:	b29b      	uxth	r3, r3
 800268a:	687a      	ldr	r2, [r7, #4]
 800268c:	4619      	mov	r1, r3
 800268e:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8002690:	2b00      	cmp	r3, #0
 8002692:	d10f      	bne.n	80026b4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	68da      	ldr	r2, [r3, #12]
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80026a2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	68da      	ldr	r2, [r3, #12]
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80026b2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80026b4:	2300      	movs	r3, #0
 80026b6:	e000      	b.n	80026ba <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80026b8:	2302      	movs	r3, #2
  }
}
 80026ba:	4618      	mov	r0, r3
 80026bc:	3714      	adds	r7, #20
 80026be:	46bd      	mov	sp, r7
 80026c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c4:	4770      	bx	lr

080026c6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80026c6:	b580      	push	{r7, lr}
 80026c8:	b082      	sub	sp, #8
 80026ca:	af00      	add	r7, sp, #0
 80026cc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	68da      	ldr	r2, [r3, #12]
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80026dc:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	2220      	movs	r2, #32
 80026e2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80026e6:	6878      	ldr	r0, [r7, #4]
 80026e8:	f7ff fefc 	bl	80024e4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80026ec:	2300      	movs	r3, #0
}
 80026ee:	4618      	mov	r0, r3
 80026f0:	3708      	adds	r7, #8
 80026f2:	46bd      	mov	sp, r7
 80026f4:	bd80      	pop	{r7, pc}

080026f6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80026f6:	b580      	push	{r7, lr}
 80026f8:	b08c      	sub	sp, #48	@ 0x30
 80026fa:	af00      	add	r7, sp, #0
 80026fc:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002704:	b2db      	uxtb	r3, r3
 8002706:	2b22      	cmp	r3, #34	@ 0x22
 8002708:	f040 80ae 	bne.w	8002868 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	689b      	ldr	r3, [r3, #8]
 8002710:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002714:	d117      	bne.n	8002746 <UART_Receive_IT+0x50>
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	691b      	ldr	r3, [r3, #16]
 800271a:	2b00      	cmp	r3, #0
 800271c:	d113      	bne.n	8002746 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800271e:	2300      	movs	r3, #0
 8002720:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002726:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	685b      	ldr	r3, [r3, #4]
 800272e:	b29b      	uxth	r3, r3
 8002730:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002734:	b29a      	uxth	r2, r3
 8002736:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002738:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800273e:	1c9a      	adds	r2, r3, #2
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	629a      	str	r2, [r3, #40]	@ 0x28
 8002744:	e026      	b.n	8002794 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800274a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 800274c:	2300      	movs	r3, #0
 800274e:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	689b      	ldr	r3, [r3, #8]
 8002754:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002758:	d007      	beq.n	800276a <UART_Receive_IT+0x74>
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	689b      	ldr	r3, [r3, #8]
 800275e:	2b00      	cmp	r3, #0
 8002760:	d10a      	bne.n	8002778 <UART_Receive_IT+0x82>
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	691b      	ldr	r3, [r3, #16]
 8002766:	2b00      	cmp	r3, #0
 8002768:	d106      	bne.n	8002778 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	685b      	ldr	r3, [r3, #4]
 8002770:	b2da      	uxtb	r2, r3
 8002772:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002774:	701a      	strb	r2, [r3, #0]
 8002776:	e008      	b.n	800278a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	685b      	ldr	r3, [r3, #4]
 800277e:	b2db      	uxtb	r3, r3
 8002780:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002784:	b2da      	uxtb	r2, r3
 8002786:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002788:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800278e:	1c5a      	adds	r2, r3, #1
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002798:	b29b      	uxth	r3, r3
 800279a:	3b01      	subs	r3, #1
 800279c:	b29b      	uxth	r3, r3
 800279e:	687a      	ldr	r2, [r7, #4]
 80027a0:	4619      	mov	r1, r3
 80027a2:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d15d      	bne.n	8002864 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	68da      	ldr	r2, [r3, #12]
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f022 0220 	bic.w	r2, r2, #32
 80027b6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	68da      	ldr	r2, [r3, #12]
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80027c6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	695a      	ldr	r2, [r3, #20]
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f022 0201 	bic.w	r2, r2, #1
 80027d6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	2220      	movs	r2, #32
 80027dc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	2200      	movs	r2, #0
 80027e4:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027ea:	2b01      	cmp	r3, #1
 80027ec:	d135      	bne.n	800285a <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	2200      	movs	r2, #0
 80027f2:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	330c      	adds	r3, #12
 80027fa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80027fc:	697b      	ldr	r3, [r7, #20]
 80027fe:	e853 3f00 	ldrex	r3, [r3]
 8002802:	613b      	str	r3, [r7, #16]
   return(result);
 8002804:	693b      	ldr	r3, [r7, #16]
 8002806:	f023 0310 	bic.w	r3, r3, #16
 800280a:	627b      	str	r3, [r7, #36]	@ 0x24
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	330c      	adds	r3, #12
 8002812:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002814:	623a      	str	r2, [r7, #32]
 8002816:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002818:	69f9      	ldr	r1, [r7, #28]
 800281a:	6a3a      	ldr	r2, [r7, #32]
 800281c:	e841 2300 	strex	r3, r2, [r1]
 8002820:	61bb      	str	r3, [r7, #24]
   return(result);
 8002822:	69bb      	ldr	r3, [r7, #24]
 8002824:	2b00      	cmp	r3, #0
 8002826:	d1e5      	bne.n	80027f4 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f003 0310 	and.w	r3, r3, #16
 8002832:	2b10      	cmp	r3, #16
 8002834:	d10a      	bne.n	800284c <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002836:	2300      	movs	r3, #0
 8002838:	60fb      	str	r3, [r7, #12]
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	60fb      	str	r3, [r7, #12]
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	685b      	ldr	r3, [r3, #4]
 8002848:	60fb      	str	r3, [r7, #12]
 800284a:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8002850:	4619      	mov	r1, r3
 8002852:	6878      	ldr	r0, [r7, #4]
 8002854:	f7ff fe64 	bl	8002520 <HAL_UARTEx_RxEventCallback>
 8002858:	e002      	b.n	8002860 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800285a:	6878      	ldr	r0, [r7, #4]
 800285c:	f7ff fe4c 	bl	80024f8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8002860:	2300      	movs	r3, #0
 8002862:	e002      	b.n	800286a <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8002864:	2300      	movs	r3, #0
 8002866:	e000      	b.n	800286a <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8002868:	2302      	movs	r3, #2
  }
}
 800286a:	4618      	mov	r0, r3
 800286c:	3730      	adds	r7, #48	@ 0x30
 800286e:	46bd      	mov	sp, r7
 8002870:	bd80      	pop	{r7, pc}
	...

08002874 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002874:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002878:	b0c0      	sub	sp, #256	@ 0x100
 800287a:	af00      	add	r7, sp, #0
 800287c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002880:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	691b      	ldr	r3, [r3, #16]
 8002888:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800288c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002890:	68d9      	ldr	r1, [r3, #12]
 8002892:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002896:	681a      	ldr	r2, [r3, #0]
 8002898:	ea40 0301 	orr.w	r3, r0, r1
 800289c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800289e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80028a2:	689a      	ldr	r2, [r3, #8]
 80028a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80028a8:	691b      	ldr	r3, [r3, #16]
 80028aa:	431a      	orrs	r2, r3
 80028ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80028b0:	695b      	ldr	r3, [r3, #20]
 80028b2:	431a      	orrs	r2, r3
 80028b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80028b8:	69db      	ldr	r3, [r3, #28]
 80028ba:	4313      	orrs	r3, r2
 80028bc:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80028c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	68db      	ldr	r3, [r3, #12]
 80028c8:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80028cc:	f021 010c 	bic.w	r1, r1, #12
 80028d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80028d4:	681a      	ldr	r2, [r3, #0]
 80028d6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80028da:	430b      	orrs	r3, r1
 80028dc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80028de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	695b      	ldr	r3, [r3, #20]
 80028e6:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80028ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80028ee:	6999      	ldr	r1, [r3, #24]
 80028f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80028f4:	681a      	ldr	r2, [r3, #0]
 80028f6:	ea40 0301 	orr.w	r3, r0, r1
 80028fa:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80028fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002900:	681a      	ldr	r2, [r3, #0]
 8002902:	4b8f      	ldr	r3, [pc, #572]	@ (8002b40 <UART_SetConfig+0x2cc>)
 8002904:	429a      	cmp	r2, r3
 8002906:	d005      	beq.n	8002914 <UART_SetConfig+0xa0>
 8002908:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800290c:	681a      	ldr	r2, [r3, #0]
 800290e:	4b8d      	ldr	r3, [pc, #564]	@ (8002b44 <UART_SetConfig+0x2d0>)
 8002910:	429a      	cmp	r2, r3
 8002912:	d104      	bne.n	800291e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002914:	f7ff f84a 	bl	80019ac <HAL_RCC_GetPCLK2Freq>
 8002918:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800291c:	e003      	b.n	8002926 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800291e:	f7ff f831 	bl	8001984 <HAL_RCC_GetPCLK1Freq>
 8002922:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002926:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800292a:	69db      	ldr	r3, [r3, #28]
 800292c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002930:	f040 810c 	bne.w	8002b4c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002934:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002938:	2200      	movs	r2, #0
 800293a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800293e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8002942:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8002946:	4622      	mov	r2, r4
 8002948:	462b      	mov	r3, r5
 800294a:	1891      	adds	r1, r2, r2
 800294c:	65b9      	str	r1, [r7, #88]	@ 0x58
 800294e:	415b      	adcs	r3, r3
 8002950:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002952:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002956:	4621      	mov	r1, r4
 8002958:	eb12 0801 	adds.w	r8, r2, r1
 800295c:	4629      	mov	r1, r5
 800295e:	eb43 0901 	adc.w	r9, r3, r1
 8002962:	f04f 0200 	mov.w	r2, #0
 8002966:	f04f 0300 	mov.w	r3, #0
 800296a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800296e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002972:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002976:	4690      	mov	r8, r2
 8002978:	4699      	mov	r9, r3
 800297a:	4623      	mov	r3, r4
 800297c:	eb18 0303 	adds.w	r3, r8, r3
 8002980:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8002984:	462b      	mov	r3, r5
 8002986:	eb49 0303 	adc.w	r3, r9, r3
 800298a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800298e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002992:	685b      	ldr	r3, [r3, #4]
 8002994:	2200      	movs	r2, #0
 8002996:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800299a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800299e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80029a2:	460b      	mov	r3, r1
 80029a4:	18db      	adds	r3, r3, r3
 80029a6:	653b      	str	r3, [r7, #80]	@ 0x50
 80029a8:	4613      	mov	r3, r2
 80029aa:	eb42 0303 	adc.w	r3, r2, r3
 80029ae:	657b      	str	r3, [r7, #84]	@ 0x54
 80029b0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80029b4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80029b8:	f7fd fc12 	bl	80001e0 <__aeabi_uldivmod>
 80029bc:	4602      	mov	r2, r0
 80029be:	460b      	mov	r3, r1
 80029c0:	4b61      	ldr	r3, [pc, #388]	@ (8002b48 <UART_SetConfig+0x2d4>)
 80029c2:	fba3 2302 	umull	r2, r3, r3, r2
 80029c6:	095b      	lsrs	r3, r3, #5
 80029c8:	011c      	lsls	r4, r3, #4
 80029ca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80029ce:	2200      	movs	r2, #0
 80029d0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80029d4:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80029d8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80029dc:	4642      	mov	r2, r8
 80029de:	464b      	mov	r3, r9
 80029e0:	1891      	adds	r1, r2, r2
 80029e2:	64b9      	str	r1, [r7, #72]	@ 0x48
 80029e4:	415b      	adcs	r3, r3
 80029e6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80029e8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80029ec:	4641      	mov	r1, r8
 80029ee:	eb12 0a01 	adds.w	sl, r2, r1
 80029f2:	4649      	mov	r1, r9
 80029f4:	eb43 0b01 	adc.w	fp, r3, r1
 80029f8:	f04f 0200 	mov.w	r2, #0
 80029fc:	f04f 0300 	mov.w	r3, #0
 8002a00:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002a04:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002a08:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002a0c:	4692      	mov	sl, r2
 8002a0e:	469b      	mov	fp, r3
 8002a10:	4643      	mov	r3, r8
 8002a12:	eb1a 0303 	adds.w	r3, sl, r3
 8002a16:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002a1a:	464b      	mov	r3, r9
 8002a1c:	eb4b 0303 	adc.w	r3, fp, r3
 8002a20:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8002a24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a28:	685b      	ldr	r3, [r3, #4]
 8002a2a:	2200      	movs	r2, #0
 8002a2c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002a30:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8002a34:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8002a38:	460b      	mov	r3, r1
 8002a3a:	18db      	adds	r3, r3, r3
 8002a3c:	643b      	str	r3, [r7, #64]	@ 0x40
 8002a3e:	4613      	mov	r3, r2
 8002a40:	eb42 0303 	adc.w	r3, r2, r3
 8002a44:	647b      	str	r3, [r7, #68]	@ 0x44
 8002a46:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8002a4a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8002a4e:	f7fd fbc7 	bl	80001e0 <__aeabi_uldivmod>
 8002a52:	4602      	mov	r2, r0
 8002a54:	460b      	mov	r3, r1
 8002a56:	4611      	mov	r1, r2
 8002a58:	4b3b      	ldr	r3, [pc, #236]	@ (8002b48 <UART_SetConfig+0x2d4>)
 8002a5a:	fba3 2301 	umull	r2, r3, r3, r1
 8002a5e:	095b      	lsrs	r3, r3, #5
 8002a60:	2264      	movs	r2, #100	@ 0x64
 8002a62:	fb02 f303 	mul.w	r3, r2, r3
 8002a66:	1acb      	subs	r3, r1, r3
 8002a68:	00db      	lsls	r3, r3, #3
 8002a6a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8002a6e:	4b36      	ldr	r3, [pc, #216]	@ (8002b48 <UART_SetConfig+0x2d4>)
 8002a70:	fba3 2302 	umull	r2, r3, r3, r2
 8002a74:	095b      	lsrs	r3, r3, #5
 8002a76:	005b      	lsls	r3, r3, #1
 8002a78:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8002a7c:	441c      	add	r4, r3
 8002a7e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002a82:	2200      	movs	r2, #0
 8002a84:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002a88:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8002a8c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8002a90:	4642      	mov	r2, r8
 8002a92:	464b      	mov	r3, r9
 8002a94:	1891      	adds	r1, r2, r2
 8002a96:	63b9      	str	r1, [r7, #56]	@ 0x38
 8002a98:	415b      	adcs	r3, r3
 8002a9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002a9c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8002aa0:	4641      	mov	r1, r8
 8002aa2:	1851      	adds	r1, r2, r1
 8002aa4:	6339      	str	r1, [r7, #48]	@ 0x30
 8002aa6:	4649      	mov	r1, r9
 8002aa8:	414b      	adcs	r3, r1
 8002aaa:	637b      	str	r3, [r7, #52]	@ 0x34
 8002aac:	f04f 0200 	mov.w	r2, #0
 8002ab0:	f04f 0300 	mov.w	r3, #0
 8002ab4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8002ab8:	4659      	mov	r1, fp
 8002aba:	00cb      	lsls	r3, r1, #3
 8002abc:	4651      	mov	r1, sl
 8002abe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002ac2:	4651      	mov	r1, sl
 8002ac4:	00ca      	lsls	r2, r1, #3
 8002ac6:	4610      	mov	r0, r2
 8002ac8:	4619      	mov	r1, r3
 8002aca:	4603      	mov	r3, r0
 8002acc:	4642      	mov	r2, r8
 8002ace:	189b      	adds	r3, r3, r2
 8002ad0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002ad4:	464b      	mov	r3, r9
 8002ad6:	460a      	mov	r2, r1
 8002ad8:	eb42 0303 	adc.w	r3, r2, r3
 8002adc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002ae0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ae4:	685b      	ldr	r3, [r3, #4]
 8002ae6:	2200      	movs	r2, #0
 8002ae8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8002aec:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8002af0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8002af4:	460b      	mov	r3, r1
 8002af6:	18db      	adds	r3, r3, r3
 8002af8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002afa:	4613      	mov	r3, r2
 8002afc:	eb42 0303 	adc.w	r3, r2, r3
 8002b00:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002b02:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002b06:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8002b0a:	f7fd fb69 	bl	80001e0 <__aeabi_uldivmod>
 8002b0e:	4602      	mov	r2, r0
 8002b10:	460b      	mov	r3, r1
 8002b12:	4b0d      	ldr	r3, [pc, #52]	@ (8002b48 <UART_SetConfig+0x2d4>)
 8002b14:	fba3 1302 	umull	r1, r3, r3, r2
 8002b18:	095b      	lsrs	r3, r3, #5
 8002b1a:	2164      	movs	r1, #100	@ 0x64
 8002b1c:	fb01 f303 	mul.w	r3, r1, r3
 8002b20:	1ad3      	subs	r3, r2, r3
 8002b22:	00db      	lsls	r3, r3, #3
 8002b24:	3332      	adds	r3, #50	@ 0x32
 8002b26:	4a08      	ldr	r2, [pc, #32]	@ (8002b48 <UART_SetConfig+0x2d4>)
 8002b28:	fba2 2303 	umull	r2, r3, r2, r3
 8002b2c:	095b      	lsrs	r3, r3, #5
 8002b2e:	f003 0207 	and.w	r2, r3, #7
 8002b32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	4422      	add	r2, r4
 8002b3a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002b3c:	e106      	b.n	8002d4c <UART_SetConfig+0x4d8>
 8002b3e:	bf00      	nop
 8002b40:	40011000 	.word	0x40011000
 8002b44:	40011400 	.word	0x40011400
 8002b48:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002b4c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002b50:	2200      	movs	r2, #0
 8002b52:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8002b56:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8002b5a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8002b5e:	4642      	mov	r2, r8
 8002b60:	464b      	mov	r3, r9
 8002b62:	1891      	adds	r1, r2, r2
 8002b64:	6239      	str	r1, [r7, #32]
 8002b66:	415b      	adcs	r3, r3
 8002b68:	627b      	str	r3, [r7, #36]	@ 0x24
 8002b6a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002b6e:	4641      	mov	r1, r8
 8002b70:	1854      	adds	r4, r2, r1
 8002b72:	4649      	mov	r1, r9
 8002b74:	eb43 0501 	adc.w	r5, r3, r1
 8002b78:	f04f 0200 	mov.w	r2, #0
 8002b7c:	f04f 0300 	mov.w	r3, #0
 8002b80:	00eb      	lsls	r3, r5, #3
 8002b82:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002b86:	00e2      	lsls	r2, r4, #3
 8002b88:	4614      	mov	r4, r2
 8002b8a:	461d      	mov	r5, r3
 8002b8c:	4643      	mov	r3, r8
 8002b8e:	18e3      	adds	r3, r4, r3
 8002b90:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002b94:	464b      	mov	r3, r9
 8002b96:	eb45 0303 	adc.w	r3, r5, r3
 8002b9a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8002b9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ba2:	685b      	ldr	r3, [r3, #4]
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002baa:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8002bae:	f04f 0200 	mov.w	r2, #0
 8002bb2:	f04f 0300 	mov.w	r3, #0
 8002bb6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8002bba:	4629      	mov	r1, r5
 8002bbc:	008b      	lsls	r3, r1, #2
 8002bbe:	4621      	mov	r1, r4
 8002bc0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002bc4:	4621      	mov	r1, r4
 8002bc6:	008a      	lsls	r2, r1, #2
 8002bc8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8002bcc:	f7fd fb08 	bl	80001e0 <__aeabi_uldivmod>
 8002bd0:	4602      	mov	r2, r0
 8002bd2:	460b      	mov	r3, r1
 8002bd4:	4b60      	ldr	r3, [pc, #384]	@ (8002d58 <UART_SetConfig+0x4e4>)
 8002bd6:	fba3 2302 	umull	r2, r3, r3, r2
 8002bda:	095b      	lsrs	r3, r3, #5
 8002bdc:	011c      	lsls	r4, r3, #4
 8002bde:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002be2:	2200      	movs	r2, #0
 8002be4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002be8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002bec:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8002bf0:	4642      	mov	r2, r8
 8002bf2:	464b      	mov	r3, r9
 8002bf4:	1891      	adds	r1, r2, r2
 8002bf6:	61b9      	str	r1, [r7, #24]
 8002bf8:	415b      	adcs	r3, r3
 8002bfa:	61fb      	str	r3, [r7, #28]
 8002bfc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002c00:	4641      	mov	r1, r8
 8002c02:	1851      	adds	r1, r2, r1
 8002c04:	6139      	str	r1, [r7, #16]
 8002c06:	4649      	mov	r1, r9
 8002c08:	414b      	adcs	r3, r1
 8002c0a:	617b      	str	r3, [r7, #20]
 8002c0c:	f04f 0200 	mov.w	r2, #0
 8002c10:	f04f 0300 	mov.w	r3, #0
 8002c14:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002c18:	4659      	mov	r1, fp
 8002c1a:	00cb      	lsls	r3, r1, #3
 8002c1c:	4651      	mov	r1, sl
 8002c1e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002c22:	4651      	mov	r1, sl
 8002c24:	00ca      	lsls	r2, r1, #3
 8002c26:	4610      	mov	r0, r2
 8002c28:	4619      	mov	r1, r3
 8002c2a:	4603      	mov	r3, r0
 8002c2c:	4642      	mov	r2, r8
 8002c2e:	189b      	adds	r3, r3, r2
 8002c30:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002c34:	464b      	mov	r3, r9
 8002c36:	460a      	mov	r2, r1
 8002c38:	eb42 0303 	adc.w	r3, r2, r3
 8002c3c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8002c40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002c44:	685b      	ldr	r3, [r3, #4]
 8002c46:	2200      	movs	r2, #0
 8002c48:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002c4a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8002c4c:	f04f 0200 	mov.w	r2, #0
 8002c50:	f04f 0300 	mov.w	r3, #0
 8002c54:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8002c58:	4649      	mov	r1, r9
 8002c5a:	008b      	lsls	r3, r1, #2
 8002c5c:	4641      	mov	r1, r8
 8002c5e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002c62:	4641      	mov	r1, r8
 8002c64:	008a      	lsls	r2, r1, #2
 8002c66:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8002c6a:	f7fd fab9 	bl	80001e0 <__aeabi_uldivmod>
 8002c6e:	4602      	mov	r2, r0
 8002c70:	460b      	mov	r3, r1
 8002c72:	4611      	mov	r1, r2
 8002c74:	4b38      	ldr	r3, [pc, #224]	@ (8002d58 <UART_SetConfig+0x4e4>)
 8002c76:	fba3 2301 	umull	r2, r3, r3, r1
 8002c7a:	095b      	lsrs	r3, r3, #5
 8002c7c:	2264      	movs	r2, #100	@ 0x64
 8002c7e:	fb02 f303 	mul.w	r3, r2, r3
 8002c82:	1acb      	subs	r3, r1, r3
 8002c84:	011b      	lsls	r3, r3, #4
 8002c86:	3332      	adds	r3, #50	@ 0x32
 8002c88:	4a33      	ldr	r2, [pc, #204]	@ (8002d58 <UART_SetConfig+0x4e4>)
 8002c8a:	fba2 2303 	umull	r2, r3, r2, r3
 8002c8e:	095b      	lsrs	r3, r3, #5
 8002c90:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002c94:	441c      	add	r4, r3
 8002c96:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002c9a:	2200      	movs	r2, #0
 8002c9c:	673b      	str	r3, [r7, #112]	@ 0x70
 8002c9e:	677a      	str	r2, [r7, #116]	@ 0x74
 8002ca0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8002ca4:	4642      	mov	r2, r8
 8002ca6:	464b      	mov	r3, r9
 8002ca8:	1891      	adds	r1, r2, r2
 8002caa:	60b9      	str	r1, [r7, #8]
 8002cac:	415b      	adcs	r3, r3
 8002cae:	60fb      	str	r3, [r7, #12]
 8002cb0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002cb4:	4641      	mov	r1, r8
 8002cb6:	1851      	adds	r1, r2, r1
 8002cb8:	6039      	str	r1, [r7, #0]
 8002cba:	4649      	mov	r1, r9
 8002cbc:	414b      	adcs	r3, r1
 8002cbe:	607b      	str	r3, [r7, #4]
 8002cc0:	f04f 0200 	mov.w	r2, #0
 8002cc4:	f04f 0300 	mov.w	r3, #0
 8002cc8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002ccc:	4659      	mov	r1, fp
 8002cce:	00cb      	lsls	r3, r1, #3
 8002cd0:	4651      	mov	r1, sl
 8002cd2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002cd6:	4651      	mov	r1, sl
 8002cd8:	00ca      	lsls	r2, r1, #3
 8002cda:	4610      	mov	r0, r2
 8002cdc:	4619      	mov	r1, r3
 8002cde:	4603      	mov	r3, r0
 8002ce0:	4642      	mov	r2, r8
 8002ce2:	189b      	adds	r3, r3, r2
 8002ce4:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002ce6:	464b      	mov	r3, r9
 8002ce8:	460a      	mov	r2, r1
 8002cea:	eb42 0303 	adc.w	r3, r2, r3
 8002cee:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002cf0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002cf4:	685b      	ldr	r3, [r3, #4]
 8002cf6:	2200      	movs	r2, #0
 8002cf8:	663b      	str	r3, [r7, #96]	@ 0x60
 8002cfa:	667a      	str	r2, [r7, #100]	@ 0x64
 8002cfc:	f04f 0200 	mov.w	r2, #0
 8002d00:	f04f 0300 	mov.w	r3, #0
 8002d04:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8002d08:	4649      	mov	r1, r9
 8002d0a:	008b      	lsls	r3, r1, #2
 8002d0c:	4641      	mov	r1, r8
 8002d0e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002d12:	4641      	mov	r1, r8
 8002d14:	008a      	lsls	r2, r1, #2
 8002d16:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8002d1a:	f7fd fa61 	bl	80001e0 <__aeabi_uldivmod>
 8002d1e:	4602      	mov	r2, r0
 8002d20:	460b      	mov	r3, r1
 8002d22:	4b0d      	ldr	r3, [pc, #52]	@ (8002d58 <UART_SetConfig+0x4e4>)
 8002d24:	fba3 1302 	umull	r1, r3, r3, r2
 8002d28:	095b      	lsrs	r3, r3, #5
 8002d2a:	2164      	movs	r1, #100	@ 0x64
 8002d2c:	fb01 f303 	mul.w	r3, r1, r3
 8002d30:	1ad3      	subs	r3, r2, r3
 8002d32:	011b      	lsls	r3, r3, #4
 8002d34:	3332      	adds	r3, #50	@ 0x32
 8002d36:	4a08      	ldr	r2, [pc, #32]	@ (8002d58 <UART_SetConfig+0x4e4>)
 8002d38:	fba2 2303 	umull	r2, r3, r2, r3
 8002d3c:	095b      	lsrs	r3, r3, #5
 8002d3e:	f003 020f 	and.w	r2, r3, #15
 8002d42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	4422      	add	r2, r4
 8002d4a:	609a      	str	r2, [r3, #8]
}
 8002d4c:	bf00      	nop
 8002d4e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8002d52:	46bd      	mov	sp, r7
 8002d54:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002d58:	51eb851f 	.word	0x51eb851f

08002d5c <__NVIC_SetPriority>:
{
 8002d5c:	b480      	push	{r7}
 8002d5e:	b083      	sub	sp, #12
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	4603      	mov	r3, r0
 8002d64:	6039      	str	r1, [r7, #0]
 8002d66:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	db0a      	blt.n	8002d86 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d70:	683b      	ldr	r3, [r7, #0]
 8002d72:	b2da      	uxtb	r2, r3
 8002d74:	490c      	ldr	r1, [pc, #48]	@ (8002da8 <__NVIC_SetPriority+0x4c>)
 8002d76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d7a:	0112      	lsls	r2, r2, #4
 8002d7c:	b2d2      	uxtb	r2, r2
 8002d7e:	440b      	add	r3, r1
 8002d80:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8002d84:	e00a      	b.n	8002d9c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d86:	683b      	ldr	r3, [r7, #0]
 8002d88:	b2da      	uxtb	r2, r3
 8002d8a:	4908      	ldr	r1, [pc, #32]	@ (8002dac <__NVIC_SetPriority+0x50>)
 8002d8c:	79fb      	ldrb	r3, [r7, #7]
 8002d8e:	f003 030f 	and.w	r3, r3, #15
 8002d92:	3b04      	subs	r3, #4
 8002d94:	0112      	lsls	r2, r2, #4
 8002d96:	b2d2      	uxtb	r2, r2
 8002d98:	440b      	add	r3, r1
 8002d9a:	761a      	strb	r2, [r3, #24]
}
 8002d9c:	bf00      	nop
 8002d9e:	370c      	adds	r7, #12
 8002da0:	46bd      	mov	sp, r7
 8002da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da6:	4770      	bx	lr
 8002da8:	e000e100 	.word	0xe000e100
 8002dac:	e000ed00 	.word	0xe000ed00

08002db0 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8002db0:	b580      	push	{r7, lr}
 8002db2:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8002db4:	4b05      	ldr	r3, [pc, #20]	@ (8002dcc <SysTick_Handler+0x1c>)
 8002db6:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8002db8:	f001 fd18 	bl	80047ec <xTaskGetSchedulerState>
 8002dbc:	4603      	mov	r3, r0
 8002dbe:	2b01      	cmp	r3, #1
 8002dc0:	d001      	beq.n	8002dc6 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8002dc2:	f002 fb11 	bl	80053e8 <xPortSysTickHandler>
  }
}
 8002dc6:	bf00      	nop
 8002dc8:	bd80      	pop	{r7, pc}
 8002dca:	bf00      	nop
 8002dcc:	e000e010 	.word	0xe000e010

08002dd0 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8002dd0:	b580      	push	{r7, lr}
 8002dd2:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8002dd4:	2100      	movs	r1, #0
 8002dd6:	f06f 0004 	mvn.w	r0, #4
 8002dda:	f7ff ffbf 	bl	8002d5c <__NVIC_SetPriority>
#endif
}
 8002dde:	bf00      	nop
 8002de0:	bd80      	pop	{r7, pc}
	...

08002de4 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8002de4:	b480      	push	{r7}
 8002de6:	b083      	sub	sp, #12
 8002de8:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002dea:	f3ef 8305 	mrs	r3, IPSR
 8002dee:	603b      	str	r3, [r7, #0]
  return(result);
 8002df0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d003      	beq.n	8002dfe <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8002df6:	f06f 0305 	mvn.w	r3, #5
 8002dfa:	607b      	str	r3, [r7, #4]
 8002dfc:	e00c      	b.n	8002e18 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8002dfe:	4b0a      	ldr	r3, [pc, #40]	@ (8002e28 <osKernelInitialize+0x44>)
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d105      	bne.n	8002e12 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8002e06:	4b08      	ldr	r3, [pc, #32]	@ (8002e28 <osKernelInitialize+0x44>)
 8002e08:	2201      	movs	r2, #1
 8002e0a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8002e0c:	2300      	movs	r3, #0
 8002e0e:	607b      	str	r3, [r7, #4]
 8002e10:	e002      	b.n	8002e18 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8002e12:	f04f 33ff 	mov.w	r3, #4294967295
 8002e16:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8002e18:	687b      	ldr	r3, [r7, #4]
}
 8002e1a:	4618      	mov	r0, r3
 8002e1c:	370c      	adds	r7, #12
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e24:	4770      	bx	lr
 8002e26:	bf00      	nop
 8002e28:	200000c8 	.word	0x200000c8

08002e2c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8002e2c:	b580      	push	{r7, lr}
 8002e2e:	b082      	sub	sp, #8
 8002e30:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002e32:	f3ef 8305 	mrs	r3, IPSR
 8002e36:	603b      	str	r3, [r7, #0]
  return(result);
 8002e38:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d003      	beq.n	8002e46 <osKernelStart+0x1a>
    stat = osErrorISR;
 8002e3e:	f06f 0305 	mvn.w	r3, #5
 8002e42:	607b      	str	r3, [r7, #4]
 8002e44:	e010      	b.n	8002e68 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8002e46:	4b0b      	ldr	r3, [pc, #44]	@ (8002e74 <osKernelStart+0x48>)
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	2b01      	cmp	r3, #1
 8002e4c:	d109      	bne.n	8002e62 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8002e4e:	f7ff ffbf 	bl	8002dd0 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8002e52:	4b08      	ldr	r3, [pc, #32]	@ (8002e74 <osKernelStart+0x48>)
 8002e54:	2202      	movs	r2, #2
 8002e56:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8002e58:	f001 f87a 	bl	8003f50 <vTaskStartScheduler>
      stat = osOK;
 8002e5c:	2300      	movs	r3, #0
 8002e5e:	607b      	str	r3, [r7, #4]
 8002e60:	e002      	b.n	8002e68 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8002e62:	f04f 33ff 	mov.w	r3, #4294967295
 8002e66:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8002e68:	687b      	ldr	r3, [r7, #4]
}
 8002e6a:	4618      	mov	r0, r3
 8002e6c:	3708      	adds	r7, #8
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	bd80      	pop	{r7, pc}
 8002e72:	bf00      	nop
 8002e74:	200000c8 	.word	0x200000c8

08002e78 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	b08e      	sub	sp, #56	@ 0x38
 8002e7c:	af04      	add	r7, sp, #16
 8002e7e:	60f8      	str	r0, [r7, #12]
 8002e80:	60b9      	str	r1, [r7, #8]
 8002e82:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8002e84:	2300      	movs	r3, #0
 8002e86:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002e88:	f3ef 8305 	mrs	r3, IPSR
 8002e8c:	617b      	str	r3, [r7, #20]
  return(result);
 8002e8e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d17e      	bne.n	8002f92 <osThreadNew+0x11a>
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d07b      	beq.n	8002f92 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8002e9a:	2380      	movs	r3, #128	@ 0x80
 8002e9c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8002e9e:	2318      	movs	r3, #24
 8002ea0:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8002ea2:	2300      	movs	r3, #0
 8002ea4:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8002ea6:	f04f 33ff 	mov.w	r3, #4294967295
 8002eaa:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d045      	beq.n	8002f3e <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d002      	beq.n	8002ec0 <osThreadNew+0x48>
        name = attr->name;
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	699b      	ldr	r3, [r3, #24]
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d002      	beq.n	8002ece <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	699b      	ldr	r3, [r3, #24]
 8002ecc:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8002ece:	69fb      	ldr	r3, [r7, #28]
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d008      	beq.n	8002ee6 <osThreadNew+0x6e>
 8002ed4:	69fb      	ldr	r3, [r7, #28]
 8002ed6:	2b38      	cmp	r3, #56	@ 0x38
 8002ed8:	d805      	bhi.n	8002ee6 <osThreadNew+0x6e>
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	685b      	ldr	r3, [r3, #4]
 8002ede:	f003 0301 	and.w	r3, r3, #1
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d001      	beq.n	8002eea <osThreadNew+0x72>
        return (NULL);
 8002ee6:	2300      	movs	r3, #0
 8002ee8:	e054      	b.n	8002f94 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	695b      	ldr	r3, [r3, #20]
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d003      	beq.n	8002efa <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	695b      	ldr	r3, [r3, #20]
 8002ef6:	089b      	lsrs	r3, r3, #2
 8002ef8:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	689b      	ldr	r3, [r3, #8]
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d00e      	beq.n	8002f20 <osThreadNew+0xa8>
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	68db      	ldr	r3, [r3, #12]
 8002f06:	2b5b      	cmp	r3, #91	@ 0x5b
 8002f08:	d90a      	bls.n	8002f20 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d006      	beq.n	8002f20 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	695b      	ldr	r3, [r3, #20]
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d002      	beq.n	8002f20 <osThreadNew+0xa8>
        mem = 1;
 8002f1a:	2301      	movs	r3, #1
 8002f1c:	61bb      	str	r3, [r7, #24]
 8002f1e:	e010      	b.n	8002f42 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	689b      	ldr	r3, [r3, #8]
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d10c      	bne.n	8002f42 <osThreadNew+0xca>
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	68db      	ldr	r3, [r3, #12]
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d108      	bne.n	8002f42 <osThreadNew+0xca>
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	691b      	ldr	r3, [r3, #16]
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d104      	bne.n	8002f42 <osThreadNew+0xca>
          mem = 0;
 8002f38:	2300      	movs	r3, #0
 8002f3a:	61bb      	str	r3, [r7, #24]
 8002f3c:	e001      	b.n	8002f42 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8002f3e:	2300      	movs	r3, #0
 8002f40:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8002f42:	69bb      	ldr	r3, [r7, #24]
 8002f44:	2b01      	cmp	r3, #1
 8002f46:	d110      	bne.n	8002f6a <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8002f4c:	687a      	ldr	r2, [r7, #4]
 8002f4e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002f50:	9202      	str	r2, [sp, #8]
 8002f52:	9301      	str	r3, [sp, #4]
 8002f54:	69fb      	ldr	r3, [r7, #28]
 8002f56:	9300      	str	r3, [sp, #0]
 8002f58:	68bb      	ldr	r3, [r7, #8]
 8002f5a:	6a3a      	ldr	r2, [r7, #32]
 8002f5c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002f5e:	68f8      	ldr	r0, [r7, #12]
 8002f60:	f000 fe1a 	bl	8003b98 <xTaskCreateStatic>
 8002f64:	4603      	mov	r3, r0
 8002f66:	613b      	str	r3, [r7, #16]
 8002f68:	e013      	b.n	8002f92 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8002f6a:	69bb      	ldr	r3, [r7, #24]
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d110      	bne.n	8002f92 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8002f70:	6a3b      	ldr	r3, [r7, #32]
 8002f72:	b29a      	uxth	r2, r3
 8002f74:	f107 0310 	add.w	r3, r7, #16
 8002f78:	9301      	str	r3, [sp, #4]
 8002f7a:	69fb      	ldr	r3, [r7, #28]
 8002f7c:	9300      	str	r3, [sp, #0]
 8002f7e:	68bb      	ldr	r3, [r7, #8]
 8002f80:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002f82:	68f8      	ldr	r0, [r7, #12]
 8002f84:	f000 fe68 	bl	8003c58 <xTaskCreate>
 8002f88:	4603      	mov	r3, r0
 8002f8a:	2b01      	cmp	r3, #1
 8002f8c:	d001      	beq.n	8002f92 <osThreadNew+0x11a>
            hTask = NULL;
 8002f8e:	2300      	movs	r3, #0
 8002f90:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8002f92:	693b      	ldr	r3, [r7, #16]
}
 8002f94:	4618      	mov	r0, r3
 8002f96:	3728      	adds	r7, #40	@ 0x28
 8002f98:	46bd      	mov	sp, r7
 8002f9a:	bd80      	pop	{r7, pc}

08002f9c <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8002f9c:	b580      	push	{r7, lr}
 8002f9e:	b084      	sub	sp, #16
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002fa4:	f3ef 8305 	mrs	r3, IPSR
 8002fa8:	60bb      	str	r3, [r7, #8]
  return(result);
 8002faa:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d003      	beq.n	8002fb8 <osDelay+0x1c>
    stat = osErrorISR;
 8002fb0:	f06f 0305 	mvn.w	r3, #5
 8002fb4:	60fb      	str	r3, [r7, #12]
 8002fb6:	e007      	b.n	8002fc8 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8002fb8:	2300      	movs	r3, #0
 8002fba:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d002      	beq.n	8002fc8 <osDelay+0x2c>
      vTaskDelay(ticks);
 8002fc2:	6878      	ldr	r0, [r7, #4]
 8002fc4:	f000 ff8e 	bl	8003ee4 <vTaskDelay>
    }
  }

  return (stat);
 8002fc8:	68fb      	ldr	r3, [r7, #12]
}
 8002fca:	4618      	mov	r0, r3
 8002fcc:	3710      	adds	r7, #16
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	bd80      	pop	{r7, pc}
	...

08002fd4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8002fd4:	b480      	push	{r7}
 8002fd6:	b085      	sub	sp, #20
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	60f8      	str	r0, [r7, #12]
 8002fdc:	60b9      	str	r1, [r7, #8]
 8002fde:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	4a07      	ldr	r2, [pc, #28]	@ (8003000 <vApplicationGetIdleTaskMemory+0x2c>)
 8002fe4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8002fe6:	68bb      	ldr	r3, [r7, #8]
 8002fe8:	4a06      	ldr	r2, [pc, #24]	@ (8003004 <vApplicationGetIdleTaskMemory+0x30>)
 8002fea:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	2280      	movs	r2, #128	@ 0x80
 8002ff0:	601a      	str	r2, [r3, #0]
}
 8002ff2:	bf00      	nop
 8002ff4:	3714      	adds	r7, #20
 8002ff6:	46bd      	mov	sp, r7
 8002ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ffc:	4770      	bx	lr
 8002ffe:	bf00      	nop
 8003000:	200000cc 	.word	0x200000cc
 8003004:	20000128 	.word	0x20000128

08003008 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8003008:	b480      	push	{r7}
 800300a:	b085      	sub	sp, #20
 800300c:	af00      	add	r7, sp, #0
 800300e:	60f8      	str	r0, [r7, #12]
 8003010:	60b9      	str	r1, [r7, #8]
 8003012:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	4a07      	ldr	r2, [pc, #28]	@ (8003034 <vApplicationGetTimerTaskMemory+0x2c>)
 8003018:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800301a:	68bb      	ldr	r3, [r7, #8]
 800301c:	4a06      	ldr	r2, [pc, #24]	@ (8003038 <vApplicationGetTimerTaskMemory+0x30>)
 800301e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003026:	601a      	str	r2, [r3, #0]
}
 8003028:	bf00      	nop
 800302a:	3714      	adds	r7, #20
 800302c:	46bd      	mov	sp, r7
 800302e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003032:	4770      	bx	lr
 8003034:	20000328 	.word	0x20000328
 8003038:	20000384 	.word	0x20000384

0800303c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800303c:	b480      	push	{r7}
 800303e:	b083      	sub	sp, #12
 8003040:	af00      	add	r7, sp, #0
 8003042:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	f103 0208 	add.w	r2, r3, #8
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	f04f 32ff 	mov.w	r2, #4294967295
 8003054:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	f103 0208 	add.w	r2, r3, #8
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	f103 0208 	add.w	r2, r3, #8
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	2200      	movs	r2, #0
 800306e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003070:	bf00      	nop
 8003072:	370c      	adds	r7, #12
 8003074:	46bd      	mov	sp, r7
 8003076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800307a:	4770      	bx	lr

0800307c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800307c:	b480      	push	{r7}
 800307e:	b083      	sub	sp, #12
 8003080:	af00      	add	r7, sp, #0
 8003082:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	2200      	movs	r2, #0
 8003088:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800308a:	bf00      	nop
 800308c:	370c      	adds	r7, #12
 800308e:	46bd      	mov	sp, r7
 8003090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003094:	4770      	bx	lr

08003096 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003096:	b480      	push	{r7}
 8003098:	b085      	sub	sp, #20
 800309a:	af00      	add	r7, sp, #0
 800309c:	6078      	str	r0, [r7, #4]
 800309e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	685b      	ldr	r3, [r3, #4]
 80030a4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80030a6:	683b      	ldr	r3, [r7, #0]
 80030a8:	68fa      	ldr	r2, [r7, #12]
 80030aa:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	689a      	ldr	r2, [r3, #8]
 80030b0:	683b      	ldr	r3, [r7, #0]
 80030b2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	689b      	ldr	r3, [r3, #8]
 80030b8:	683a      	ldr	r2, [r7, #0]
 80030ba:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	683a      	ldr	r2, [r7, #0]
 80030c0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80030c2:	683b      	ldr	r3, [r7, #0]
 80030c4:	687a      	ldr	r2, [r7, #4]
 80030c6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	1c5a      	adds	r2, r3, #1
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	601a      	str	r2, [r3, #0]
}
 80030d2:	bf00      	nop
 80030d4:	3714      	adds	r7, #20
 80030d6:	46bd      	mov	sp, r7
 80030d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030dc:	4770      	bx	lr

080030de <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80030de:	b480      	push	{r7}
 80030e0:	b085      	sub	sp, #20
 80030e2:	af00      	add	r7, sp, #0
 80030e4:	6078      	str	r0, [r7, #4]
 80030e6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80030e8:	683b      	ldr	r3, [r7, #0]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80030ee:	68bb      	ldr	r3, [r7, #8]
 80030f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030f4:	d103      	bne.n	80030fe <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	691b      	ldr	r3, [r3, #16]
 80030fa:	60fb      	str	r3, [r7, #12]
 80030fc:	e00c      	b.n	8003118 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	3308      	adds	r3, #8
 8003102:	60fb      	str	r3, [r7, #12]
 8003104:	e002      	b.n	800310c <vListInsert+0x2e>
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	685b      	ldr	r3, [r3, #4]
 800310a:	60fb      	str	r3, [r7, #12]
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	685b      	ldr	r3, [r3, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	68ba      	ldr	r2, [r7, #8]
 8003114:	429a      	cmp	r2, r3
 8003116:	d2f6      	bcs.n	8003106 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	685a      	ldr	r2, [r3, #4]
 800311c:	683b      	ldr	r3, [r7, #0]
 800311e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003120:	683b      	ldr	r3, [r7, #0]
 8003122:	685b      	ldr	r3, [r3, #4]
 8003124:	683a      	ldr	r2, [r7, #0]
 8003126:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003128:	683b      	ldr	r3, [r7, #0]
 800312a:	68fa      	ldr	r2, [r7, #12]
 800312c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	683a      	ldr	r2, [r7, #0]
 8003132:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003134:	683b      	ldr	r3, [r7, #0]
 8003136:	687a      	ldr	r2, [r7, #4]
 8003138:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	1c5a      	adds	r2, r3, #1
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	601a      	str	r2, [r3, #0]
}
 8003144:	bf00      	nop
 8003146:	3714      	adds	r7, #20
 8003148:	46bd      	mov	sp, r7
 800314a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800314e:	4770      	bx	lr

08003150 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003150:	b480      	push	{r7}
 8003152:	b085      	sub	sp, #20
 8003154:	af00      	add	r7, sp, #0
 8003156:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	691b      	ldr	r3, [r3, #16]
 800315c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	685b      	ldr	r3, [r3, #4]
 8003162:	687a      	ldr	r2, [r7, #4]
 8003164:	6892      	ldr	r2, [r2, #8]
 8003166:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	689b      	ldr	r3, [r3, #8]
 800316c:	687a      	ldr	r2, [r7, #4]
 800316e:	6852      	ldr	r2, [r2, #4]
 8003170:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	685b      	ldr	r3, [r3, #4]
 8003176:	687a      	ldr	r2, [r7, #4]
 8003178:	429a      	cmp	r2, r3
 800317a:	d103      	bne.n	8003184 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	689a      	ldr	r2, [r3, #8]
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	2200      	movs	r2, #0
 8003188:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	1e5a      	subs	r2, r3, #1
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	681b      	ldr	r3, [r3, #0]
}
 8003198:	4618      	mov	r0, r3
 800319a:	3714      	adds	r7, #20
 800319c:	46bd      	mov	sp, r7
 800319e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a2:	4770      	bx	lr

080031a4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80031a4:	b580      	push	{r7, lr}
 80031a6:	b084      	sub	sp, #16
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	6078      	str	r0, [r7, #4]
 80031ac:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d10b      	bne.n	80031d0 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80031b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80031bc:	f383 8811 	msr	BASEPRI, r3
 80031c0:	f3bf 8f6f 	isb	sy
 80031c4:	f3bf 8f4f 	dsb	sy
 80031c8:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80031ca:	bf00      	nop
 80031cc:	bf00      	nop
 80031ce:	e7fd      	b.n	80031cc <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80031d0:	f002 f87a 	bl	80052c8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	681a      	ldr	r2, [r3, #0]
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80031dc:	68f9      	ldr	r1, [r7, #12]
 80031de:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80031e0:	fb01 f303 	mul.w	r3, r1, r3
 80031e4:	441a      	add	r2, r3
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	2200      	movs	r2, #0
 80031ee:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	681a      	ldr	r2, [r3, #0]
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	681a      	ldr	r2, [r3, #0]
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003200:	3b01      	subs	r3, #1
 8003202:	68f9      	ldr	r1, [r7, #12]
 8003204:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8003206:	fb01 f303 	mul.w	r3, r1, r3
 800320a:	441a      	add	r2, r3
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	22ff      	movs	r2, #255	@ 0xff
 8003214:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	22ff      	movs	r2, #255	@ 0xff
 800321c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8003220:	683b      	ldr	r3, [r7, #0]
 8003222:	2b00      	cmp	r3, #0
 8003224:	d114      	bne.n	8003250 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	691b      	ldr	r3, [r3, #16]
 800322a:	2b00      	cmp	r3, #0
 800322c:	d01a      	beq.n	8003264 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	3310      	adds	r3, #16
 8003232:	4618      	mov	r0, r3
 8003234:	f001 f91a 	bl	800446c <xTaskRemoveFromEventList>
 8003238:	4603      	mov	r3, r0
 800323a:	2b00      	cmp	r3, #0
 800323c:	d012      	beq.n	8003264 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800323e:	4b0d      	ldr	r3, [pc, #52]	@ (8003274 <xQueueGenericReset+0xd0>)
 8003240:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003244:	601a      	str	r2, [r3, #0]
 8003246:	f3bf 8f4f 	dsb	sy
 800324a:	f3bf 8f6f 	isb	sy
 800324e:	e009      	b.n	8003264 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	3310      	adds	r3, #16
 8003254:	4618      	mov	r0, r3
 8003256:	f7ff fef1 	bl	800303c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	3324      	adds	r3, #36	@ 0x24
 800325e:	4618      	mov	r0, r3
 8003260:	f7ff feec 	bl	800303c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003264:	f002 f862 	bl	800532c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8003268:	2301      	movs	r3, #1
}
 800326a:	4618      	mov	r0, r3
 800326c:	3710      	adds	r7, #16
 800326e:	46bd      	mov	sp, r7
 8003270:	bd80      	pop	{r7, pc}
 8003272:	bf00      	nop
 8003274:	e000ed04 	.word	0xe000ed04

08003278 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8003278:	b580      	push	{r7, lr}
 800327a:	b08e      	sub	sp, #56	@ 0x38
 800327c:	af02      	add	r7, sp, #8
 800327e:	60f8      	str	r0, [r7, #12]
 8003280:	60b9      	str	r1, [r7, #8]
 8003282:	607a      	str	r2, [r7, #4]
 8003284:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	2b00      	cmp	r3, #0
 800328a:	d10b      	bne.n	80032a4 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800328c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003290:	f383 8811 	msr	BASEPRI, r3
 8003294:	f3bf 8f6f 	isb	sy
 8003298:	f3bf 8f4f 	dsb	sy
 800329c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800329e:	bf00      	nop
 80032a0:	bf00      	nop
 80032a2:	e7fd      	b.n	80032a0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80032a4:	683b      	ldr	r3, [r7, #0]
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d10b      	bne.n	80032c2 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 80032aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80032ae:	f383 8811 	msr	BASEPRI, r3
 80032b2:	f3bf 8f6f 	isb	sy
 80032b6:	f3bf 8f4f 	dsb	sy
 80032ba:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80032bc:	bf00      	nop
 80032be:	bf00      	nop
 80032c0:	e7fd      	b.n	80032be <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d002      	beq.n	80032ce <xQueueGenericCreateStatic+0x56>
 80032c8:	68bb      	ldr	r3, [r7, #8]
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d001      	beq.n	80032d2 <xQueueGenericCreateStatic+0x5a>
 80032ce:	2301      	movs	r3, #1
 80032d0:	e000      	b.n	80032d4 <xQueueGenericCreateStatic+0x5c>
 80032d2:	2300      	movs	r3, #0
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d10b      	bne.n	80032f0 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 80032d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80032dc:	f383 8811 	msr	BASEPRI, r3
 80032e0:	f3bf 8f6f 	isb	sy
 80032e4:	f3bf 8f4f 	dsb	sy
 80032e8:	623b      	str	r3, [r7, #32]
}
 80032ea:	bf00      	nop
 80032ec:	bf00      	nop
 80032ee:	e7fd      	b.n	80032ec <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d102      	bne.n	80032fc <xQueueGenericCreateStatic+0x84>
 80032f6:	68bb      	ldr	r3, [r7, #8]
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d101      	bne.n	8003300 <xQueueGenericCreateStatic+0x88>
 80032fc:	2301      	movs	r3, #1
 80032fe:	e000      	b.n	8003302 <xQueueGenericCreateStatic+0x8a>
 8003300:	2300      	movs	r3, #0
 8003302:	2b00      	cmp	r3, #0
 8003304:	d10b      	bne.n	800331e <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8003306:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800330a:	f383 8811 	msr	BASEPRI, r3
 800330e:	f3bf 8f6f 	isb	sy
 8003312:	f3bf 8f4f 	dsb	sy
 8003316:	61fb      	str	r3, [r7, #28]
}
 8003318:	bf00      	nop
 800331a:	bf00      	nop
 800331c:	e7fd      	b.n	800331a <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800331e:	2350      	movs	r3, #80	@ 0x50
 8003320:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8003322:	697b      	ldr	r3, [r7, #20]
 8003324:	2b50      	cmp	r3, #80	@ 0x50
 8003326:	d00b      	beq.n	8003340 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8003328:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800332c:	f383 8811 	msr	BASEPRI, r3
 8003330:	f3bf 8f6f 	isb	sy
 8003334:	f3bf 8f4f 	dsb	sy
 8003338:	61bb      	str	r3, [r7, #24]
}
 800333a:	bf00      	nop
 800333c:	bf00      	nop
 800333e:	e7fd      	b.n	800333c <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8003340:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003342:	683b      	ldr	r3, [r7, #0]
 8003344:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8003346:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003348:	2b00      	cmp	r3, #0
 800334a:	d00d      	beq.n	8003368 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800334c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800334e:	2201      	movs	r2, #1
 8003350:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003354:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8003358:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800335a:	9300      	str	r3, [sp, #0]
 800335c:	4613      	mov	r3, r2
 800335e:	687a      	ldr	r2, [r7, #4]
 8003360:	68b9      	ldr	r1, [r7, #8]
 8003362:	68f8      	ldr	r0, [r7, #12]
 8003364:	f000 f805 	bl	8003372 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8003368:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800336a:	4618      	mov	r0, r3
 800336c:	3730      	adds	r7, #48	@ 0x30
 800336e:	46bd      	mov	sp, r7
 8003370:	bd80      	pop	{r7, pc}

08003372 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003372:	b580      	push	{r7, lr}
 8003374:	b084      	sub	sp, #16
 8003376:	af00      	add	r7, sp, #0
 8003378:	60f8      	str	r0, [r7, #12]
 800337a:	60b9      	str	r1, [r7, #8]
 800337c:	607a      	str	r2, [r7, #4]
 800337e:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8003380:	68bb      	ldr	r3, [r7, #8]
 8003382:	2b00      	cmp	r3, #0
 8003384:	d103      	bne.n	800338e <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003386:	69bb      	ldr	r3, [r7, #24]
 8003388:	69ba      	ldr	r2, [r7, #24]
 800338a:	601a      	str	r2, [r3, #0]
 800338c:	e002      	b.n	8003394 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800338e:	69bb      	ldr	r3, [r7, #24]
 8003390:	687a      	ldr	r2, [r7, #4]
 8003392:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8003394:	69bb      	ldr	r3, [r7, #24]
 8003396:	68fa      	ldr	r2, [r7, #12]
 8003398:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800339a:	69bb      	ldr	r3, [r7, #24]
 800339c:	68ba      	ldr	r2, [r7, #8]
 800339e:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80033a0:	2101      	movs	r1, #1
 80033a2:	69b8      	ldr	r0, [r7, #24]
 80033a4:	f7ff fefe 	bl	80031a4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80033a8:	69bb      	ldr	r3, [r7, #24]
 80033aa:	78fa      	ldrb	r2, [r7, #3]
 80033ac:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80033b0:	bf00      	nop
 80033b2:	3710      	adds	r7, #16
 80033b4:	46bd      	mov	sp, r7
 80033b6:	bd80      	pop	{r7, pc}

080033b8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80033b8:	b580      	push	{r7, lr}
 80033ba:	b08e      	sub	sp, #56	@ 0x38
 80033bc:	af00      	add	r7, sp, #0
 80033be:	60f8      	str	r0, [r7, #12]
 80033c0:	60b9      	str	r1, [r7, #8]
 80033c2:	607a      	str	r2, [r7, #4]
 80033c4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80033c6:	2300      	movs	r3, #0
 80033c8:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80033ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d10b      	bne.n	80033ec <xQueueGenericSend+0x34>
	__asm volatile
 80033d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80033d8:	f383 8811 	msr	BASEPRI, r3
 80033dc:	f3bf 8f6f 	isb	sy
 80033e0:	f3bf 8f4f 	dsb	sy
 80033e4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80033e6:	bf00      	nop
 80033e8:	bf00      	nop
 80033ea:	e7fd      	b.n	80033e8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80033ec:	68bb      	ldr	r3, [r7, #8]
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d103      	bne.n	80033fa <xQueueGenericSend+0x42>
 80033f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80033f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d101      	bne.n	80033fe <xQueueGenericSend+0x46>
 80033fa:	2301      	movs	r3, #1
 80033fc:	e000      	b.n	8003400 <xQueueGenericSend+0x48>
 80033fe:	2300      	movs	r3, #0
 8003400:	2b00      	cmp	r3, #0
 8003402:	d10b      	bne.n	800341c <xQueueGenericSend+0x64>
	__asm volatile
 8003404:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003408:	f383 8811 	msr	BASEPRI, r3
 800340c:	f3bf 8f6f 	isb	sy
 8003410:	f3bf 8f4f 	dsb	sy
 8003414:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8003416:	bf00      	nop
 8003418:	bf00      	nop
 800341a:	e7fd      	b.n	8003418 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800341c:	683b      	ldr	r3, [r7, #0]
 800341e:	2b02      	cmp	r3, #2
 8003420:	d103      	bne.n	800342a <xQueueGenericSend+0x72>
 8003422:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003424:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003426:	2b01      	cmp	r3, #1
 8003428:	d101      	bne.n	800342e <xQueueGenericSend+0x76>
 800342a:	2301      	movs	r3, #1
 800342c:	e000      	b.n	8003430 <xQueueGenericSend+0x78>
 800342e:	2300      	movs	r3, #0
 8003430:	2b00      	cmp	r3, #0
 8003432:	d10b      	bne.n	800344c <xQueueGenericSend+0x94>
	__asm volatile
 8003434:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003438:	f383 8811 	msr	BASEPRI, r3
 800343c:	f3bf 8f6f 	isb	sy
 8003440:	f3bf 8f4f 	dsb	sy
 8003444:	623b      	str	r3, [r7, #32]
}
 8003446:	bf00      	nop
 8003448:	bf00      	nop
 800344a:	e7fd      	b.n	8003448 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800344c:	f001 f9ce 	bl	80047ec <xTaskGetSchedulerState>
 8003450:	4603      	mov	r3, r0
 8003452:	2b00      	cmp	r3, #0
 8003454:	d102      	bne.n	800345c <xQueueGenericSend+0xa4>
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	2b00      	cmp	r3, #0
 800345a:	d101      	bne.n	8003460 <xQueueGenericSend+0xa8>
 800345c:	2301      	movs	r3, #1
 800345e:	e000      	b.n	8003462 <xQueueGenericSend+0xaa>
 8003460:	2300      	movs	r3, #0
 8003462:	2b00      	cmp	r3, #0
 8003464:	d10b      	bne.n	800347e <xQueueGenericSend+0xc6>
	__asm volatile
 8003466:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800346a:	f383 8811 	msr	BASEPRI, r3
 800346e:	f3bf 8f6f 	isb	sy
 8003472:	f3bf 8f4f 	dsb	sy
 8003476:	61fb      	str	r3, [r7, #28]
}
 8003478:	bf00      	nop
 800347a:	bf00      	nop
 800347c:	e7fd      	b.n	800347a <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800347e:	f001 ff23 	bl	80052c8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003482:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003484:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003486:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003488:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800348a:	429a      	cmp	r2, r3
 800348c:	d302      	bcc.n	8003494 <xQueueGenericSend+0xdc>
 800348e:	683b      	ldr	r3, [r7, #0]
 8003490:	2b02      	cmp	r3, #2
 8003492:	d129      	bne.n	80034e8 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003494:	683a      	ldr	r2, [r7, #0]
 8003496:	68b9      	ldr	r1, [r7, #8]
 8003498:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800349a:	f000 fa0f 	bl	80038bc <prvCopyDataToQueue>
 800349e:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80034a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80034a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d010      	beq.n	80034ca <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80034a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80034aa:	3324      	adds	r3, #36	@ 0x24
 80034ac:	4618      	mov	r0, r3
 80034ae:	f000 ffdd 	bl	800446c <xTaskRemoveFromEventList>
 80034b2:	4603      	mov	r3, r0
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d013      	beq.n	80034e0 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80034b8:	4b3f      	ldr	r3, [pc, #252]	@ (80035b8 <xQueueGenericSend+0x200>)
 80034ba:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80034be:	601a      	str	r2, [r3, #0]
 80034c0:	f3bf 8f4f 	dsb	sy
 80034c4:	f3bf 8f6f 	isb	sy
 80034c8:	e00a      	b.n	80034e0 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80034ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d007      	beq.n	80034e0 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80034d0:	4b39      	ldr	r3, [pc, #228]	@ (80035b8 <xQueueGenericSend+0x200>)
 80034d2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80034d6:	601a      	str	r2, [r3, #0]
 80034d8:	f3bf 8f4f 	dsb	sy
 80034dc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80034e0:	f001 ff24 	bl	800532c <vPortExitCritical>
				return pdPASS;
 80034e4:	2301      	movs	r3, #1
 80034e6:	e063      	b.n	80035b0 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d103      	bne.n	80034f6 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80034ee:	f001 ff1d 	bl	800532c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80034f2:	2300      	movs	r3, #0
 80034f4:	e05c      	b.n	80035b0 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80034f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d106      	bne.n	800350a <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80034fc:	f107 0314 	add.w	r3, r7, #20
 8003500:	4618      	mov	r0, r3
 8003502:	f001 f817 	bl	8004534 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003506:	2301      	movs	r3, #1
 8003508:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800350a:	f001 ff0f 	bl	800532c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800350e:	f000 fd87 	bl	8004020 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003512:	f001 fed9 	bl	80052c8 <vPortEnterCritical>
 8003516:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003518:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800351c:	b25b      	sxtb	r3, r3
 800351e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003522:	d103      	bne.n	800352c <xQueueGenericSend+0x174>
 8003524:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003526:	2200      	movs	r2, #0
 8003528:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800352c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800352e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003532:	b25b      	sxtb	r3, r3
 8003534:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003538:	d103      	bne.n	8003542 <xQueueGenericSend+0x18a>
 800353a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800353c:	2200      	movs	r2, #0
 800353e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003542:	f001 fef3 	bl	800532c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003546:	1d3a      	adds	r2, r7, #4
 8003548:	f107 0314 	add.w	r3, r7, #20
 800354c:	4611      	mov	r1, r2
 800354e:	4618      	mov	r0, r3
 8003550:	f001 f806 	bl	8004560 <xTaskCheckForTimeOut>
 8003554:	4603      	mov	r3, r0
 8003556:	2b00      	cmp	r3, #0
 8003558:	d124      	bne.n	80035a4 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800355a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800355c:	f000 faa6 	bl	8003aac <prvIsQueueFull>
 8003560:	4603      	mov	r3, r0
 8003562:	2b00      	cmp	r3, #0
 8003564:	d018      	beq.n	8003598 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003566:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003568:	3310      	adds	r3, #16
 800356a:	687a      	ldr	r2, [r7, #4]
 800356c:	4611      	mov	r1, r2
 800356e:	4618      	mov	r0, r3
 8003570:	f000 ff2a 	bl	80043c8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003574:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003576:	f000 fa31 	bl	80039dc <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800357a:	f000 fd5f 	bl	800403c <xTaskResumeAll>
 800357e:	4603      	mov	r3, r0
 8003580:	2b00      	cmp	r3, #0
 8003582:	f47f af7c 	bne.w	800347e <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8003586:	4b0c      	ldr	r3, [pc, #48]	@ (80035b8 <xQueueGenericSend+0x200>)
 8003588:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800358c:	601a      	str	r2, [r3, #0]
 800358e:	f3bf 8f4f 	dsb	sy
 8003592:	f3bf 8f6f 	isb	sy
 8003596:	e772      	b.n	800347e <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003598:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800359a:	f000 fa1f 	bl	80039dc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800359e:	f000 fd4d 	bl	800403c <xTaskResumeAll>
 80035a2:	e76c      	b.n	800347e <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80035a4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80035a6:	f000 fa19 	bl	80039dc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80035aa:	f000 fd47 	bl	800403c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80035ae:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80035b0:	4618      	mov	r0, r3
 80035b2:	3738      	adds	r7, #56	@ 0x38
 80035b4:	46bd      	mov	sp, r7
 80035b6:	bd80      	pop	{r7, pc}
 80035b8:	e000ed04 	.word	0xe000ed04

080035bc <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80035bc:	b580      	push	{r7, lr}
 80035be:	b090      	sub	sp, #64	@ 0x40
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	60f8      	str	r0, [r7, #12]
 80035c4:	60b9      	str	r1, [r7, #8]
 80035c6:	607a      	str	r2, [r7, #4]
 80035c8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 80035ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d10b      	bne.n	80035ec <xQueueGenericSendFromISR+0x30>
	__asm volatile
 80035d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80035d8:	f383 8811 	msr	BASEPRI, r3
 80035dc:	f3bf 8f6f 	isb	sy
 80035e0:	f3bf 8f4f 	dsb	sy
 80035e4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80035e6:	bf00      	nop
 80035e8:	bf00      	nop
 80035ea:	e7fd      	b.n	80035e8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80035ec:	68bb      	ldr	r3, [r7, #8]
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d103      	bne.n	80035fa <xQueueGenericSendFromISR+0x3e>
 80035f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80035f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d101      	bne.n	80035fe <xQueueGenericSendFromISR+0x42>
 80035fa:	2301      	movs	r3, #1
 80035fc:	e000      	b.n	8003600 <xQueueGenericSendFromISR+0x44>
 80035fe:	2300      	movs	r3, #0
 8003600:	2b00      	cmp	r3, #0
 8003602:	d10b      	bne.n	800361c <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8003604:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003608:	f383 8811 	msr	BASEPRI, r3
 800360c:	f3bf 8f6f 	isb	sy
 8003610:	f3bf 8f4f 	dsb	sy
 8003614:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8003616:	bf00      	nop
 8003618:	bf00      	nop
 800361a:	e7fd      	b.n	8003618 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800361c:	683b      	ldr	r3, [r7, #0]
 800361e:	2b02      	cmp	r3, #2
 8003620:	d103      	bne.n	800362a <xQueueGenericSendFromISR+0x6e>
 8003622:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003624:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003626:	2b01      	cmp	r3, #1
 8003628:	d101      	bne.n	800362e <xQueueGenericSendFromISR+0x72>
 800362a:	2301      	movs	r3, #1
 800362c:	e000      	b.n	8003630 <xQueueGenericSendFromISR+0x74>
 800362e:	2300      	movs	r3, #0
 8003630:	2b00      	cmp	r3, #0
 8003632:	d10b      	bne.n	800364c <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8003634:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003638:	f383 8811 	msr	BASEPRI, r3
 800363c:	f3bf 8f6f 	isb	sy
 8003640:	f3bf 8f4f 	dsb	sy
 8003644:	623b      	str	r3, [r7, #32]
}
 8003646:	bf00      	nop
 8003648:	bf00      	nop
 800364a:	e7fd      	b.n	8003648 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800364c:	f001 ff1c 	bl	8005488 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8003650:	f3ef 8211 	mrs	r2, BASEPRI
 8003654:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003658:	f383 8811 	msr	BASEPRI, r3
 800365c:	f3bf 8f6f 	isb	sy
 8003660:	f3bf 8f4f 	dsb	sy
 8003664:	61fa      	str	r2, [r7, #28]
 8003666:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8003668:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800366a:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800366c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800366e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003670:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003672:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003674:	429a      	cmp	r2, r3
 8003676:	d302      	bcc.n	800367e <xQueueGenericSendFromISR+0xc2>
 8003678:	683b      	ldr	r3, [r7, #0]
 800367a:	2b02      	cmp	r3, #2
 800367c:	d12f      	bne.n	80036de <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800367e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003680:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003684:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003688:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800368a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800368c:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800368e:	683a      	ldr	r2, [r7, #0]
 8003690:	68b9      	ldr	r1, [r7, #8]
 8003692:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8003694:	f000 f912 	bl	80038bc <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8003698:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800369c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036a0:	d112      	bne.n	80036c8 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80036a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80036a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d016      	beq.n	80036d8 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80036aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80036ac:	3324      	adds	r3, #36	@ 0x24
 80036ae:	4618      	mov	r0, r3
 80036b0:	f000 fedc 	bl	800446c <xTaskRemoveFromEventList>
 80036b4:	4603      	mov	r3, r0
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d00e      	beq.n	80036d8 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d00b      	beq.n	80036d8 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	2201      	movs	r2, #1
 80036c4:	601a      	str	r2, [r3, #0]
 80036c6:	e007      	b.n	80036d8 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80036c8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80036cc:	3301      	adds	r3, #1
 80036ce:	b2db      	uxtb	r3, r3
 80036d0:	b25a      	sxtb	r2, r3
 80036d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80036d4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80036d8:	2301      	movs	r3, #1
 80036da:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 80036dc:	e001      	b.n	80036e2 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80036de:	2300      	movs	r3, #0
 80036e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80036e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80036e4:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80036e6:	697b      	ldr	r3, [r7, #20]
 80036e8:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80036ec:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80036ee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 80036f0:	4618      	mov	r0, r3
 80036f2:	3740      	adds	r7, #64	@ 0x40
 80036f4:	46bd      	mov	sp, r7
 80036f6:	bd80      	pop	{r7, pc}

080036f8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80036f8:	b580      	push	{r7, lr}
 80036fa:	b08c      	sub	sp, #48	@ 0x30
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	60f8      	str	r0, [r7, #12]
 8003700:	60b9      	str	r1, [r7, #8]
 8003702:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8003704:	2300      	movs	r3, #0
 8003706:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800370c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800370e:	2b00      	cmp	r3, #0
 8003710:	d10b      	bne.n	800372a <xQueueReceive+0x32>
	__asm volatile
 8003712:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003716:	f383 8811 	msr	BASEPRI, r3
 800371a:	f3bf 8f6f 	isb	sy
 800371e:	f3bf 8f4f 	dsb	sy
 8003722:	623b      	str	r3, [r7, #32]
}
 8003724:	bf00      	nop
 8003726:	bf00      	nop
 8003728:	e7fd      	b.n	8003726 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800372a:	68bb      	ldr	r3, [r7, #8]
 800372c:	2b00      	cmp	r3, #0
 800372e:	d103      	bne.n	8003738 <xQueueReceive+0x40>
 8003730:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003732:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003734:	2b00      	cmp	r3, #0
 8003736:	d101      	bne.n	800373c <xQueueReceive+0x44>
 8003738:	2301      	movs	r3, #1
 800373a:	e000      	b.n	800373e <xQueueReceive+0x46>
 800373c:	2300      	movs	r3, #0
 800373e:	2b00      	cmp	r3, #0
 8003740:	d10b      	bne.n	800375a <xQueueReceive+0x62>
	__asm volatile
 8003742:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003746:	f383 8811 	msr	BASEPRI, r3
 800374a:	f3bf 8f6f 	isb	sy
 800374e:	f3bf 8f4f 	dsb	sy
 8003752:	61fb      	str	r3, [r7, #28]
}
 8003754:	bf00      	nop
 8003756:	bf00      	nop
 8003758:	e7fd      	b.n	8003756 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800375a:	f001 f847 	bl	80047ec <xTaskGetSchedulerState>
 800375e:	4603      	mov	r3, r0
 8003760:	2b00      	cmp	r3, #0
 8003762:	d102      	bne.n	800376a <xQueueReceive+0x72>
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	2b00      	cmp	r3, #0
 8003768:	d101      	bne.n	800376e <xQueueReceive+0x76>
 800376a:	2301      	movs	r3, #1
 800376c:	e000      	b.n	8003770 <xQueueReceive+0x78>
 800376e:	2300      	movs	r3, #0
 8003770:	2b00      	cmp	r3, #0
 8003772:	d10b      	bne.n	800378c <xQueueReceive+0x94>
	__asm volatile
 8003774:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003778:	f383 8811 	msr	BASEPRI, r3
 800377c:	f3bf 8f6f 	isb	sy
 8003780:	f3bf 8f4f 	dsb	sy
 8003784:	61bb      	str	r3, [r7, #24]
}
 8003786:	bf00      	nop
 8003788:	bf00      	nop
 800378a:	e7fd      	b.n	8003788 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800378c:	f001 fd9c 	bl	80052c8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003790:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003792:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003794:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003796:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003798:	2b00      	cmp	r3, #0
 800379a:	d01f      	beq.n	80037dc <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800379c:	68b9      	ldr	r1, [r7, #8]
 800379e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80037a0:	f000 f8f6 	bl	8003990 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80037a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037a6:	1e5a      	subs	r2, r3, #1
 80037a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80037aa:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80037ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80037ae:	691b      	ldr	r3, [r3, #16]
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d00f      	beq.n	80037d4 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80037b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80037b6:	3310      	adds	r3, #16
 80037b8:	4618      	mov	r0, r3
 80037ba:	f000 fe57 	bl	800446c <xTaskRemoveFromEventList>
 80037be:	4603      	mov	r3, r0
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d007      	beq.n	80037d4 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80037c4:	4b3c      	ldr	r3, [pc, #240]	@ (80038b8 <xQueueReceive+0x1c0>)
 80037c6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80037ca:	601a      	str	r2, [r3, #0]
 80037cc:	f3bf 8f4f 	dsb	sy
 80037d0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80037d4:	f001 fdaa 	bl	800532c <vPortExitCritical>
				return pdPASS;
 80037d8:	2301      	movs	r3, #1
 80037da:	e069      	b.n	80038b0 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d103      	bne.n	80037ea <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80037e2:	f001 fda3 	bl	800532c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80037e6:	2300      	movs	r3, #0
 80037e8:	e062      	b.n	80038b0 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80037ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d106      	bne.n	80037fe <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80037f0:	f107 0310 	add.w	r3, r7, #16
 80037f4:	4618      	mov	r0, r3
 80037f6:	f000 fe9d 	bl	8004534 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80037fa:	2301      	movs	r3, #1
 80037fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80037fe:	f001 fd95 	bl	800532c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003802:	f000 fc0d 	bl	8004020 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003806:	f001 fd5f 	bl	80052c8 <vPortEnterCritical>
 800380a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800380c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003810:	b25b      	sxtb	r3, r3
 8003812:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003816:	d103      	bne.n	8003820 <xQueueReceive+0x128>
 8003818:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800381a:	2200      	movs	r2, #0
 800381c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003820:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003822:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003826:	b25b      	sxtb	r3, r3
 8003828:	f1b3 3fff 	cmp.w	r3, #4294967295
 800382c:	d103      	bne.n	8003836 <xQueueReceive+0x13e>
 800382e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003830:	2200      	movs	r2, #0
 8003832:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003836:	f001 fd79 	bl	800532c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800383a:	1d3a      	adds	r2, r7, #4
 800383c:	f107 0310 	add.w	r3, r7, #16
 8003840:	4611      	mov	r1, r2
 8003842:	4618      	mov	r0, r3
 8003844:	f000 fe8c 	bl	8004560 <xTaskCheckForTimeOut>
 8003848:	4603      	mov	r3, r0
 800384a:	2b00      	cmp	r3, #0
 800384c:	d123      	bne.n	8003896 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800384e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003850:	f000 f916 	bl	8003a80 <prvIsQueueEmpty>
 8003854:	4603      	mov	r3, r0
 8003856:	2b00      	cmp	r3, #0
 8003858:	d017      	beq.n	800388a <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800385a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800385c:	3324      	adds	r3, #36	@ 0x24
 800385e:	687a      	ldr	r2, [r7, #4]
 8003860:	4611      	mov	r1, r2
 8003862:	4618      	mov	r0, r3
 8003864:	f000 fdb0 	bl	80043c8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003868:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800386a:	f000 f8b7 	bl	80039dc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800386e:	f000 fbe5 	bl	800403c <xTaskResumeAll>
 8003872:	4603      	mov	r3, r0
 8003874:	2b00      	cmp	r3, #0
 8003876:	d189      	bne.n	800378c <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8003878:	4b0f      	ldr	r3, [pc, #60]	@ (80038b8 <xQueueReceive+0x1c0>)
 800387a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800387e:	601a      	str	r2, [r3, #0]
 8003880:	f3bf 8f4f 	dsb	sy
 8003884:	f3bf 8f6f 	isb	sy
 8003888:	e780      	b.n	800378c <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800388a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800388c:	f000 f8a6 	bl	80039dc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003890:	f000 fbd4 	bl	800403c <xTaskResumeAll>
 8003894:	e77a      	b.n	800378c <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8003896:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003898:	f000 f8a0 	bl	80039dc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800389c:	f000 fbce 	bl	800403c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80038a0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80038a2:	f000 f8ed 	bl	8003a80 <prvIsQueueEmpty>
 80038a6:	4603      	mov	r3, r0
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	f43f af6f 	beq.w	800378c <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80038ae:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80038b0:	4618      	mov	r0, r3
 80038b2:	3730      	adds	r7, #48	@ 0x30
 80038b4:	46bd      	mov	sp, r7
 80038b6:	bd80      	pop	{r7, pc}
 80038b8:	e000ed04 	.word	0xe000ed04

080038bc <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80038bc:	b580      	push	{r7, lr}
 80038be:	b086      	sub	sp, #24
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	60f8      	str	r0, [r7, #12]
 80038c4:	60b9      	str	r1, [r7, #8]
 80038c6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80038c8:	2300      	movs	r3, #0
 80038ca:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80038d0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d10d      	bne.n	80038f6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d14d      	bne.n	800397e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	689b      	ldr	r3, [r3, #8]
 80038e6:	4618      	mov	r0, r3
 80038e8:	f000 ff9e 	bl	8004828 <xTaskPriorityDisinherit>
 80038ec:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	2200      	movs	r2, #0
 80038f2:	609a      	str	r2, [r3, #8]
 80038f4:	e043      	b.n	800397e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d119      	bne.n	8003930 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	6858      	ldr	r0, [r3, #4]
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003904:	461a      	mov	r2, r3
 8003906:	68b9      	ldr	r1, [r7, #8]
 8003908:	f002 f81a 	bl	8005940 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	685a      	ldr	r2, [r3, #4]
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003914:	441a      	add	r2, r3
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	685a      	ldr	r2, [r3, #4]
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	689b      	ldr	r3, [r3, #8]
 8003922:	429a      	cmp	r2, r3
 8003924:	d32b      	bcc.n	800397e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	681a      	ldr	r2, [r3, #0]
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	605a      	str	r2, [r3, #4]
 800392e:	e026      	b.n	800397e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	68d8      	ldr	r0, [r3, #12]
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003938:	461a      	mov	r2, r3
 800393a:	68b9      	ldr	r1, [r7, #8]
 800393c:	f002 f800 	bl	8005940 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	68da      	ldr	r2, [r3, #12]
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003948:	425b      	negs	r3, r3
 800394a:	441a      	add	r2, r3
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	68da      	ldr	r2, [r3, #12]
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	429a      	cmp	r2, r3
 800395a:	d207      	bcs.n	800396c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	689a      	ldr	r2, [r3, #8]
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003964:	425b      	negs	r3, r3
 8003966:	441a      	add	r2, r3
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	2b02      	cmp	r3, #2
 8003970:	d105      	bne.n	800397e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003972:	693b      	ldr	r3, [r7, #16]
 8003974:	2b00      	cmp	r3, #0
 8003976:	d002      	beq.n	800397e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003978:	693b      	ldr	r3, [r7, #16]
 800397a:	3b01      	subs	r3, #1
 800397c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800397e:	693b      	ldr	r3, [r7, #16]
 8003980:	1c5a      	adds	r2, r3, #1
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8003986:	697b      	ldr	r3, [r7, #20]
}
 8003988:	4618      	mov	r0, r3
 800398a:	3718      	adds	r7, #24
 800398c:	46bd      	mov	sp, r7
 800398e:	bd80      	pop	{r7, pc}

08003990 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8003990:	b580      	push	{r7, lr}
 8003992:	b082      	sub	sp, #8
 8003994:	af00      	add	r7, sp, #0
 8003996:	6078      	str	r0, [r7, #4]
 8003998:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d018      	beq.n	80039d4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	68da      	ldr	r2, [r3, #12]
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039aa:	441a      	add	r2, r3
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	68da      	ldr	r2, [r3, #12]
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	689b      	ldr	r3, [r3, #8]
 80039b8:	429a      	cmp	r2, r3
 80039ba:	d303      	bcc.n	80039c4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681a      	ldr	r2, [r3, #0]
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	68d9      	ldr	r1, [r3, #12]
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039cc:	461a      	mov	r2, r3
 80039ce:	6838      	ldr	r0, [r7, #0]
 80039d0:	f001 ffb6 	bl	8005940 <memcpy>
	}
}
 80039d4:	bf00      	nop
 80039d6:	3708      	adds	r7, #8
 80039d8:	46bd      	mov	sp, r7
 80039da:	bd80      	pop	{r7, pc}

080039dc <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80039dc:	b580      	push	{r7, lr}
 80039de:	b084      	sub	sp, #16
 80039e0:	af00      	add	r7, sp, #0
 80039e2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80039e4:	f001 fc70 	bl	80052c8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80039ee:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80039f0:	e011      	b.n	8003a16 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d012      	beq.n	8003a20 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	3324      	adds	r3, #36	@ 0x24
 80039fe:	4618      	mov	r0, r3
 8003a00:	f000 fd34 	bl	800446c <xTaskRemoveFromEventList>
 8003a04:	4603      	mov	r3, r0
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d001      	beq.n	8003a0e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8003a0a:	f000 fe0d 	bl	8004628 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8003a0e:	7bfb      	ldrb	r3, [r7, #15]
 8003a10:	3b01      	subs	r3, #1
 8003a12:	b2db      	uxtb	r3, r3
 8003a14:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003a16:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	dce9      	bgt.n	80039f2 <prvUnlockQueue+0x16>
 8003a1e:	e000      	b.n	8003a22 <prvUnlockQueue+0x46>
					break;
 8003a20:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	22ff      	movs	r2, #255	@ 0xff
 8003a26:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8003a2a:	f001 fc7f 	bl	800532c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8003a2e:	f001 fc4b 	bl	80052c8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003a38:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003a3a:	e011      	b.n	8003a60 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	691b      	ldr	r3, [r3, #16]
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d012      	beq.n	8003a6a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	3310      	adds	r3, #16
 8003a48:	4618      	mov	r0, r3
 8003a4a:	f000 fd0f 	bl	800446c <xTaskRemoveFromEventList>
 8003a4e:	4603      	mov	r3, r0
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d001      	beq.n	8003a58 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8003a54:	f000 fde8 	bl	8004628 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8003a58:	7bbb      	ldrb	r3, [r7, #14]
 8003a5a:	3b01      	subs	r3, #1
 8003a5c:	b2db      	uxtb	r3, r3
 8003a5e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003a60:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	dce9      	bgt.n	8003a3c <prvUnlockQueue+0x60>
 8003a68:	e000      	b.n	8003a6c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8003a6a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	22ff      	movs	r2, #255	@ 0xff
 8003a70:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8003a74:	f001 fc5a 	bl	800532c <vPortExitCritical>
}
 8003a78:	bf00      	nop
 8003a7a:	3710      	adds	r7, #16
 8003a7c:	46bd      	mov	sp, r7
 8003a7e:	bd80      	pop	{r7, pc}

08003a80 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8003a80:	b580      	push	{r7, lr}
 8003a82:	b084      	sub	sp, #16
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003a88:	f001 fc1e 	bl	80052c8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d102      	bne.n	8003a9a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003a94:	2301      	movs	r3, #1
 8003a96:	60fb      	str	r3, [r7, #12]
 8003a98:	e001      	b.n	8003a9e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8003a9a:	2300      	movs	r3, #0
 8003a9c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003a9e:	f001 fc45 	bl	800532c <vPortExitCritical>

	return xReturn;
 8003aa2:	68fb      	ldr	r3, [r7, #12]
}
 8003aa4:	4618      	mov	r0, r3
 8003aa6:	3710      	adds	r7, #16
 8003aa8:	46bd      	mov	sp, r7
 8003aaa:	bd80      	pop	{r7, pc}

08003aac <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003aac:	b580      	push	{r7, lr}
 8003aae:	b084      	sub	sp, #16
 8003ab0:	af00      	add	r7, sp, #0
 8003ab2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003ab4:	f001 fc08 	bl	80052c8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ac0:	429a      	cmp	r2, r3
 8003ac2:	d102      	bne.n	8003aca <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003ac4:	2301      	movs	r3, #1
 8003ac6:	60fb      	str	r3, [r7, #12]
 8003ac8:	e001      	b.n	8003ace <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8003aca:	2300      	movs	r3, #0
 8003acc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003ace:	f001 fc2d 	bl	800532c <vPortExitCritical>

	return xReturn;
 8003ad2:	68fb      	ldr	r3, [r7, #12]
}
 8003ad4:	4618      	mov	r0, r3
 8003ad6:	3710      	adds	r7, #16
 8003ad8:	46bd      	mov	sp, r7
 8003ada:	bd80      	pop	{r7, pc}

08003adc <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8003adc:	b480      	push	{r7}
 8003ade:	b085      	sub	sp, #20
 8003ae0:	af00      	add	r7, sp, #0
 8003ae2:	6078      	str	r0, [r7, #4]
 8003ae4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003ae6:	2300      	movs	r3, #0
 8003ae8:	60fb      	str	r3, [r7, #12]
 8003aea:	e014      	b.n	8003b16 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8003aec:	4a0f      	ldr	r2, [pc, #60]	@ (8003b2c <vQueueAddToRegistry+0x50>)
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d10b      	bne.n	8003b10 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8003af8:	490c      	ldr	r1, [pc, #48]	@ (8003b2c <vQueueAddToRegistry+0x50>)
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	683a      	ldr	r2, [r7, #0]
 8003afe:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8003b02:	4a0a      	ldr	r2, [pc, #40]	@ (8003b2c <vQueueAddToRegistry+0x50>)
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	00db      	lsls	r3, r3, #3
 8003b08:	4413      	add	r3, r2
 8003b0a:	687a      	ldr	r2, [r7, #4]
 8003b0c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8003b0e:	e006      	b.n	8003b1e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	3301      	adds	r3, #1
 8003b14:	60fb      	str	r3, [r7, #12]
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	2b07      	cmp	r3, #7
 8003b1a:	d9e7      	bls.n	8003aec <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8003b1c:	bf00      	nop
 8003b1e:	bf00      	nop
 8003b20:	3714      	adds	r7, #20
 8003b22:	46bd      	mov	sp, r7
 8003b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b28:	4770      	bx	lr
 8003b2a:	bf00      	nop
 8003b2c:	20000784 	.word	0x20000784

08003b30 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003b30:	b580      	push	{r7, lr}
 8003b32:	b086      	sub	sp, #24
 8003b34:	af00      	add	r7, sp, #0
 8003b36:	60f8      	str	r0, [r7, #12]
 8003b38:	60b9      	str	r1, [r7, #8]
 8003b3a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8003b40:	f001 fbc2 	bl	80052c8 <vPortEnterCritical>
 8003b44:	697b      	ldr	r3, [r7, #20]
 8003b46:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003b4a:	b25b      	sxtb	r3, r3
 8003b4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b50:	d103      	bne.n	8003b5a <vQueueWaitForMessageRestricted+0x2a>
 8003b52:	697b      	ldr	r3, [r7, #20]
 8003b54:	2200      	movs	r2, #0
 8003b56:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003b5a:	697b      	ldr	r3, [r7, #20]
 8003b5c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003b60:	b25b      	sxtb	r3, r3
 8003b62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b66:	d103      	bne.n	8003b70 <vQueueWaitForMessageRestricted+0x40>
 8003b68:	697b      	ldr	r3, [r7, #20]
 8003b6a:	2200      	movs	r2, #0
 8003b6c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003b70:	f001 fbdc 	bl	800532c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8003b74:	697b      	ldr	r3, [r7, #20]
 8003b76:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d106      	bne.n	8003b8a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8003b7c:	697b      	ldr	r3, [r7, #20]
 8003b7e:	3324      	adds	r3, #36	@ 0x24
 8003b80:	687a      	ldr	r2, [r7, #4]
 8003b82:	68b9      	ldr	r1, [r7, #8]
 8003b84:	4618      	mov	r0, r3
 8003b86:	f000 fc45 	bl	8004414 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8003b8a:	6978      	ldr	r0, [r7, #20]
 8003b8c:	f7ff ff26 	bl	80039dc <prvUnlockQueue>
	}
 8003b90:	bf00      	nop
 8003b92:	3718      	adds	r7, #24
 8003b94:	46bd      	mov	sp, r7
 8003b96:	bd80      	pop	{r7, pc}

08003b98 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003b98:	b580      	push	{r7, lr}
 8003b9a:	b08e      	sub	sp, #56	@ 0x38
 8003b9c:	af04      	add	r7, sp, #16
 8003b9e:	60f8      	str	r0, [r7, #12]
 8003ba0:	60b9      	str	r1, [r7, #8]
 8003ba2:	607a      	str	r2, [r7, #4]
 8003ba4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003ba6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d10b      	bne.n	8003bc4 <xTaskCreateStatic+0x2c>
	__asm volatile
 8003bac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003bb0:	f383 8811 	msr	BASEPRI, r3
 8003bb4:	f3bf 8f6f 	isb	sy
 8003bb8:	f3bf 8f4f 	dsb	sy
 8003bbc:	623b      	str	r3, [r7, #32]
}
 8003bbe:	bf00      	nop
 8003bc0:	bf00      	nop
 8003bc2:	e7fd      	b.n	8003bc0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8003bc4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d10b      	bne.n	8003be2 <xTaskCreateStatic+0x4a>
	__asm volatile
 8003bca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003bce:	f383 8811 	msr	BASEPRI, r3
 8003bd2:	f3bf 8f6f 	isb	sy
 8003bd6:	f3bf 8f4f 	dsb	sy
 8003bda:	61fb      	str	r3, [r7, #28]
}
 8003bdc:	bf00      	nop
 8003bde:	bf00      	nop
 8003be0:	e7fd      	b.n	8003bde <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003be2:	235c      	movs	r3, #92	@ 0x5c
 8003be4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003be6:	693b      	ldr	r3, [r7, #16]
 8003be8:	2b5c      	cmp	r3, #92	@ 0x5c
 8003bea:	d00b      	beq.n	8003c04 <xTaskCreateStatic+0x6c>
	__asm volatile
 8003bec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003bf0:	f383 8811 	msr	BASEPRI, r3
 8003bf4:	f3bf 8f6f 	isb	sy
 8003bf8:	f3bf 8f4f 	dsb	sy
 8003bfc:	61bb      	str	r3, [r7, #24]
}
 8003bfe:	bf00      	nop
 8003c00:	bf00      	nop
 8003c02:	e7fd      	b.n	8003c00 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8003c04:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003c06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d01e      	beq.n	8003c4a <xTaskCreateStatic+0xb2>
 8003c0c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d01b      	beq.n	8003c4a <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003c12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c14:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003c16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c18:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003c1a:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003c1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c1e:	2202      	movs	r2, #2
 8003c20:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003c24:	2300      	movs	r3, #0
 8003c26:	9303      	str	r3, [sp, #12]
 8003c28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c2a:	9302      	str	r3, [sp, #8]
 8003c2c:	f107 0314 	add.w	r3, r7, #20
 8003c30:	9301      	str	r3, [sp, #4]
 8003c32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c34:	9300      	str	r3, [sp, #0]
 8003c36:	683b      	ldr	r3, [r7, #0]
 8003c38:	687a      	ldr	r2, [r7, #4]
 8003c3a:	68b9      	ldr	r1, [r7, #8]
 8003c3c:	68f8      	ldr	r0, [r7, #12]
 8003c3e:	f000 f850 	bl	8003ce2 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003c42:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8003c44:	f000 f8de 	bl	8003e04 <prvAddNewTaskToReadyList>
 8003c48:	e001      	b.n	8003c4e <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8003c4a:	2300      	movs	r3, #0
 8003c4c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003c4e:	697b      	ldr	r3, [r7, #20]
	}
 8003c50:	4618      	mov	r0, r3
 8003c52:	3728      	adds	r7, #40	@ 0x28
 8003c54:	46bd      	mov	sp, r7
 8003c56:	bd80      	pop	{r7, pc}

08003c58 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003c58:	b580      	push	{r7, lr}
 8003c5a:	b08c      	sub	sp, #48	@ 0x30
 8003c5c:	af04      	add	r7, sp, #16
 8003c5e:	60f8      	str	r0, [r7, #12]
 8003c60:	60b9      	str	r1, [r7, #8]
 8003c62:	603b      	str	r3, [r7, #0]
 8003c64:	4613      	mov	r3, r2
 8003c66:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003c68:	88fb      	ldrh	r3, [r7, #6]
 8003c6a:	009b      	lsls	r3, r3, #2
 8003c6c:	4618      	mov	r0, r3
 8003c6e:	f001 fc4d 	bl	800550c <pvPortMalloc>
 8003c72:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003c74:	697b      	ldr	r3, [r7, #20]
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d00e      	beq.n	8003c98 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003c7a:	205c      	movs	r0, #92	@ 0x5c
 8003c7c:	f001 fc46 	bl	800550c <pvPortMalloc>
 8003c80:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003c82:	69fb      	ldr	r3, [r7, #28]
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d003      	beq.n	8003c90 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003c88:	69fb      	ldr	r3, [r7, #28]
 8003c8a:	697a      	ldr	r2, [r7, #20]
 8003c8c:	631a      	str	r2, [r3, #48]	@ 0x30
 8003c8e:	e005      	b.n	8003c9c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003c90:	6978      	ldr	r0, [r7, #20]
 8003c92:	f001 fd09 	bl	80056a8 <vPortFree>
 8003c96:	e001      	b.n	8003c9c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003c98:	2300      	movs	r3, #0
 8003c9a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003c9c:	69fb      	ldr	r3, [r7, #28]
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d017      	beq.n	8003cd2 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003ca2:	69fb      	ldr	r3, [r7, #28]
 8003ca4:	2200      	movs	r2, #0
 8003ca6:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003caa:	88fa      	ldrh	r2, [r7, #6]
 8003cac:	2300      	movs	r3, #0
 8003cae:	9303      	str	r3, [sp, #12]
 8003cb0:	69fb      	ldr	r3, [r7, #28]
 8003cb2:	9302      	str	r3, [sp, #8]
 8003cb4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003cb6:	9301      	str	r3, [sp, #4]
 8003cb8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003cba:	9300      	str	r3, [sp, #0]
 8003cbc:	683b      	ldr	r3, [r7, #0]
 8003cbe:	68b9      	ldr	r1, [r7, #8]
 8003cc0:	68f8      	ldr	r0, [r7, #12]
 8003cc2:	f000 f80e 	bl	8003ce2 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003cc6:	69f8      	ldr	r0, [r7, #28]
 8003cc8:	f000 f89c 	bl	8003e04 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003ccc:	2301      	movs	r3, #1
 8003cce:	61bb      	str	r3, [r7, #24]
 8003cd0:	e002      	b.n	8003cd8 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003cd2:	f04f 33ff 	mov.w	r3, #4294967295
 8003cd6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003cd8:	69bb      	ldr	r3, [r7, #24]
	}
 8003cda:	4618      	mov	r0, r3
 8003cdc:	3720      	adds	r7, #32
 8003cde:	46bd      	mov	sp, r7
 8003ce0:	bd80      	pop	{r7, pc}

08003ce2 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003ce2:	b580      	push	{r7, lr}
 8003ce4:	b088      	sub	sp, #32
 8003ce6:	af00      	add	r7, sp, #0
 8003ce8:	60f8      	str	r0, [r7, #12]
 8003cea:	60b9      	str	r1, [r7, #8]
 8003cec:	607a      	str	r2, [r7, #4]
 8003cee:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8003cf0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003cf2:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	009b      	lsls	r3, r3, #2
 8003cf8:	461a      	mov	r2, r3
 8003cfa:	21a5      	movs	r1, #165	@ 0xa5
 8003cfc:	f001 fdf4 	bl	80058e8 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003d00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d02:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003d0a:	3b01      	subs	r3, #1
 8003d0c:	009b      	lsls	r3, r3, #2
 8003d0e:	4413      	add	r3, r2
 8003d10:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003d12:	69bb      	ldr	r3, [r7, #24]
 8003d14:	f023 0307 	bic.w	r3, r3, #7
 8003d18:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003d1a:	69bb      	ldr	r3, [r7, #24]
 8003d1c:	f003 0307 	and.w	r3, r3, #7
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d00b      	beq.n	8003d3c <prvInitialiseNewTask+0x5a>
	__asm volatile
 8003d24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d28:	f383 8811 	msr	BASEPRI, r3
 8003d2c:	f3bf 8f6f 	isb	sy
 8003d30:	f3bf 8f4f 	dsb	sy
 8003d34:	617b      	str	r3, [r7, #20]
}
 8003d36:	bf00      	nop
 8003d38:	bf00      	nop
 8003d3a:	e7fd      	b.n	8003d38 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8003d3c:	68bb      	ldr	r3, [r7, #8]
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d01f      	beq.n	8003d82 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003d42:	2300      	movs	r3, #0
 8003d44:	61fb      	str	r3, [r7, #28]
 8003d46:	e012      	b.n	8003d6e <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003d48:	68ba      	ldr	r2, [r7, #8]
 8003d4a:	69fb      	ldr	r3, [r7, #28]
 8003d4c:	4413      	add	r3, r2
 8003d4e:	7819      	ldrb	r1, [r3, #0]
 8003d50:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003d52:	69fb      	ldr	r3, [r7, #28]
 8003d54:	4413      	add	r3, r2
 8003d56:	3334      	adds	r3, #52	@ 0x34
 8003d58:	460a      	mov	r2, r1
 8003d5a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8003d5c:	68ba      	ldr	r2, [r7, #8]
 8003d5e:	69fb      	ldr	r3, [r7, #28]
 8003d60:	4413      	add	r3, r2
 8003d62:	781b      	ldrb	r3, [r3, #0]
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d006      	beq.n	8003d76 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003d68:	69fb      	ldr	r3, [r7, #28]
 8003d6a:	3301      	adds	r3, #1
 8003d6c:	61fb      	str	r3, [r7, #28]
 8003d6e:	69fb      	ldr	r3, [r7, #28]
 8003d70:	2b0f      	cmp	r3, #15
 8003d72:	d9e9      	bls.n	8003d48 <prvInitialiseNewTask+0x66>
 8003d74:	e000      	b.n	8003d78 <prvInitialiseNewTask+0x96>
			{
				break;
 8003d76:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003d78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d7a:	2200      	movs	r2, #0
 8003d7c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003d80:	e003      	b.n	8003d8a <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003d82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d84:	2200      	movs	r2, #0
 8003d86:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003d8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d8c:	2b37      	cmp	r3, #55	@ 0x37
 8003d8e:	d901      	bls.n	8003d94 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003d90:	2337      	movs	r3, #55	@ 0x37
 8003d92:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003d94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d96:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003d98:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003d9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d9c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003d9e:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8003da0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003da2:	2200      	movs	r2, #0
 8003da4:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003da6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003da8:	3304      	adds	r3, #4
 8003daa:	4618      	mov	r0, r3
 8003dac:	f7ff f966 	bl	800307c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003db0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003db2:	3318      	adds	r3, #24
 8003db4:	4618      	mov	r0, r3
 8003db6:	f7ff f961 	bl	800307c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003dba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003dbc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003dbe:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003dc0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003dc2:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8003dc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003dc8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003dca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003dcc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003dce:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003dd0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003dd2:	2200      	movs	r2, #0
 8003dd4:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003dd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003dd8:	2200      	movs	r2, #0
 8003dda:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003dde:	683a      	ldr	r2, [r7, #0]
 8003de0:	68f9      	ldr	r1, [r7, #12]
 8003de2:	69b8      	ldr	r0, [r7, #24]
 8003de4:	f001 f93e 	bl	8005064 <pxPortInitialiseStack>
 8003de8:	4602      	mov	r2, r0
 8003dea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003dec:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8003dee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d002      	beq.n	8003dfa <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003df4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003df6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003df8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003dfa:	bf00      	nop
 8003dfc:	3720      	adds	r7, #32
 8003dfe:	46bd      	mov	sp, r7
 8003e00:	bd80      	pop	{r7, pc}
	...

08003e04 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003e04:	b580      	push	{r7, lr}
 8003e06:	b082      	sub	sp, #8
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003e0c:	f001 fa5c 	bl	80052c8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003e10:	4b2d      	ldr	r3, [pc, #180]	@ (8003ec8 <prvAddNewTaskToReadyList+0xc4>)
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	3301      	adds	r3, #1
 8003e16:	4a2c      	ldr	r2, [pc, #176]	@ (8003ec8 <prvAddNewTaskToReadyList+0xc4>)
 8003e18:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003e1a:	4b2c      	ldr	r3, [pc, #176]	@ (8003ecc <prvAddNewTaskToReadyList+0xc8>)
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d109      	bne.n	8003e36 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003e22:	4a2a      	ldr	r2, [pc, #168]	@ (8003ecc <prvAddNewTaskToReadyList+0xc8>)
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003e28:	4b27      	ldr	r3, [pc, #156]	@ (8003ec8 <prvAddNewTaskToReadyList+0xc4>)
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	2b01      	cmp	r3, #1
 8003e2e:	d110      	bne.n	8003e52 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003e30:	f000 fc1e 	bl	8004670 <prvInitialiseTaskLists>
 8003e34:	e00d      	b.n	8003e52 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003e36:	4b26      	ldr	r3, [pc, #152]	@ (8003ed0 <prvAddNewTaskToReadyList+0xcc>)
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d109      	bne.n	8003e52 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003e3e:	4b23      	ldr	r3, [pc, #140]	@ (8003ecc <prvAddNewTaskToReadyList+0xc8>)
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e48:	429a      	cmp	r2, r3
 8003e4a:	d802      	bhi.n	8003e52 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003e4c:	4a1f      	ldr	r2, [pc, #124]	@ (8003ecc <prvAddNewTaskToReadyList+0xc8>)
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003e52:	4b20      	ldr	r3, [pc, #128]	@ (8003ed4 <prvAddNewTaskToReadyList+0xd0>)
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	3301      	adds	r3, #1
 8003e58:	4a1e      	ldr	r2, [pc, #120]	@ (8003ed4 <prvAddNewTaskToReadyList+0xd0>)
 8003e5a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8003e5c:	4b1d      	ldr	r3, [pc, #116]	@ (8003ed4 <prvAddNewTaskToReadyList+0xd0>)
 8003e5e:	681a      	ldr	r2, [r3, #0]
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003e68:	4b1b      	ldr	r3, [pc, #108]	@ (8003ed8 <prvAddNewTaskToReadyList+0xd4>)
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	429a      	cmp	r2, r3
 8003e6e:	d903      	bls.n	8003e78 <prvAddNewTaskToReadyList+0x74>
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e74:	4a18      	ldr	r2, [pc, #96]	@ (8003ed8 <prvAddNewTaskToReadyList+0xd4>)
 8003e76:	6013      	str	r3, [r2, #0]
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003e7c:	4613      	mov	r3, r2
 8003e7e:	009b      	lsls	r3, r3, #2
 8003e80:	4413      	add	r3, r2
 8003e82:	009b      	lsls	r3, r3, #2
 8003e84:	4a15      	ldr	r2, [pc, #84]	@ (8003edc <prvAddNewTaskToReadyList+0xd8>)
 8003e86:	441a      	add	r2, r3
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	3304      	adds	r3, #4
 8003e8c:	4619      	mov	r1, r3
 8003e8e:	4610      	mov	r0, r2
 8003e90:	f7ff f901 	bl	8003096 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003e94:	f001 fa4a 	bl	800532c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003e98:	4b0d      	ldr	r3, [pc, #52]	@ (8003ed0 <prvAddNewTaskToReadyList+0xcc>)
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d00e      	beq.n	8003ebe <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003ea0:	4b0a      	ldr	r3, [pc, #40]	@ (8003ecc <prvAddNewTaskToReadyList+0xc8>)
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003eaa:	429a      	cmp	r2, r3
 8003eac:	d207      	bcs.n	8003ebe <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003eae:	4b0c      	ldr	r3, [pc, #48]	@ (8003ee0 <prvAddNewTaskToReadyList+0xdc>)
 8003eb0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003eb4:	601a      	str	r2, [r3, #0]
 8003eb6:	f3bf 8f4f 	dsb	sy
 8003eba:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003ebe:	bf00      	nop
 8003ec0:	3708      	adds	r7, #8
 8003ec2:	46bd      	mov	sp, r7
 8003ec4:	bd80      	pop	{r7, pc}
 8003ec6:	bf00      	nop
 8003ec8:	20000c98 	.word	0x20000c98
 8003ecc:	200007c4 	.word	0x200007c4
 8003ed0:	20000ca4 	.word	0x20000ca4
 8003ed4:	20000cb4 	.word	0x20000cb4
 8003ed8:	20000ca0 	.word	0x20000ca0
 8003edc:	200007c8 	.word	0x200007c8
 8003ee0:	e000ed04 	.word	0xe000ed04

08003ee4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003ee4:	b580      	push	{r7, lr}
 8003ee6:	b084      	sub	sp, #16
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003eec:	2300      	movs	r3, #0
 8003eee:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d018      	beq.n	8003f28 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003ef6:	4b14      	ldr	r3, [pc, #80]	@ (8003f48 <vTaskDelay+0x64>)
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d00b      	beq.n	8003f16 <vTaskDelay+0x32>
	__asm volatile
 8003efe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f02:	f383 8811 	msr	BASEPRI, r3
 8003f06:	f3bf 8f6f 	isb	sy
 8003f0a:	f3bf 8f4f 	dsb	sy
 8003f0e:	60bb      	str	r3, [r7, #8]
}
 8003f10:	bf00      	nop
 8003f12:	bf00      	nop
 8003f14:	e7fd      	b.n	8003f12 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8003f16:	f000 f883 	bl	8004020 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003f1a:	2100      	movs	r1, #0
 8003f1c:	6878      	ldr	r0, [r7, #4]
 8003f1e:	f000 fcf3 	bl	8004908 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003f22:	f000 f88b 	bl	800403c <xTaskResumeAll>
 8003f26:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d107      	bne.n	8003f3e <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8003f2e:	4b07      	ldr	r3, [pc, #28]	@ (8003f4c <vTaskDelay+0x68>)
 8003f30:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003f34:	601a      	str	r2, [r3, #0]
 8003f36:	f3bf 8f4f 	dsb	sy
 8003f3a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003f3e:	bf00      	nop
 8003f40:	3710      	adds	r7, #16
 8003f42:	46bd      	mov	sp, r7
 8003f44:	bd80      	pop	{r7, pc}
 8003f46:	bf00      	nop
 8003f48:	20000cc0 	.word	0x20000cc0
 8003f4c:	e000ed04 	.word	0xe000ed04

08003f50 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003f50:	b580      	push	{r7, lr}
 8003f52:	b08a      	sub	sp, #40	@ 0x28
 8003f54:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003f56:	2300      	movs	r3, #0
 8003f58:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003f5a:	2300      	movs	r3, #0
 8003f5c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003f5e:	463a      	mov	r2, r7
 8003f60:	1d39      	adds	r1, r7, #4
 8003f62:	f107 0308 	add.w	r3, r7, #8
 8003f66:	4618      	mov	r0, r3
 8003f68:	f7ff f834 	bl	8002fd4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003f6c:	6839      	ldr	r1, [r7, #0]
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	68ba      	ldr	r2, [r7, #8]
 8003f72:	9202      	str	r2, [sp, #8]
 8003f74:	9301      	str	r3, [sp, #4]
 8003f76:	2300      	movs	r3, #0
 8003f78:	9300      	str	r3, [sp, #0]
 8003f7a:	2300      	movs	r3, #0
 8003f7c:	460a      	mov	r2, r1
 8003f7e:	4922      	ldr	r1, [pc, #136]	@ (8004008 <vTaskStartScheduler+0xb8>)
 8003f80:	4822      	ldr	r0, [pc, #136]	@ (800400c <vTaskStartScheduler+0xbc>)
 8003f82:	f7ff fe09 	bl	8003b98 <xTaskCreateStatic>
 8003f86:	4603      	mov	r3, r0
 8003f88:	4a21      	ldr	r2, [pc, #132]	@ (8004010 <vTaskStartScheduler+0xc0>)
 8003f8a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003f8c:	4b20      	ldr	r3, [pc, #128]	@ (8004010 <vTaskStartScheduler+0xc0>)
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d002      	beq.n	8003f9a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003f94:	2301      	movs	r3, #1
 8003f96:	617b      	str	r3, [r7, #20]
 8003f98:	e001      	b.n	8003f9e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003f9a:	2300      	movs	r3, #0
 8003f9c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8003f9e:	697b      	ldr	r3, [r7, #20]
 8003fa0:	2b01      	cmp	r3, #1
 8003fa2:	d102      	bne.n	8003faa <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8003fa4:	f000 fd04 	bl	80049b0 <xTimerCreateTimerTask>
 8003fa8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003faa:	697b      	ldr	r3, [r7, #20]
 8003fac:	2b01      	cmp	r3, #1
 8003fae:	d116      	bne.n	8003fde <vTaskStartScheduler+0x8e>
	__asm volatile
 8003fb0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003fb4:	f383 8811 	msr	BASEPRI, r3
 8003fb8:	f3bf 8f6f 	isb	sy
 8003fbc:	f3bf 8f4f 	dsb	sy
 8003fc0:	613b      	str	r3, [r7, #16]
}
 8003fc2:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003fc4:	4b13      	ldr	r3, [pc, #76]	@ (8004014 <vTaskStartScheduler+0xc4>)
 8003fc6:	f04f 32ff 	mov.w	r2, #4294967295
 8003fca:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003fcc:	4b12      	ldr	r3, [pc, #72]	@ (8004018 <vTaskStartScheduler+0xc8>)
 8003fce:	2201      	movs	r2, #1
 8003fd0:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003fd2:	4b12      	ldr	r3, [pc, #72]	@ (800401c <vTaskStartScheduler+0xcc>)
 8003fd4:	2200      	movs	r2, #0
 8003fd6:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003fd8:	f001 f8d2 	bl	8005180 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003fdc:	e00f      	b.n	8003ffe <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003fde:	697b      	ldr	r3, [r7, #20]
 8003fe0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fe4:	d10b      	bne.n	8003ffe <vTaskStartScheduler+0xae>
	__asm volatile
 8003fe6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003fea:	f383 8811 	msr	BASEPRI, r3
 8003fee:	f3bf 8f6f 	isb	sy
 8003ff2:	f3bf 8f4f 	dsb	sy
 8003ff6:	60fb      	str	r3, [r7, #12]
}
 8003ff8:	bf00      	nop
 8003ffa:	bf00      	nop
 8003ffc:	e7fd      	b.n	8003ffa <vTaskStartScheduler+0xaa>
}
 8003ffe:	bf00      	nop
 8004000:	3718      	adds	r7, #24
 8004002:	46bd      	mov	sp, r7
 8004004:	bd80      	pop	{r7, pc}
 8004006:	bf00      	nop
 8004008:	08005984 	.word	0x08005984
 800400c:	08004641 	.word	0x08004641
 8004010:	20000cbc 	.word	0x20000cbc
 8004014:	20000cb8 	.word	0x20000cb8
 8004018:	20000ca4 	.word	0x20000ca4
 800401c:	20000c9c 	.word	0x20000c9c

08004020 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004020:	b480      	push	{r7}
 8004022:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8004024:	4b04      	ldr	r3, [pc, #16]	@ (8004038 <vTaskSuspendAll+0x18>)
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	3301      	adds	r3, #1
 800402a:	4a03      	ldr	r2, [pc, #12]	@ (8004038 <vTaskSuspendAll+0x18>)
 800402c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800402e:	bf00      	nop
 8004030:	46bd      	mov	sp, r7
 8004032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004036:	4770      	bx	lr
 8004038:	20000cc0 	.word	0x20000cc0

0800403c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800403c:	b580      	push	{r7, lr}
 800403e:	b084      	sub	sp, #16
 8004040:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004042:	2300      	movs	r3, #0
 8004044:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004046:	2300      	movs	r3, #0
 8004048:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800404a:	4b42      	ldr	r3, [pc, #264]	@ (8004154 <xTaskResumeAll+0x118>)
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	2b00      	cmp	r3, #0
 8004050:	d10b      	bne.n	800406a <xTaskResumeAll+0x2e>
	__asm volatile
 8004052:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004056:	f383 8811 	msr	BASEPRI, r3
 800405a:	f3bf 8f6f 	isb	sy
 800405e:	f3bf 8f4f 	dsb	sy
 8004062:	603b      	str	r3, [r7, #0]
}
 8004064:	bf00      	nop
 8004066:	bf00      	nop
 8004068:	e7fd      	b.n	8004066 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800406a:	f001 f92d 	bl	80052c8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800406e:	4b39      	ldr	r3, [pc, #228]	@ (8004154 <xTaskResumeAll+0x118>)
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	3b01      	subs	r3, #1
 8004074:	4a37      	ldr	r2, [pc, #220]	@ (8004154 <xTaskResumeAll+0x118>)
 8004076:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004078:	4b36      	ldr	r3, [pc, #216]	@ (8004154 <xTaskResumeAll+0x118>)
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	2b00      	cmp	r3, #0
 800407e:	d162      	bne.n	8004146 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004080:	4b35      	ldr	r3, [pc, #212]	@ (8004158 <xTaskResumeAll+0x11c>)
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	2b00      	cmp	r3, #0
 8004086:	d05e      	beq.n	8004146 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004088:	e02f      	b.n	80040ea <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800408a:	4b34      	ldr	r3, [pc, #208]	@ (800415c <xTaskResumeAll+0x120>)
 800408c:	68db      	ldr	r3, [r3, #12]
 800408e:	68db      	ldr	r3, [r3, #12]
 8004090:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	3318      	adds	r3, #24
 8004096:	4618      	mov	r0, r3
 8004098:	f7ff f85a 	bl	8003150 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	3304      	adds	r3, #4
 80040a0:	4618      	mov	r0, r3
 80040a2:	f7ff f855 	bl	8003150 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80040aa:	4b2d      	ldr	r3, [pc, #180]	@ (8004160 <xTaskResumeAll+0x124>)
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	429a      	cmp	r2, r3
 80040b0:	d903      	bls.n	80040ba <xTaskResumeAll+0x7e>
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040b6:	4a2a      	ldr	r2, [pc, #168]	@ (8004160 <xTaskResumeAll+0x124>)
 80040b8:	6013      	str	r3, [r2, #0]
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80040be:	4613      	mov	r3, r2
 80040c0:	009b      	lsls	r3, r3, #2
 80040c2:	4413      	add	r3, r2
 80040c4:	009b      	lsls	r3, r3, #2
 80040c6:	4a27      	ldr	r2, [pc, #156]	@ (8004164 <xTaskResumeAll+0x128>)
 80040c8:	441a      	add	r2, r3
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	3304      	adds	r3, #4
 80040ce:	4619      	mov	r1, r3
 80040d0:	4610      	mov	r0, r2
 80040d2:	f7fe ffe0 	bl	8003096 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80040da:	4b23      	ldr	r3, [pc, #140]	@ (8004168 <xTaskResumeAll+0x12c>)
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040e0:	429a      	cmp	r2, r3
 80040e2:	d302      	bcc.n	80040ea <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 80040e4:	4b21      	ldr	r3, [pc, #132]	@ (800416c <xTaskResumeAll+0x130>)
 80040e6:	2201      	movs	r2, #1
 80040e8:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80040ea:	4b1c      	ldr	r3, [pc, #112]	@ (800415c <xTaskResumeAll+0x120>)
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d1cb      	bne.n	800408a <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d001      	beq.n	80040fc <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80040f8:	f000 fb58 	bl	80047ac <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80040fc:	4b1c      	ldr	r3, [pc, #112]	@ (8004170 <xTaskResumeAll+0x134>)
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	2b00      	cmp	r3, #0
 8004106:	d010      	beq.n	800412a <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004108:	f000 f846 	bl	8004198 <xTaskIncrementTick>
 800410c:	4603      	mov	r3, r0
 800410e:	2b00      	cmp	r3, #0
 8004110:	d002      	beq.n	8004118 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8004112:	4b16      	ldr	r3, [pc, #88]	@ (800416c <xTaskResumeAll+0x130>)
 8004114:	2201      	movs	r2, #1
 8004116:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	3b01      	subs	r3, #1
 800411c:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	2b00      	cmp	r3, #0
 8004122:	d1f1      	bne.n	8004108 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8004124:	4b12      	ldr	r3, [pc, #72]	@ (8004170 <xTaskResumeAll+0x134>)
 8004126:	2200      	movs	r2, #0
 8004128:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800412a:	4b10      	ldr	r3, [pc, #64]	@ (800416c <xTaskResumeAll+0x130>)
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	2b00      	cmp	r3, #0
 8004130:	d009      	beq.n	8004146 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004132:	2301      	movs	r3, #1
 8004134:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004136:	4b0f      	ldr	r3, [pc, #60]	@ (8004174 <xTaskResumeAll+0x138>)
 8004138:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800413c:	601a      	str	r2, [r3, #0]
 800413e:	f3bf 8f4f 	dsb	sy
 8004142:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004146:	f001 f8f1 	bl	800532c <vPortExitCritical>

	return xAlreadyYielded;
 800414a:	68bb      	ldr	r3, [r7, #8]
}
 800414c:	4618      	mov	r0, r3
 800414e:	3710      	adds	r7, #16
 8004150:	46bd      	mov	sp, r7
 8004152:	bd80      	pop	{r7, pc}
 8004154:	20000cc0 	.word	0x20000cc0
 8004158:	20000c98 	.word	0x20000c98
 800415c:	20000c58 	.word	0x20000c58
 8004160:	20000ca0 	.word	0x20000ca0
 8004164:	200007c8 	.word	0x200007c8
 8004168:	200007c4 	.word	0x200007c4
 800416c:	20000cac 	.word	0x20000cac
 8004170:	20000ca8 	.word	0x20000ca8
 8004174:	e000ed04 	.word	0xe000ed04

08004178 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8004178:	b480      	push	{r7}
 800417a:	b083      	sub	sp, #12
 800417c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800417e:	4b05      	ldr	r3, [pc, #20]	@ (8004194 <xTaskGetTickCount+0x1c>)
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8004184:	687b      	ldr	r3, [r7, #4]
}
 8004186:	4618      	mov	r0, r3
 8004188:	370c      	adds	r7, #12
 800418a:	46bd      	mov	sp, r7
 800418c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004190:	4770      	bx	lr
 8004192:	bf00      	nop
 8004194:	20000c9c 	.word	0x20000c9c

08004198 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004198:	b580      	push	{r7, lr}
 800419a:	b086      	sub	sp, #24
 800419c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800419e:	2300      	movs	r3, #0
 80041a0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80041a2:	4b4f      	ldr	r3, [pc, #316]	@ (80042e0 <xTaskIncrementTick+0x148>)
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	f040 8090 	bne.w	80042cc <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80041ac:	4b4d      	ldr	r3, [pc, #308]	@ (80042e4 <xTaskIncrementTick+0x14c>)
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	3301      	adds	r3, #1
 80041b2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80041b4:	4a4b      	ldr	r2, [pc, #300]	@ (80042e4 <xTaskIncrementTick+0x14c>)
 80041b6:	693b      	ldr	r3, [r7, #16]
 80041b8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80041ba:	693b      	ldr	r3, [r7, #16]
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d121      	bne.n	8004204 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80041c0:	4b49      	ldr	r3, [pc, #292]	@ (80042e8 <xTaskIncrementTick+0x150>)
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d00b      	beq.n	80041e2 <xTaskIncrementTick+0x4a>
	__asm volatile
 80041ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80041ce:	f383 8811 	msr	BASEPRI, r3
 80041d2:	f3bf 8f6f 	isb	sy
 80041d6:	f3bf 8f4f 	dsb	sy
 80041da:	603b      	str	r3, [r7, #0]
}
 80041dc:	bf00      	nop
 80041de:	bf00      	nop
 80041e0:	e7fd      	b.n	80041de <xTaskIncrementTick+0x46>
 80041e2:	4b41      	ldr	r3, [pc, #260]	@ (80042e8 <xTaskIncrementTick+0x150>)
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	60fb      	str	r3, [r7, #12]
 80041e8:	4b40      	ldr	r3, [pc, #256]	@ (80042ec <xTaskIncrementTick+0x154>)
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	4a3e      	ldr	r2, [pc, #248]	@ (80042e8 <xTaskIncrementTick+0x150>)
 80041ee:	6013      	str	r3, [r2, #0]
 80041f0:	4a3e      	ldr	r2, [pc, #248]	@ (80042ec <xTaskIncrementTick+0x154>)
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	6013      	str	r3, [r2, #0]
 80041f6:	4b3e      	ldr	r3, [pc, #248]	@ (80042f0 <xTaskIncrementTick+0x158>)
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	3301      	adds	r3, #1
 80041fc:	4a3c      	ldr	r2, [pc, #240]	@ (80042f0 <xTaskIncrementTick+0x158>)
 80041fe:	6013      	str	r3, [r2, #0]
 8004200:	f000 fad4 	bl	80047ac <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004204:	4b3b      	ldr	r3, [pc, #236]	@ (80042f4 <xTaskIncrementTick+0x15c>)
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	693a      	ldr	r2, [r7, #16]
 800420a:	429a      	cmp	r2, r3
 800420c:	d349      	bcc.n	80042a2 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800420e:	4b36      	ldr	r3, [pc, #216]	@ (80042e8 <xTaskIncrementTick+0x150>)
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	2b00      	cmp	r3, #0
 8004216:	d104      	bne.n	8004222 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004218:	4b36      	ldr	r3, [pc, #216]	@ (80042f4 <xTaskIncrementTick+0x15c>)
 800421a:	f04f 32ff 	mov.w	r2, #4294967295
 800421e:	601a      	str	r2, [r3, #0]
					break;
 8004220:	e03f      	b.n	80042a2 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004222:	4b31      	ldr	r3, [pc, #196]	@ (80042e8 <xTaskIncrementTick+0x150>)
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	68db      	ldr	r3, [r3, #12]
 8004228:	68db      	ldr	r3, [r3, #12]
 800422a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800422c:	68bb      	ldr	r3, [r7, #8]
 800422e:	685b      	ldr	r3, [r3, #4]
 8004230:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004232:	693a      	ldr	r2, [r7, #16]
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	429a      	cmp	r2, r3
 8004238:	d203      	bcs.n	8004242 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800423a:	4a2e      	ldr	r2, [pc, #184]	@ (80042f4 <xTaskIncrementTick+0x15c>)
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004240:	e02f      	b.n	80042a2 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004242:	68bb      	ldr	r3, [r7, #8]
 8004244:	3304      	adds	r3, #4
 8004246:	4618      	mov	r0, r3
 8004248:	f7fe ff82 	bl	8003150 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800424c:	68bb      	ldr	r3, [r7, #8]
 800424e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004250:	2b00      	cmp	r3, #0
 8004252:	d004      	beq.n	800425e <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004254:	68bb      	ldr	r3, [r7, #8]
 8004256:	3318      	adds	r3, #24
 8004258:	4618      	mov	r0, r3
 800425a:	f7fe ff79 	bl	8003150 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800425e:	68bb      	ldr	r3, [r7, #8]
 8004260:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004262:	4b25      	ldr	r3, [pc, #148]	@ (80042f8 <xTaskIncrementTick+0x160>)
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	429a      	cmp	r2, r3
 8004268:	d903      	bls.n	8004272 <xTaskIncrementTick+0xda>
 800426a:	68bb      	ldr	r3, [r7, #8]
 800426c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800426e:	4a22      	ldr	r2, [pc, #136]	@ (80042f8 <xTaskIncrementTick+0x160>)
 8004270:	6013      	str	r3, [r2, #0]
 8004272:	68bb      	ldr	r3, [r7, #8]
 8004274:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004276:	4613      	mov	r3, r2
 8004278:	009b      	lsls	r3, r3, #2
 800427a:	4413      	add	r3, r2
 800427c:	009b      	lsls	r3, r3, #2
 800427e:	4a1f      	ldr	r2, [pc, #124]	@ (80042fc <xTaskIncrementTick+0x164>)
 8004280:	441a      	add	r2, r3
 8004282:	68bb      	ldr	r3, [r7, #8]
 8004284:	3304      	adds	r3, #4
 8004286:	4619      	mov	r1, r3
 8004288:	4610      	mov	r0, r2
 800428a:	f7fe ff04 	bl	8003096 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800428e:	68bb      	ldr	r3, [r7, #8]
 8004290:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004292:	4b1b      	ldr	r3, [pc, #108]	@ (8004300 <xTaskIncrementTick+0x168>)
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004298:	429a      	cmp	r2, r3
 800429a:	d3b8      	bcc.n	800420e <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800429c:	2301      	movs	r3, #1
 800429e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80042a0:	e7b5      	b.n	800420e <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80042a2:	4b17      	ldr	r3, [pc, #92]	@ (8004300 <xTaskIncrementTick+0x168>)
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80042a8:	4914      	ldr	r1, [pc, #80]	@ (80042fc <xTaskIncrementTick+0x164>)
 80042aa:	4613      	mov	r3, r2
 80042ac:	009b      	lsls	r3, r3, #2
 80042ae:	4413      	add	r3, r2
 80042b0:	009b      	lsls	r3, r3, #2
 80042b2:	440b      	add	r3, r1
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	2b01      	cmp	r3, #1
 80042b8:	d901      	bls.n	80042be <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 80042ba:	2301      	movs	r3, #1
 80042bc:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80042be:	4b11      	ldr	r3, [pc, #68]	@ (8004304 <xTaskIncrementTick+0x16c>)
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d007      	beq.n	80042d6 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 80042c6:	2301      	movs	r3, #1
 80042c8:	617b      	str	r3, [r7, #20]
 80042ca:	e004      	b.n	80042d6 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80042cc:	4b0e      	ldr	r3, [pc, #56]	@ (8004308 <xTaskIncrementTick+0x170>)
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	3301      	adds	r3, #1
 80042d2:	4a0d      	ldr	r2, [pc, #52]	@ (8004308 <xTaskIncrementTick+0x170>)
 80042d4:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80042d6:	697b      	ldr	r3, [r7, #20]
}
 80042d8:	4618      	mov	r0, r3
 80042da:	3718      	adds	r7, #24
 80042dc:	46bd      	mov	sp, r7
 80042de:	bd80      	pop	{r7, pc}
 80042e0:	20000cc0 	.word	0x20000cc0
 80042e4:	20000c9c 	.word	0x20000c9c
 80042e8:	20000c50 	.word	0x20000c50
 80042ec:	20000c54 	.word	0x20000c54
 80042f0:	20000cb0 	.word	0x20000cb0
 80042f4:	20000cb8 	.word	0x20000cb8
 80042f8:	20000ca0 	.word	0x20000ca0
 80042fc:	200007c8 	.word	0x200007c8
 8004300:	200007c4 	.word	0x200007c4
 8004304:	20000cac 	.word	0x20000cac
 8004308:	20000ca8 	.word	0x20000ca8

0800430c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800430c:	b480      	push	{r7}
 800430e:	b085      	sub	sp, #20
 8004310:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004312:	4b28      	ldr	r3, [pc, #160]	@ (80043b4 <vTaskSwitchContext+0xa8>)
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	2b00      	cmp	r3, #0
 8004318:	d003      	beq.n	8004322 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800431a:	4b27      	ldr	r3, [pc, #156]	@ (80043b8 <vTaskSwitchContext+0xac>)
 800431c:	2201      	movs	r2, #1
 800431e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004320:	e042      	b.n	80043a8 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 8004322:	4b25      	ldr	r3, [pc, #148]	@ (80043b8 <vTaskSwitchContext+0xac>)
 8004324:	2200      	movs	r2, #0
 8004326:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004328:	4b24      	ldr	r3, [pc, #144]	@ (80043bc <vTaskSwitchContext+0xb0>)
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	60fb      	str	r3, [r7, #12]
 800432e:	e011      	b.n	8004354 <vTaskSwitchContext+0x48>
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	2b00      	cmp	r3, #0
 8004334:	d10b      	bne.n	800434e <vTaskSwitchContext+0x42>
	__asm volatile
 8004336:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800433a:	f383 8811 	msr	BASEPRI, r3
 800433e:	f3bf 8f6f 	isb	sy
 8004342:	f3bf 8f4f 	dsb	sy
 8004346:	607b      	str	r3, [r7, #4]
}
 8004348:	bf00      	nop
 800434a:	bf00      	nop
 800434c:	e7fd      	b.n	800434a <vTaskSwitchContext+0x3e>
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	3b01      	subs	r3, #1
 8004352:	60fb      	str	r3, [r7, #12]
 8004354:	491a      	ldr	r1, [pc, #104]	@ (80043c0 <vTaskSwitchContext+0xb4>)
 8004356:	68fa      	ldr	r2, [r7, #12]
 8004358:	4613      	mov	r3, r2
 800435a:	009b      	lsls	r3, r3, #2
 800435c:	4413      	add	r3, r2
 800435e:	009b      	lsls	r3, r3, #2
 8004360:	440b      	add	r3, r1
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	2b00      	cmp	r3, #0
 8004366:	d0e3      	beq.n	8004330 <vTaskSwitchContext+0x24>
 8004368:	68fa      	ldr	r2, [r7, #12]
 800436a:	4613      	mov	r3, r2
 800436c:	009b      	lsls	r3, r3, #2
 800436e:	4413      	add	r3, r2
 8004370:	009b      	lsls	r3, r3, #2
 8004372:	4a13      	ldr	r2, [pc, #76]	@ (80043c0 <vTaskSwitchContext+0xb4>)
 8004374:	4413      	add	r3, r2
 8004376:	60bb      	str	r3, [r7, #8]
 8004378:	68bb      	ldr	r3, [r7, #8]
 800437a:	685b      	ldr	r3, [r3, #4]
 800437c:	685a      	ldr	r2, [r3, #4]
 800437e:	68bb      	ldr	r3, [r7, #8]
 8004380:	605a      	str	r2, [r3, #4]
 8004382:	68bb      	ldr	r3, [r7, #8]
 8004384:	685a      	ldr	r2, [r3, #4]
 8004386:	68bb      	ldr	r3, [r7, #8]
 8004388:	3308      	adds	r3, #8
 800438a:	429a      	cmp	r2, r3
 800438c:	d104      	bne.n	8004398 <vTaskSwitchContext+0x8c>
 800438e:	68bb      	ldr	r3, [r7, #8]
 8004390:	685b      	ldr	r3, [r3, #4]
 8004392:	685a      	ldr	r2, [r3, #4]
 8004394:	68bb      	ldr	r3, [r7, #8]
 8004396:	605a      	str	r2, [r3, #4]
 8004398:	68bb      	ldr	r3, [r7, #8]
 800439a:	685b      	ldr	r3, [r3, #4]
 800439c:	68db      	ldr	r3, [r3, #12]
 800439e:	4a09      	ldr	r2, [pc, #36]	@ (80043c4 <vTaskSwitchContext+0xb8>)
 80043a0:	6013      	str	r3, [r2, #0]
 80043a2:	4a06      	ldr	r2, [pc, #24]	@ (80043bc <vTaskSwitchContext+0xb0>)
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	6013      	str	r3, [r2, #0]
}
 80043a8:	bf00      	nop
 80043aa:	3714      	adds	r7, #20
 80043ac:	46bd      	mov	sp, r7
 80043ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b2:	4770      	bx	lr
 80043b4:	20000cc0 	.word	0x20000cc0
 80043b8:	20000cac 	.word	0x20000cac
 80043bc:	20000ca0 	.word	0x20000ca0
 80043c0:	200007c8 	.word	0x200007c8
 80043c4:	200007c4 	.word	0x200007c4

080043c8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80043c8:	b580      	push	{r7, lr}
 80043ca:	b084      	sub	sp, #16
 80043cc:	af00      	add	r7, sp, #0
 80043ce:	6078      	str	r0, [r7, #4]
 80043d0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d10b      	bne.n	80043f0 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 80043d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80043dc:	f383 8811 	msr	BASEPRI, r3
 80043e0:	f3bf 8f6f 	isb	sy
 80043e4:	f3bf 8f4f 	dsb	sy
 80043e8:	60fb      	str	r3, [r7, #12]
}
 80043ea:	bf00      	nop
 80043ec:	bf00      	nop
 80043ee:	e7fd      	b.n	80043ec <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80043f0:	4b07      	ldr	r3, [pc, #28]	@ (8004410 <vTaskPlaceOnEventList+0x48>)
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	3318      	adds	r3, #24
 80043f6:	4619      	mov	r1, r3
 80043f8:	6878      	ldr	r0, [r7, #4]
 80043fa:	f7fe fe70 	bl	80030de <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80043fe:	2101      	movs	r1, #1
 8004400:	6838      	ldr	r0, [r7, #0]
 8004402:	f000 fa81 	bl	8004908 <prvAddCurrentTaskToDelayedList>
}
 8004406:	bf00      	nop
 8004408:	3710      	adds	r7, #16
 800440a:	46bd      	mov	sp, r7
 800440c:	bd80      	pop	{r7, pc}
 800440e:	bf00      	nop
 8004410:	200007c4 	.word	0x200007c4

08004414 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004414:	b580      	push	{r7, lr}
 8004416:	b086      	sub	sp, #24
 8004418:	af00      	add	r7, sp, #0
 800441a:	60f8      	str	r0, [r7, #12]
 800441c:	60b9      	str	r1, [r7, #8]
 800441e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	2b00      	cmp	r3, #0
 8004424:	d10b      	bne.n	800443e <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8004426:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800442a:	f383 8811 	msr	BASEPRI, r3
 800442e:	f3bf 8f6f 	isb	sy
 8004432:	f3bf 8f4f 	dsb	sy
 8004436:	617b      	str	r3, [r7, #20]
}
 8004438:	bf00      	nop
 800443a:	bf00      	nop
 800443c:	e7fd      	b.n	800443a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800443e:	4b0a      	ldr	r3, [pc, #40]	@ (8004468 <vTaskPlaceOnEventListRestricted+0x54>)
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	3318      	adds	r3, #24
 8004444:	4619      	mov	r1, r3
 8004446:	68f8      	ldr	r0, [r7, #12]
 8004448:	f7fe fe25 	bl	8003096 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	2b00      	cmp	r3, #0
 8004450:	d002      	beq.n	8004458 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8004452:	f04f 33ff 	mov.w	r3, #4294967295
 8004456:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8004458:	6879      	ldr	r1, [r7, #4]
 800445a:	68b8      	ldr	r0, [r7, #8]
 800445c:	f000 fa54 	bl	8004908 <prvAddCurrentTaskToDelayedList>
	}
 8004460:	bf00      	nop
 8004462:	3718      	adds	r7, #24
 8004464:	46bd      	mov	sp, r7
 8004466:	bd80      	pop	{r7, pc}
 8004468:	200007c4 	.word	0x200007c4

0800446c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800446c:	b580      	push	{r7, lr}
 800446e:	b086      	sub	sp, #24
 8004470:	af00      	add	r7, sp, #0
 8004472:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	68db      	ldr	r3, [r3, #12]
 8004478:	68db      	ldr	r3, [r3, #12]
 800447a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800447c:	693b      	ldr	r3, [r7, #16]
 800447e:	2b00      	cmp	r3, #0
 8004480:	d10b      	bne.n	800449a <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8004482:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004486:	f383 8811 	msr	BASEPRI, r3
 800448a:	f3bf 8f6f 	isb	sy
 800448e:	f3bf 8f4f 	dsb	sy
 8004492:	60fb      	str	r3, [r7, #12]
}
 8004494:	bf00      	nop
 8004496:	bf00      	nop
 8004498:	e7fd      	b.n	8004496 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800449a:	693b      	ldr	r3, [r7, #16]
 800449c:	3318      	adds	r3, #24
 800449e:	4618      	mov	r0, r3
 80044a0:	f7fe fe56 	bl	8003150 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80044a4:	4b1d      	ldr	r3, [pc, #116]	@ (800451c <xTaskRemoveFromEventList+0xb0>)
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d11d      	bne.n	80044e8 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80044ac:	693b      	ldr	r3, [r7, #16]
 80044ae:	3304      	adds	r3, #4
 80044b0:	4618      	mov	r0, r3
 80044b2:	f7fe fe4d 	bl	8003150 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80044b6:	693b      	ldr	r3, [r7, #16]
 80044b8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80044ba:	4b19      	ldr	r3, [pc, #100]	@ (8004520 <xTaskRemoveFromEventList+0xb4>)
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	429a      	cmp	r2, r3
 80044c0:	d903      	bls.n	80044ca <xTaskRemoveFromEventList+0x5e>
 80044c2:	693b      	ldr	r3, [r7, #16]
 80044c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044c6:	4a16      	ldr	r2, [pc, #88]	@ (8004520 <xTaskRemoveFromEventList+0xb4>)
 80044c8:	6013      	str	r3, [r2, #0]
 80044ca:	693b      	ldr	r3, [r7, #16]
 80044cc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80044ce:	4613      	mov	r3, r2
 80044d0:	009b      	lsls	r3, r3, #2
 80044d2:	4413      	add	r3, r2
 80044d4:	009b      	lsls	r3, r3, #2
 80044d6:	4a13      	ldr	r2, [pc, #76]	@ (8004524 <xTaskRemoveFromEventList+0xb8>)
 80044d8:	441a      	add	r2, r3
 80044da:	693b      	ldr	r3, [r7, #16]
 80044dc:	3304      	adds	r3, #4
 80044de:	4619      	mov	r1, r3
 80044e0:	4610      	mov	r0, r2
 80044e2:	f7fe fdd8 	bl	8003096 <vListInsertEnd>
 80044e6:	e005      	b.n	80044f4 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80044e8:	693b      	ldr	r3, [r7, #16]
 80044ea:	3318      	adds	r3, #24
 80044ec:	4619      	mov	r1, r3
 80044ee:	480e      	ldr	r0, [pc, #56]	@ (8004528 <xTaskRemoveFromEventList+0xbc>)
 80044f0:	f7fe fdd1 	bl	8003096 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80044f4:	693b      	ldr	r3, [r7, #16]
 80044f6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80044f8:	4b0c      	ldr	r3, [pc, #48]	@ (800452c <xTaskRemoveFromEventList+0xc0>)
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044fe:	429a      	cmp	r2, r3
 8004500:	d905      	bls.n	800450e <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004502:	2301      	movs	r3, #1
 8004504:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004506:	4b0a      	ldr	r3, [pc, #40]	@ (8004530 <xTaskRemoveFromEventList+0xc4>)
 8004508:	2201      	movs	r2, #1
 800450a:	601a      	str	r2, [r3, #0]
 800450c:	e001      	b.n	8004512 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800450e:	2300      	movs	r3, #0
 8004510:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8004512:	697b      	ldr	r3, [r7, #20]
}
 8004514:	4618      	mov	r0, r3
 8004516:	3718      	adds	r7, #24
 8004518:	46bd      	mov	sp, r7
 800451a:	bd80      	pop	{r7, pc}
 800451c:	20000cc0 	.word	0x20000cc0
 8004520:	20000ca0 	.word	0x20000ca0
 8004524:	200007c8 	.word	0x200007c8
 8004528:	20000c58 	.word	0x20000c58
 800452c:	200007c4 	.word	0x200007c4
 8004530:	20000cac 	.word	0x20000cac

08004534 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004534:	b480      	push	{r7}
 8004536:	b083      	sub	sp, #12
 8004538:	af00      	add	r7, sp, #0
 800453a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800453c:	4b06      	ldr	r3, [pc, #24]	@ (8004558 <vTaskInternalSetTimeOutState+0x24>)
 800453e:	681a      	ldr	r2, [r3, #0]
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004544:	4b05      	ldr	r3, [pc, #20]	@ (800455c <vTaskInternalSetTimeOutState+0x28>)
 8004546:	681a      	ldr	r2, [r3, #0]
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	605a      	str	r2, [r3, #4]
}
 800454c:	bf00      	nop
 800454e:	370c      	adds	r7, #12
 8004550:	46bd      	mov	sp, r7
 8004552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004556:	4770      	bx	lr
 8004558:	20000cb0 	.word	0x20000cb0
 800455c:	20000c9c 	.word	0x20000c9c

08004560 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004560:	b580      	push	{r7, lr}
 8004562:	b088      	sub	sp, #32
 8004564:	af00      	add	r7, sp, #0
 8004566:	6078      	str	r0, [r7, #4]
 8004568:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	2b00      	cmp	r3, #0
 800456e:	d10b      	bne.n	8004588 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8004570:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004574:	f383 8811 	msr	BASEPRI, r3
 8004578:	f3bf 8f6f 	isb	sy
 800457c:	f3bf 8f4f 	dsb	sy
 8004580:	613b      	str	r3, [r7, #16]
}
 8004582:	bf00      	nop
 8004584:	bf00      	nop
 8004586:	e7fd      	b.n	8004584 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8004588:	683b      	ldr	r3, [r7, #0]
 800458a:	2b00      	cmp	r3, #0
 800458c:	d10b      	bne.n	80045a6 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800458e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004592:	f383 8811 	msr	BASEPRI, r3
 8004596:	f3bf 8f6f 	isb	sy
 800459a:	f3bf 8f4f 	dsb	sy
 800459e:	60fb      	str	r3, [r7, #12]
}
 80045a0:	bf00      	nop
 80045a2:	bf00      	nop
 80045a4:	e7fd      	b.n	80045a2 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 80045a6:	f000 fe8f 	bl	80052c8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80045aa:	4b1d      	ldr	r3, [pc, #116]	@ (8004620 <xTaskCheckForTimeOut+0xc0>)
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	685b      	ldr	r3, [r3, #4]
 80045b4:	69ba      	ldr	r2, [r7, #24]
 80045b6:	1ad3      	subs	r3, r2, r3
 80045b8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80045ba:	683b      	ldr	r3, [r7, #0]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045c2:	d102      	bne.n	80045ca <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80045c4:	2300      	movs	r3, #0
 80045c6:	61fb      	str	r3, [r7, #28]
 80045c8:	e023      	b.n	8004612 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681a      	ldr	r2, [r3, #0]
 80045ce:	4b15      	ldr	r3, [pc, #84]	@ (8004624 <xTaskCheckForTimeOut+0xc4>)
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	429a      	cmp	r2, r3
 80045d4:	d007      	beq.n	80045e6 <xTaskCheckForTimeOut+0x86>
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	685b      	ldr	r3, [r3, #4]
 80045da:	69ba      	ldr	r2, [r7, #24]
 80045dc:	429a      	cmp	r2, r3
 80045de:	d302      	bcc.n	80045e6 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80045e0:	2301      	movs	r3, #1
 80045e2:	61fb      	str	r3, [r7, #28]
 80045e4:	e015      	b.n	8004612 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80045e6:	683b      	ldr	r3, [r7, #0]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	697a      	ldr	r2, [r7, #20]
 80045ec:	429a      	cmp	r2, r3
 80045ee:	d20b      	bcs.n	8004608 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80045f0:	683b      	ldr	r3, [r7, #0]
 80045f2:	681a      	ldr	r2, [r3, #0]
 80045f4:	697b      	ldr	r3, [r7, #20]
 80045f6:	1ad2      	subs	r2, r2, r3
 80045f8:	683b      	ldr	r3, [r7, #0]
 80045fa:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80045fc:	6878      	ldr	r0, [r7, #4]
 80045fe:	f7ff ff99 	bl	8004534 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8004602:	2300      	movs	r3, #0
 8004604:	61fb      	str	r3, [r7, #28]
 8004606:	e004      	b.n	8004612 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8004608:	683b      	ldr	r3, [r7, #0]
 800460a:	2200      	movs	r2, #0
 800460c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800460e:	2301      	movs	r3, #1
 8004610:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8004612:	f000 fe8b 	bl	800532c <vPortExitCritical>

	return xReturn;
 8004616:	69fb      	ldr	r3, [r7, #28]
}
 8004618:	4618      	mov	r0, r3
 800461a:	3720      	adds	r7, #32
 800461c:	46bd      	mov	sp, r7
 800461e:	bd80      	pop	{r7, pc}
 8004620:	20000c9c 	.word	0x20000c9c
 8004624:	20000cb0 	.word	0x20000cb0

08004628 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004628:	b480      	push	{r7}
 800462a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800462c:	4b03      	ldr	r3, [pc, #12]	@ (800463c <vTaskMissedYield+0x14>)
 800462e:	2201      	movs	r2, #1
 8004630:	601a      	str	r2, [r3, #0]
}
 8004632:	bf00      	nop
 8004634:	46bd      	mov	sp, r7
 8004636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800463a:	4770      	bx	lr
 800463c:	20000cac 	.word	0x20000cac

08004640 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004640:	b580      	push	{r7, lr}
 8004642:	b082      	sub	sp, #8
 8004644:	af00      	add	r7, sp, #0
 8004646:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004648:	f000 f852 	bl	80046f0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800464c:	4b06      	ldr	r3, [pc, #24]	@ (8004668 <prvIdleTask+0x28>)
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	2b01      	cmp	r3, #1
 8004652:	d9f9      	bls.n	8004648 <prvIdleTask+0x8>
			{
				taskYIELD();
 8004654:	4b05      	ldr	r3, [pc, #20]	@ (800466c <prvIdleTask+0x2c>)
 8004656:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800465a:	601a      	str	r2, [r3, #0]
 800465c:	f3bf 8f4f 	dsb	sy
 8004660:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004664:	e7f0      	b.n	8004648 <prvIdleTask+0x8>
 8004666:	bf00      	nop
 8004668:	200007c8 	.word	0x200007c8
 800466c:	e000ed04 	.word	0xe000ed04

08004670 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004670:	b580      	push	{r7, lr}
 8004672:	b082      	sub	sp, #8
 8004674:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004676:	2300      	movs	r3, #0
 8004678:	607b      	str	r3, [r7, #4]
 800467a:	e00c      	b.n	8004696 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800467c:	687a      	ldr	r2, [r7, #4]
 800467e:	4613      	mov	r3, r2
 8004680:	009b      	lsls	r3, r3, #2
 8004682:	4413      	add	r3, r2
 8004684:	009b      	lsls	r3, r3, #2
 8004686:	4a12      	ldr	r2, [pc, #72]	@ (80046d0 <prvInitialiseTaskLists+0x60>)
 8004688:	4413      	add	r3, r2
 800468a:	4618      	mov	r0, r3
 800468c:	f7fe fcd6 	bl	800303c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	3301      	adds	r3, #1
 8004694:	607b      	str	r3, [r7, #4]
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	2b37      	cmp	r3, #55	@ 0x37
 800469a:	d9ef      	bls.n	800467c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800469c:	480d      	ldr	r0, [pc, #52]	@ (80046d4 <prvInitialiseTaskLists+0x64>)
 800469e:	f7fe fccd 	bl	800303c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80046a2:	480d      	ldr	r0, [pc, #52]	@ (80046d8 <prvInitialiseTaskLists+0x68>)
 80046a4:	f7fe fcca 	bl	800303c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80046a8:	480c      	ldr	r0, [pc, #48]	@ (80046dc <prvInitialiseTaskLists+0x6c>)
 80046aa:	f7fe fcc7 	bl	800303c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80046ae:	480c      	ldr	r0, [pc, #48]	@ (80046e0 <prvInitialiseTaskLists+0x70>)
 80046b0:	f7fe fcc4 	bl	800303c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80046b4:	480b      	ldr	r0, [pc, #44]	@ (80046e4 <prvInitialiseTaskLists+0x74>)
 80046b6:	f7fe fcc1 	bl	800303c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80046ba:	4b0b      	ldr	r3, [pc, #44]	@ (80046e8 <prvInitialiseTaskLists+0x78>)
 80046bc:	4a05      	ldr	r2, [pc, #20]	@ (80046d4 <prvInitialiseTaskLists+0x64>)
 80046be:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80046c0:	4b0a      	ldr	r3, [pc, #40]	@ (80046ec <prvInitialiseTaskLists+0x7c>)
 80046c2:	4a05      	ldr	r2, [pc, #20]	@ (80046d8 <prvInitialiseTaskLists+0x68>)
 80046c4:	601a      	str	r2, [r3, #0]
}
 80046c6:	bf00      	nop
 80046c8:	3708      	adds	r7, #8
 80046ca:	46bd      	mov	sp, r7
 80046cc:	bd80      	pop	{r7, pc}
 80046ce:	bf00      	nop
 80046d0:	200007c8 	.word	0x200007c8
 80046d4:	20000c28 	.word	0x20000c28
 80046d8:	20000c3c 	.word	0x20000c3c
 80046dc:	20000c58 	.word	0x20000c58
 80046e0:	20000c6c 	.word	0x20000c6c
 80046e4:	20000c84 	.word	0x20000c84
 80046e8:	20000c50 	.word	0x20000c50
 80046ec:	20000c54 	.word	0x20000c54

080046f0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80046f0:	b580      	push	{r7, lr}
 80046f2:	b082      	sub	sp, #8
 80046f4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80046f6:	e019      	b.n	800472c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80046f8:	f000 fde6 	bl	80052c8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80046fc:	4b10      	ldr	r3, [pc, #64]	@ (8004740 <prvCheckTasksWaitingTermination+0x50>)
 80046fe:	68db      	ldr	r3, [r3, #12]
 8004700:	68db      	ldr	r3, [r3, #12]
 8004702:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	3304      	adds	r3, #4
 8004708:	4618      	mov	r0, r3
 800470a:	f7fe fd21 	bl	8003150 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800470e:	4b0d      	ldr	r3, [pc, #52]	@ (8004744 <prvCheckTasksWaitingTermination+0x54>)
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	3b01      	subs	r3, #1
 8004714:	4a0b      	ldr	r2, [pc, #44]	@ (8004744 <prvCheckTasksWaitingTermination+0x54>)
 8004716:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004718:	4b0b      	ldr	r3, [pc, #44]	@ (8004748 <prvCheckTasksWaitingTermination+0x58>)
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	3b01      	subs	r3, #1
 800471e:	4a0a      	ldr	r2, [pc, #40]	@ (8004748 <prvCheckTasksWaitingTermination+0x58>)
 8004720:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004722:	f000 fe03 	bl	800532c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004726:	6878      	ldr	r0, [r7, #4]
 8004728:	f000 f810 	bl	800474c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800472c:	4b06      	ldr	r3, [pc, #24]	@ (8004748 <prvCheckTasksWaitingTermination+0x58>)
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	2b00      	cmp	r3, #0
 8004732:	d1e1      	bne.n	80046f8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004734:	bf00      	nop
 8004736:	bf00      	nop
 8004738:	3708      	adds	r7, #8
 800473a:	46bd      	mov	sp, r7
 800473c:	bd80      	pop	{r7, pc}
 800473e:	bf00      	nop
 8004740:	20000c6c 	.word	0x20000c6c
 8004744:	20000c98 	.word	0x20000c98
 8004748:	20000c80 	.word	0x20000c80

0800474c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800474c:	b580      	push	{r7, lr}
 800474e:	b084      	sub	sp, #16
 8004750:	af00      	add	r7, sp, #0
 8004752:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800475a:	2b00      	cmp	r3, #0
 800475c:	d108      	bne.n	8004770 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004762:	4618      	mov	r0, r3
 8004764:	f000 ffa0 	bl	80056a8 <vPortFree>
				vPortFree( pxTCB );
 8004768:	6878      	ldr	r0, [r7, #4]
 800476a:	f000 ff9d 	bl	80056a8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800476e:	e019      	b.n	80047a4 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8004776:	2b01      	cmp	r3, #1
 8004778:	d103      	bne.n	8004782 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800477a:	6878      	ldr	r0, [r7, #4]
 800477c:	f000 ff94 	bl	80056a8 <vPortFree>
	}
 8004780:	e010      	b.n	80047a4 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8004788:	2b02      	cmp	r3, #2
 800478a:	d00b      	beq.n	80047a4 <prvDeleteTCB+0x58>
	__asm volatile
 800478c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004790:	f383 8811 	msr	BASEPRI, r3
 8004794:	f3bf 8f6f 	isb	sy
 8004798:	f3bf 8f4f 	dsb	sy
 800479c:	60fb      	str	r3, [r7, #12]
}
 800479e:	bf00      	nop
 80047a0:	bf00      	nop
 80047a2:	e7fd      	b.n	80047a0 <prvDeleteTCB+0x54>
	}
 80047a4:	bf00      	nop
 80047a6:	3710      	adds	r7, #16
 80047a8:	46bd      	mov	sp, r7
 80047aa:	bd80      	pop	{r7, pc}

080047ac <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80047ac:	b480      	push	{r7}
 80047ae:	b083      	sub	sp, #12
 80047b0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80047b2:	4b0c      	ldr	r3, [pc, #48]	@ (80047e4 <prvResetNextTaskUnblockTime+0x38>)
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d104      	bne.n	80047c6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80047bc:	4b0a      	ldr	r3, [pc, #40]	@ (80047e8 <prvResetNextTaskUnblockTime+0x3c>)
 80047be:	f04f 32ff 	mov.w	r2, #4294967295
 80047c2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80047c4:	e008      	b.n	80047d8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80047c6:	4b07      	ldr	r3, [pc, #28]	@ (80047e4 <prvResetNextTaskUnblockTime+0x38>)
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	68db      	ldr	r3, [r3, #12]
 80047cc:	68db      	ldr	r3, [r3, #12]
 80047ce:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	685b      	ldr	r3, [r3, #4]
 80047d4:	4a04      	ldr	r2, [pc, #16]	@ (80047e8 <prvResetNextTaskUnblockTime+0x3c>)
 80047d6:	6013      	str	r3, [r2, #0]
}
 80047d8:	bf00      	nop
 80047da:	370c      	adds	r7, #12
 80047dc:	46bd      	mov	sp, r7
 80047de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e2:	4770      	bx	lr
 80047e4:	20000c50 	.word	0x20000c50
 80047e8:	20000cb8 	.word	0x20000cb8

080047ec <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80047ec:	b480      	push	{r7}
 80047ee:	b083      	sub	sp, #12
 80047f0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80047f2:	4b0b      	ldr	r3, [pc, #44]	@ (8004820 <xTaskGetSchedulerState+0x34>)
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d102      	bne.n	8004800 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80047fa:	2301      	movs	r3, #1
 80047fc:	607b      	str	r3, [r7, #4]
 80047fe:	e008      	b.n	8004812 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004800:	4b08      	ldr	r3, [pc, #32]	@ (8004824 <xTaskGetSchedulerState+0x38>)
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	2b00      	cmp	r3, #0
 8004806:	d102      	bne.n	800480e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004808:	2302      	movs	r3, #2
 800480a:	607b      	str	r3, [r7, #4]
 800480c:	e001      	b.n	8004812 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800480e:	2300      	movs	r3, #0
 8004810:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004812:	687b      	ldr	r3, [r7, #4]
	}
 8004814:	4618      	mov	r0, r3
 8004816:	370c      	adds	r7, #12
 8004818:	46bd      	mov	sp, r7
 800481a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800481e:	4770      	bx	lr
 8004820:	20000ca4 	.word	0x20000ca4
 8004824:	20000cc0 	.word	0x20000cc0

08004828 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004828:	b580      	push	{r7, lr}
 800482a:	b086      	sub	sp, #24
 800482c:	af00      	add	r7, sp, #0
 800482e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004834:	2300      	movs	r3, #0
 8004836:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	2b00      	cmp	r3, #0
 800483c:	d058      	beq.n	80048f0 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800483e:	4b2f      	ldr	r3, [pc, #188]	@ (80048fc <xTaskPriorityDisinherit+0xd4>)
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	693a      	ldr	r2, [r7, #16]
 8004844:	429a      	cmp	r2, r3
 8004846:	d00b      	beq.n	8004860 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8004848:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800484c:	f383 8811 	msr	BASEPRI, r3
 8004850:	f3bf 8f6f 	isb	sy
 8004854:	f3bf 8f4f 	dsb	sy
 8004858:	60fb      	str	r3, [r7, #12]
}
 800485a:	bf00      	nop
 800485c:	bf00      	nop
 800485e:	e7fd      	b.n	800485c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8004860:	693b      	ldr	r3, [r7, #16]
 8004862:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004864:	2b00      	cmp	r3, #0
 8004866:	d10b      	bne.n	8004880 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8004868:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800486c:	f383 8811 	msr	BASEPRI, r3
 8004870:	f3bf 8f6f 	isb	sy
 8004874:	f3bf 8f4f 	dsb	sy
 8004878:	60bb      	str	r3, [r7, #8]
}
 800487a:	bf00      	nop
 800487c:	bf00      	nop
 800487e:	e7fd      	b.n	800487c <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8004880:	693b      	ldr	r3, [r7, #16]
 8004882:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004884:	1e5a      	subs	r2, r3, #1
 8004886:	693b      	ldr	r3, [r7, #16]
 8004888:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800488a:	693b      	ldr	r3, [r7, #16]
 800488c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800488e:	693b      	ldr	r3, [r7, #16]
 8004890:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004892:	429a      	cmp	r2, r3
 8004894:	d02c      	beq.n	80048f0 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004896:	693b      	ldr	r3, [r7, #16]
 8004898:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800489a:	2b00      	cmp	r3, #0
 800489c:	d128      	bne.n	80048f0 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800489e:	693b      	ldr	r3, [r7, #16]
 80048a0:	3304      	adds	r3, #4
 80048a2:	4618      	mov	r0, r3
 80048a4:	f7fe fc54 	bl	8003150 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80048a8:	693b      	ldr	r3, [r7, #16]
 80048aa:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80048ac:	693b      	ldr	r3, [r7, #16]
 80048ae:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80048b0:	693b      	ldr	r3, [r7, #16]
 80048b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048b4:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80048b8:	693b      	ldr	r3, [r7, #16]
 80048ba:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80048bc:	693b      	ldr	r3, [r7, #16]
 80048be:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80048c0:	4b0f      	ldr	r3, [pc, #60]	@ (8004900 <xTaskPriorityDisinherit+0xd8>)
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	429a      	cmp	r2, r3
 80048c6:	d903      	bls.n	80048d0 <xTaskPriorityDisinherit+0xa8>
 80048c8:	693b      	ldr	r3, [r7, #16]
 80048ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048cc:	4a0c      	ldr	r2, [pc, #48]	@ (8004900 <xTaskPriorityDisinherit+0xd8>)
 80048ce:	6013      	str	r3, [r2, #0]
 80048d0:	693b      	ldr	r3, [r7, #16]
 80048d2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80048d4:	4613      	mov	r3, r2
 80048d6:	009b      	lsls	r3, r3, #2
 80048d8:	4413      	add	r3, r2
 80048da:	009b      	lsls	r3, r3, #2
 80048dc:	4a09      	ldr	r2, [pc, #36]	@ (8004904 <xTaskPriorityDisinherit+0xdc>)
 80048de:	441a      	add	r2, r3
 80048e0:	693b      	ldr	r3, [r7, #16]
 80048e2:	3304      	adds	r3, #4
 80048e4:	4619      	mov	r1, r3
 80048e6:	4610      	mov	r0, r2
 80048e8:	f7fe fbd5 	bl	8003096 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80048ec:	2301      	movs	r3, #1
 80048ee:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80048f0:	697b      	ldr	r3, [r7, #20]
	}
 80048f2:	4618      	mov	r0, r3
 80048f4:	3718      	adds	r7, #24
 80048f6:	46bd      	mov	sp, r7
 80048f8:	bd80      	pop	{r7, pc}
 80048fa:	bf00      	nop
 80048fc:	200007c4 	.word	0x200007c4
 8004900:	20000ca0 	.word	0x20000ca0
 8004904:	200007c8 	.word	0x200007c8

08004908 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004908:	b580      	push	{r7, lr}
 800490a:	b084      	sub	sp, #16
 800490c:	af00      	add	r7, sp, #0
 800490e:	6078      	str	r0, [r7, #4]
 8004910:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004912:	4b21      	ldr	r3, [pc, #132]	@ (8004998 <prvAddCurrentTaskToDelayedList+0x90>)
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004918:	4b20      	ldr	r3, [pc, #128]	@ (800499c <prvAddCurrentTaskToDelayedList+0x94>)
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	3304      	adds	r3, #4
 800491e:	4618      	mov	r0, r3
 8004920:	f7fe fc16 	bl	8003150 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	f1b3 3fff 	cmp.w	r3, #4294967295
 800492a:	d10a      	bne.n	8004942 <prvAddCurrentTaskToDelayedList+0x3a>
 800492c:	683b      	ldr	r3, [r7, #0]
 800492e:	2b00      	cmp	r3, #0
 8004930:	d007      	beq.n	8004942 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004932:	4b1a      	ldr	r3, [pc, #104]	@ (800499c <prvAddCurrentTaskToDelayedList+0x94>)
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	3304      	adds	r3, #4
 8004938:	4619      	mov	r1, r3
 800493a:	4819      	ldr	r0, [pc, #100]	@ (80049a0 <prvAddCurrentTaskToDelayedList+0x98>)
 800493c:	f7fe fbab 	bl	8003096 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004940:	e026      	b.n	8004990 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004942:	68fa      	ldr	r2, [r7, #12]
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	4413      	add	r3, r2
 8004948:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800494a:	4b14      	ldr	r3, [pc, #80]	@ (800499c <prvAddCurrentTaskToDelayedList+0x94>)
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	68ba      	ldr	r2, [r7, #8]
 8004950:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004952:	68ba      	ldr	r2, [r7, #8]
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	429a      	cmp	r2, r3
 8004958:	d209      	bcs.n	800496e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800495a:	4b12      	ldr	r3, [pc, #72]	@ (80049a4 <prvAddCurrentTaskToDelayedList+0x9c>)
 800495c:	681a      	ldr	r2, [r3, #0]
 800495e:	4b0f      	ldr	r3, [pc, #60]	@ (800499c <prvAddCurrentTaskToDelayedList+0x94>)
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	3304      	adds	r3, #4
 8004964:	4619      	mov	r1, r3
 8004966:	4610      	mov	r0, r2
 8004968:	f7fe fbb9 	bl	80030de <vListInsert>
}
 800496c:	e010      	b.n	8004990 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800496e:	4b0e      	ldr	r3, [pc, #56]	@ (80049a8 <prvAddCurrentTaskToDelayedList+0xa0>)
 8004970:	681a      	ldr	r2, [r3, #0]
 8004972:	4b0a      	ldr	r3, [pc, #40]	@ (800499c <prvAddCurrentTaskToDelayedList+0x94>)
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	3304      	adds	r3, #4
 8004978:	4619      	mov	r1, r3
 800497a:	4610      	mov	r0, r2
 800497c:	f7fe fbaf 	bl	80030de <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004980:	4b0a      	ldr	r3, [pc, #40]	@ (80049ac <prvAddCurrentTaskToDelayedList+0xa4>)
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	68ba      	ldr	r2, [r7, #8]
 8004986:	429a      	cmp	r2, r3
 8004988:	d202      	bcs.n	8004990 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800498a:	4a08      	ldr	r2, [pc, #32]	@ (80049ac <prvAddCurrentTaskToDelayedList+0xa4>)
 800498c:	68bb      	ldr	r3, [r7, #8]
 800498e:	6013      	str	r3, [r2, #0]
}
 8004990:	bf00      	nop
 8004992:	3710      	adds	r7, #16
 8004994:	46bd      	mov	sp, r7
 8004996:	bd80      	pop	{r7, pc}
 8004998:	20000c9c 	.word	0x20000c9c
 800499c:	200007c4 	.word	0x200007c4
 80049a0:	20000c84 	.word	0x20000c84
 80049a4:	20000c54 	.word	0x20000c54
 80049a8:	20000c50 	.word	0x20000c50
 80049ac:	20000cb8 	.word	0x20000cb8

080049b0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80049b0:	b580      	push	{r7, lr}
 80049b2:	b08a      	sub	sp, #40	@ 0x28
 80049b4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80049b6:	2300      	movs	r3, #0
 80049b8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80049ba:	f000 fb13 	bl	8004fe4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80049be:	4b1d      	ldr	r3, [pc, #116]	@ (8004a34 <xTimerCreateTimerTask+0x84>)
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d021      	beq.n	8004a0a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80049c6:	2300      	movs	r3, #0
 80049c8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80049ca:	2300      	movs	r3, #0
 80049cc:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80049ce:	1d3a      	adds	r2, r7, #4
 80049d0:	f107 0108 	add.w	r1, r7, #8
 80049d4:	f107 030c 	add.w	r3, r7, #12
 80049d8:	4618      	mov	r0, r3
 80049da:	f7fe fb15 	bl	8003008 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80049de:	6879      	ldr	r1, [r7, #4]
 80049e0:	68bb      	ldr	r3, [r7, #8]
 80049e2:	68fa      	ldr	r2, [r7, #12]
 80049e4:	9202      	str	r2, [sp, #8]
 80049e6:	9301      	str	r3, [sp, #4]
 80049e8:	2302      	movs	r3, #2
 80049ea:	9300      	str	r3, [sp, #0]
 80049ec:	2300      	movs	r3, #0
 80049ee:	460a      	mov	r2, r1
 80049f0:	4911      	ldr	r1, [pc, #68]	@ (8004a38 <xTimerCreateTimerTask+0x88>)
 80049f2:	4812      	ldr	r0, [pc, #72]	@ (8004a3c <xTimerCreateTimerTask+0x8c>)
 80049f4:	f7ff f8d0 	bl	8003b98 <xTaskCreateStatic>
 80049f8:	4603      	mov	r3, r0
 80049fa:	4a11      	ldr	r2, [pc, #68]	@ (8004a40 <xTimerCreateTimerTask+0x90>)
 80049fc:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80049fe:	4b10      	ldr	r3, [pc, #64]	@ (8004a40 <xTimerCreateTimerTask+0x90>)
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d001      	beq.n	8004a0a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8004a06:	2301      	movs	r3, #1
 8004a08:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8004a0a:	697b      	ldr	r3, [r7, #20]
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d10b      	bne.n	8004a28 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8004a10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a14:	f383 8811 	msr	BASEPRI, r3
 8004a18:	f3bf 8f6f 	isb	sy
 8004a1c:	f3bf 8f4f 	dsb	sy
 8004a20:	613b      	str	r3, [r7, #16]
}
 8004a22:	bf00      	nop
 8004a24:	bf00      	nop
 8004a26:	e7fd      	b.n	8004a24 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8004a28:	697b      	ldr	r3, [r7, #20]
}
 8004a2a:	4618      	mov	r0, r3
 8004a2c:	3718      	adds	r7, #24
 8004a2e:	46bd      	mov	sp, r7
 8004a30:	bd80      	pop	{r7, pc}
 8004a32:	bf00      	nop
 8004a34:	20000cf4 	.word	0x20000cf4
 8004a38:	0800598c 	.word	0x0800598c
 8004a3c:	08004b7d 	.word	0x08004b7d
 8004a40:	20000cf8 	.word	0x20000cf8

08004a44 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8004a44:	b580      	push	{r7, lr}
 8004a46:	b08a      	sub	sp, #40	@ 0x28
 8004a48:	af00      	add	r7, sp, #0
 8004a4a:	60f8      	str	r0, [r7, #12]
 8004a4c:	60b9      	str	r1, [r7, #8]
 8004a4e:	607a      	str	r2, [r7, #4]
 8004a50:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8004a52:	2300      	movs	r3, #0
 8004a54:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d10b      	bne.n	8004a74 <xTimerGenericCommand+0x30>
	__asm volatile
 8004a5c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a60:	f383 8811 	msr	BASEPRI, r3
 8004a64:	f3bf 8f6f 	isb	sy
 8004a68:	f3bf 8f4f 	dsb	sy
 8004a6c:	623b      	str	r3, [r7, #32]
}
 8004a6e:	bf00      	nop
 8004a70:	bf00      	nop
 8004a72:	e7fd      	b.n	8004a70 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8004a74:	4b19      	ldr	r3, [pc, #100]	@ (8004adc <xTimerGenericCommand+0x98>)
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d02a      	beq.n	8004ad2 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8004a7c:	68bb      	ldr	r3, [r7, #8]
 8004a7e:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8004a88:	68bb      	ldr	r3, [r7, #8]
 8004a8a:	2b05      	cmp	r3, #5
 8004a8c:	dc18      	bgt.n	8004ac0 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8004a8e:	f7ff fead 	bl	80047ec <xTaskGetSchedulerState>
 8004a92:	4603      	mov	r3, r0
 8004a94:	2b02      	cmp	r3, #2
 8004a96:	d109      	bne.n	8004aac <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8004a98:	4b10      	ldr	r3, [pc, #64]	@ (8004adc <xTimerGenericCommand+0x98>)
 8004a9a:	6818      	ldr	r0, [r3, #0]
 8004a9c:	f107 0110 	add.w	r1, r7, #16
 8004aa0:	2300      	movs	r3, #0
 8004aa2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004aa4:	f7fe fc88 	bl	80033b8 <xQueueGenericSend>
 8004aa8:	6278      	str	r0, [r7, #36]	@ 0x24
 8004aaa:	e012      	b.n	8004ad2 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8004aac:	4b0b      	ldr	r3, [pc, #44]	@ (8004adc <xTimerGenericCommand+0x98>)
 8004aae:	6818      	ldr	r0, [r3, #0]
 8004ab0:	f107 0110 	add.w	r1, r7, #16
 8004ab4:	2300      	movs	r3, #0
 8004ab6:	2200      	movs	r2, #0
 8004ab8:	f7fe fc7e 	bl	80033b8 <xQueueGenericSend>
 8004abc:	6278      	str	r0, [r7, #36]	@ 0x24
 8004abe:	e008      	b.n	8004ad2 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8004ac0:	4b06      	ldr	r3, [pc, #24]	@ (8004adc <xTimerGenericCommand+0x98>)
 8004ac2:	6818      	ldr	r0, [r3, #0]
 8004ac4:	f107 0110 	add.w	r1, r7, #16
 8004ac8:	2300      	movs	r3, #0
 8004aca:	683a      	ldr	r2, [r7, #0]
 8004acc:	f7fe fd76 	bl	80035bc <xQueueGenericSendFromISR>
 8004ad0:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8004ad2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8004ad4:	4618      	mov	r0, r3
 8004ad6:	3728      	adds	r7, #40	@ 0x28
 8004ad8:	46bd      	mov	sp, r7
 8004ada:	bd80      	pop	{r7, pc}
 8004adc:	20000cf4 	.word	0x20000cf4

08004ae0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8004ae0:	b580      	push	{r7, lr}
 8004ae2:	b088      	sub	sp, #32
 8004ae4:	af02      	add	r7, sp, #8
 8004ae6:	6078      	str	r0, [r7, #4]
 8004ae8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004aea:	4b23      	ldr	r3, [pc, #140]	@ (8004b78 <prvProcessExpiredTimer+0x98>)
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	68db      	ldr	r3, [r3, #12]
 8004af0:	68db      	ldr	r3, [r3, #12]
 8004af2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004af4:	697b      	ldr	r3, [r7, #20]
 8004af6:	3304      	adds	r3, #4
 8004af8:	4618      	mov	r0, r3
 8004afa:	f7fe fb29 	bl	8003150 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004afe:	697b      	ldr	r3, [r7, #20]
 8004b00:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004b04:	f003 0304 	and.w	r3, r3, #4
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d023      	beq.n	8004b54 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8004b0c:	697b      	ldr	r3, [r7, #20]
 8004b0e:	699a      	ldr	r2, [r3, #24]
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	18d1      	adds	r1, r2, r3
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	683a      	ldr	r2, [r7, #0]
 8004b18:	6978      	ldr	r0, [r7, #20]
 8004b1a:	f000 f8d5 	bl	8004cc8 <prvInsertTimerInActiveList>
 8004b1e:	4603      	mov	r3, r0
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d020      	beq.n	8004b66 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004b24:	2300      	movs	r3, #0
 8004b26:	9300      	str	r3, [sp, #0]
 8004b28:	2300      	movs	r3, #0
 8004b2a:	687a      	ldr	r2, [r7, #4]
 8004b2c:	2100      	movs	r1, #0
 8004b2e:	6978      	ldr	r0, [r7, #20]
 8004b30:	f7ff ff88 	bl	8004a44 <xTimerGenericCommand>
 8004b34:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8004b36:	693b      	ldr	r3, [r7, #16]
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d114      	bne.n	8004b66 <prvProcessExpiredTimer+0x86>
	__asm volatile
 8004b3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b40:	f383 8811 	msr	BASEPRI, r3
 8004b44:	f3bf 8f6f 	isb	sy
 8004b48:	f3bf 8f4f 	dsb	sy
 8004b4c:	60fb      	str	r3, [r7, #12]
}
 8004b4e:	bf00      	nop
 8004b50:	bf00      	nop
 8004b52:	e7fd      	b.n	8004b50 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004b54:	697b      	ldr	r3, [r7, #20]
 8004b56:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004b5a:	f023 0301 	bic.w	r3, r3, #1
 8004b5e:	b2da      	uxtb	r2, r3
 8004b60:	697b      	ldr	r3, [r7, #20]
 8004b62:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004b66:	697b      	ldr	r3, [r7, #20]
 8004b68:	6a1b      	ldr	r3, [r3, #32]
 8004b6a:	6978      	ldr	r0, [r7, #20]
 8004b6c:	4798      	blx	r3
}
 8004b6e:	bf00      	nop
 8004b70:	3718      	adds	r7, #24
 8004b72:	46bd      	mov	sp, r7
 8004b74:	bd80      	pop	{r7, pc}
 8004b76:	bf00      	nop
 8004b78:	20000cec 	.word	0x20000cec

08004b7c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8004b7c:	b580      	push	{r7, lr}
 8004b7e:	b084      	sub	sp, #16
 8004b80:	af00      	add	r7, sp, #0
 8004b82:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004b84:	f107 0308 	add.w	r3, r7, #8
 8004b88:	4618      	mov	r0, r3
 8004b8a:	f000 f859 	bl	8004c40 <prvGetNextExpireTime>
 8004b8e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004b90:	68bb      	ldr	r3, [r7, #8]
 8004b92:	4619      	mov	r1, r3
 8004b94:	68f8      	ldr	r0, [r7, #12]
 8004b96:	f000 f805 	bl	8004ba4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8004b9a:	f000 f8d7 	bl	8004d4c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004b9e:	bf00      	nop
 8004ba0:	e7f0      	b.n	8004b84 <prvTimerTask+0x8>
	...

08004ba4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8004ba4:	b580      	push	{r7, lr}
 8004ba6:	b084      	sub	sp, #16
 8004ba8:	af00      	add	r7, sp, #0
 8004baa:	6078      	str	r0, [r7, #4]
 8004bac:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8004bae:	f7ff fa37 	bl	8004020 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004bb2:	f107 0308 	add.w	r3, r7, #8
 8004bb6:	4618      	mov	r0, r3
 8004bb8:	f000 f866 	bl	8004c88 <prvSampleTimeNow>
 8004bbc:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8004bbe:	68bb      	ldr	r3, [r7, #8]
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d130      	bne.n	8004c26 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004bc4:	683b      	ldr	r3, [r7, #0]
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d10a      	bne.n	8004be0 <prvProcessTimerOrBlockTask+0x3c>
 8004bca:	687a      	ldr	r2, [r7, #4]
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	429a      	cmp	r2, r3
 8004bd0:	d806      	bhi.n	8004be0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8004bd2:	f7ff fa33 	bl	800403c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8004bd6:	68f9      	ldr	r1, [r7, #12]
 8004bd8:	6878      	ldr	r0, [r7, #4]
 8004bda:	f7ff ff81 	bl	8004ae0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8004bde:	e024      	b.n	8004c2a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8004be0:	683b      	ldr	r3, [r7, #0]
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d008      	beq.n	8004bf8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8004be6:	4b13      	ldr	r3, [pc, #76]	@ (8004c34 <prvProcessTimerOrBlockTask+0x90>)
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d101      	bne.n	8004bf4 <prvProcessTimerOrBlockTask+0x50>
 8004bf0:	2301      	movs	r3, #1
 8004bf2:	e000      	b.n	8004bf6 <prvProcessTimerOrBlockTask+0x52>
 8004bf4:	2300      	movs	r3, #0
 8004bf6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004bf8:	4b0f      	ldr	r3, [pc, #60]	@ (8004c38 <prvProcessTimerOrBlockTask+0x94>)
 8004bfa:	6818      	ldr	r0, [r3, #0]
 8004bfc:	687a      	ldr	r2, [r7, #4]
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	1ad3      	subs	r3, r2, r3
 8004c02:	683a      	ldr	r2, [r7, #0]
 8004c04:	4619      	mov	r1, r3
 8004c06:	f7fe ff93 	bl	8003b30 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8004c0a:	f7ff fa17 	bl	800403c <xTaskResumeAll>
 8004c0e:	4603      	mov	r3, r0
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d10a      	bne.n	8004c2a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8004c14:	4b09      	ldr	r3, [pc, #36]	@ (8004c3c <prvProcessTimerOrBlockTask+0x98>)
 8004c16:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004c1a:	601a      	str	r2, [r3, #0]
 8004c1c:	f3bf 8f4f 	dsb	sy
 8004c20:	f3bf 8f6f 	isb	sy
}
 8004c24:	e001      	b.n	8004c2a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8004c26:	f7ff fa09 	bl	800403c <xTaskResumeAll>
}
 8004c2a:	bf00      	nop
 8004c2c:	3710      	adds	r7, #16
 8004c2e:	46bd      	mov	sp, r7
 8004c30:	bd80      	pop	{r7, pc}
 8004c32:	bf00      	nop
 8004c34:	20000cf0 	.word	0x20000cf0
 8004c38:	20000cf4 	.word	0x20000cf4
 8004c3c:	e000ed04 	.word	0xe000ed04

08004c40 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8004c40:	b480      	push	{r7}
 8004c42:	b085      	sub	sp, #20
 8004c44:	af00      	add	r7, sp, #0
 8004c46:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004c48:	4b0e      	ldr	r3, [pc, #56]	@ (8004c84 <prvGetNextExpireTime+0x44>)
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d101      	bne.n	8004c56 <prvGetNextExpireTime+0x16>
 8004c52:	2201      	movs	r2, #1
 8004c54:	e000      	b.n	8004c58 <prvGetNextExpireTime+0x18>
 8004c56:	2200      	movs	r2, #0
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d105      	bne.n	8004c70 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004c64:	4b07      	ldr	r3, [pc, #28]	@ (8004c84 <prvGetNextExpireTime+0x44>)
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	68db      	ldr	r3, [r3, #12]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	60fb      	str	r3, [r7, #12]
 8004c6e:	e001      	b.n	8004c74 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8004c70:	2300      	movs	r3, #0
 8004c72:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8004c74:	68fb      	ldr	r3, [r7, #12]
}
 8004c76:	4618      	mov	r0, r3
 8004c78:	3714      	adds	r7, #20
 8004c7a:	46bd      	mov	sp, r7
 8004c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c80:	4770      	bx	lr
 8004c82:	bf00      	nop
 8004c84:	20000cec 	.word	0x20000cec

08004c88 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8004c88:	b580      	push	{r7, lr}
 8004c8a:	b084      	sub	sp, #16
 8004c8c:	af00      	add	r7, sp, #0
 8004c8e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8004c90:	f7ff fa72 	bl	8004178 <xTaskGetTickCount>
 8004c94:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8004c96:	4b0b      	ldr	r3, [pc, #44]	@ (8004cc4 <prvSampleTimeNow+0x3c>)
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	68fa      	ldr	r2, [r7, #12]
 8004c9c:	429a      	cmp	r2, r3
 8004c9e:	d205      	bcs.n	8004cac <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8004ca0:	f000 f93a 	bl	8004f18 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	2201      	movs	r2, #1
 8004ca8:	601a      	str	r2, [r3, #0]
 8004caa:	e002      	b.n	8004cb2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	2200      	movs	r2, #0
 8004cb0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8004cb2:	4a04      	ldr	r2, [pc, #16]	@ (8004cc4 <prvSampleTimeNow+0x3c>)
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8004cb8:	68fb      	ldr	r3, [r7, #12]
}
 8004cba:	4618      	mov	r0, r3
 8004cbc:	3710      	adds	r7, #16
 8004cbe:	46bd      	mov	sp, r7
 8004cc0:	bd80      	pop	{r7, pc}
 8004cc2:	bf00      	nop
 8004cc4:	20000cfc 	.word	0x20000cfc

08004cc8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8004cc8:	b580      	push	{r7, lr}
 8004cca:	b086      	sub	sp, #24
 8004ccc:	af00      	add	r7, sp, #0
 8004cce:	60f8      	str	r0, [r7, #12]
 8004cd0:	60b9      	str	r1, [r7, #8]
 8004cd2:	607a      	str	r2, [r7, #4]
 8004cd4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8004cd6:	2300      	movs	r3, #0
 8004cd8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	68ba      	ldr	r2, [r7, #8]
 8004cde:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	68fa      	ldr	r2, [r7, #12]
 8004ce4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8004ce6:	68ba      	ldr	r2, [r7, #8]
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	429a      	cmp	r2, r3
 8004cec:	d812      	bhi.n	8004d14 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004cee:	687a      	ldr	r2, [r7, #4]
 8004cf0:	683b      	ldr	r3, [r7, #0]
 8004cf2:	1ad2      	subs	r2, r2, r3
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	699b      	ldr	r3, [r3, #24]
 8004cf8:	429a      	cmp	r2, r3
 8004cfa:	d302      	bcc.n	8004d02 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8004cfc:	2301      	movs	r3, #1
 8004cfe:	617b      	str	r3, [r7, #20]
 8004d00:	e01b      	b.n	8004d3a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8004d02:	4b10      	ldr	r3, [pc, #64]	@ (8004d44 <prvInsertTimerInActiveList+0x7c>)
 8004d04:	681a      	ldr	r2, [r3, #0]
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	3304      	adds	r3, #4
 8004d0a:	4619      	mov	r1, r3
 8004d0c:	4610      	mov	r0, r2
 8004d0e:	f7fe f9e6 	bl	80030de <vListInsert>
 8004d12:	e012      	b.n	8004d3a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004d14:	687a      	ldr	r2, [r7, #4]
 8004d16:	683b      	ldr	r3, [r7, #0]
 8004d18:	429a      	cmp	r2, r3
 8004d1a:	d206      	bcs.n	8004d2a <prvInsertTimerInActiveList+0x62>
 8004d1c:	68ba      	ldr	r2, [r7, #8]
 8004d1e:	683b      	ldr	r3, [r7, #0]
 8004d20:	429a      	cmp	r2, r3
 8004d22:	d302      	bcc.n	8004d2a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8004d24:	2301      	movs	r3, #1
 8004d26:	617b      	str	r3, [r7, #20]
 8004d28:	e007      	b.n	8004d3a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004d2a:	4b07      	ldr	r3, [pc, #28]	@ (8004d48 <prvInsertTimerInActiveList+0x80>)
 8004d2c:	681a      	ldr	r2, [r3, #0]
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	3304      	adds	r3, #4
 8004d32:	4619      	mov	r1, r3
 8004d34:	4610      	mov	r0, r2
 8004d36:	f7fe f9d2 	bl	80030de <vListInsert>
		}
	}

	return xProcessTimerNow;
 8004d3a:	697b      	ldr	r3, [r7, #20]
}
 8004d3c:	4618      	mov	r0, r3
 8004d3e:	3718      	adds	r7, #24
 8004d40:	46bd      	mov	sp, r7
 8004d42:	bd80      	pop	{r7, pc}
 8004d44:	20000cf0 	.word	0x20000cf0
 8004d48:	20000cec 	.word	0x20000cec

08004d4c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8004d4c:	b580      	push	{r7, lr}
 8004d4e:	b08e      	sub	sp, #56	@ 0x38
 8004d50:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004d52:	e0ce      	b.n	8004ef2 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	da19      	bge.n	8004d8e <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8004d5a:	1d3b      	adds	r3, r7, #4
 8004d5c:	3304      	adds	r3, #4
 8004d5e:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8004d60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d10b      	bne.n	8004d7e <prvProcessReceivedCommands+0x32>
	__asm volatile
 8004d66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d6a:	f383 8811 	msr	BASEPRI, r3
 8004d6e:	f3bf 8f6f 	isb	sy
 8004d72:	f3bf 8f4f 	dsb	sy
 8004d76:	61fb      	str	r3, [r7, #28]
}
 8004d78:	bf00      	nop
 8004d7a:	bf00      	nop
 8004d7c:	e7fd      	b.n	8004d7a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8004d7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004d84:	6850      	ldr	r0, [r2, #4]
 8004d86:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004d88:	6892      	ldr	r2, [r2, #8]
 8004d8a:	4611      	mov	r1, r2
 8004d8c:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	f2c0 80ae 	blt.w	8004ef2 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8004d9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d9c:	695b      	ldr	r3, [r3, #20]
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d004      	beq.n	8004dac <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004da2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004da4:	3304      	adds	r3, #4
 8004da6:	4618      	mov	r0, r3
 8004da8:	f7fe f9d2 	bl	8003150 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004dac:	463b      	mov	r3, r7
 8004dae:	4618      	mov	r0, r3
 8004db0:	f7ff ff6a 	bl	8004c88 <prvSampleTimeNow>
 8004db4:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	2b09      	cmp	r3, #9
 8004dba:	f200 8097 	bhi.w	8004eec <prvProcessReceivedCommands+0x1a0>
 8004dbe:	a201      	add	r2, pc, #4	@ (adr r2, 8004dc4 <prvProcessReceivedCommands+0x78>)
 8004dc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004dc4:	08004ded 	.word	0x08004ded
 8004dc8:	08004ded 	.word	0x08004ded
 8004dcc:	08004ded 	.word	0x08004ded
 8004dd0:	08004e63 	.word	0x08004e63
 8004dd4:	08004e77 	.word	0x08004e77
 8004dd8:	08004ec3 	.word	0x08004ec3
 8004ddc:	08004ded 	.word	0x08004ded
 8004de0:	08004ded 	.word	0x08004ded
 8004de4:	08004e63 	.word	0x08004e63
 8004de8:	08004e77 	.word	0x08004e77
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004dec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004dee:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004df2:	f043 0301 	orr.w	r3, r3, #1
 8004df6:	b2da      	uxtb	r2, r3
 8004df8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004dfa:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8004dfe:	68ba      	ldr	r2, [r7, #8]
 8004e00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e02:	699b      	ldr	r3, [r3, #24]
 8004e04:	18d1      	adds	r1, r2, r3
 8004e06:	68bb      	ldr	r3, [r7, #8]
 8004e08:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004e0a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004e0c:	f7ff ff5c 	bl	8004cc8 <prvInsertTimerInActiveList>
 8004e10:	4603      	mov	r3, r0
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d06c      	beq.n	8004ef0 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004e16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e18:	6a1b      	ldr	r3, [r3, #32]
 8004e1a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004e1c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004e1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e20:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004e24:	f003 0304 	and.w	r3, r3, #4
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d061      	beq.n	8004ef0 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8004e2c:	68ba      	ldr	r2, [r7, #8]
 8004e2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e30:	699b      	ldr	r3, [r3, #24]
 8004e32:	441a      	add	r2, r3
 8004e34:	2300      	movs	r3, #0
 8004e36:	9300      	str	r3, [sp, #0]
 8004e38:	2300      	movs	r3, #0
 8004e3a:	2100      	movs	r1, #0
 8004e3c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004e3e:	f7ff fe01 	bl	8004a44 <xTimerGenericCommand>
 8004e42:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8004e44:	6a3b      	ldr	r3, [r7, #32]
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d152      	bne.n	8004ef0 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8004e4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e4e:	f383 8811 	msr	BASEPRI, r3
 8004e52:	f3bf 8f6f 	isb	sy
 8004e56:	f3bf 8f4f 	dsb	sy
 8004e5a:	61bb      	str	r3, [r7, #24]
}
 8004e5c:	bf00      	nop
 8004e5e:	bf00      	nop
 8004e60:	e7fd      	b.n	8004e5e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004e62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e64:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004e68:	f023 0301 	bic.w	r3, r3, #1
 8004e6c:	b2da      	uxtb	r2, r3
 8004e6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e70:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8004e74:	e03d      	b.n	8004ef2 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004e76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e78:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004e7c:	f043 0301 	orr.w	r3, r3, #1
 8004e80:	b2da      	uxtb	r2, r3
 8004e82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e84:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8004e88:	68ba      	ldr	r2, [r7, #8]
 8004e8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e8c:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8004e8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e90:	699b      	ldr	r3, [r3, #24]
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d10b      	bne.n	8004eae <prvProcessReceivedCommands+0x162>
	__asm volatile
 8004e96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e9a:	f383 8811 	msr	BASEPRI, r3
 8004e9e:	f3bf 8f6f 	isb	sy
 8004ea2:	f3bf 8f4f 	dsb	sy
 8004ea6:	617b      	str	r3, [r7, #20]
}
 8004ea8:	bf00      	nop
 8004eaa:	bf00      	nop
 8004eac:	e7fd      	b.n	8004eaa <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8004eae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004eb0:	699a      	ldr	r2, [r3, #24]
 8004eb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004eb4:	18d1      	adds	r1, r2, r3
 8004eb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004eb8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004eba:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004ebc:	f7ff ff04 	bl	8004cc8 <prvInsertTimerInActiveList>
					break;
 8004ec0:	e017      	b.n	8004ef2 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8004ec2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ec4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004ec8:	f003 0302 	and.w	r3, r3, #2
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d103      	bne.n	8004ed8 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8004ed0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004ed2:	f000 fbe9 	bl	80056a8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8004ed6:	e00c      	b.n	8004ef2 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004ed8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004eda:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004ede:	f023 0301 	bic.w	r3, r3, #1
 8004ee2:	b2da      	uxtb	r2, r3
 8004ee4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ee6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8004eea:	e002      	b.n	8004ef2 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8004eec:	bf00      	nop
 8004eee:	e000      	b.n	8004ef2 <prvProcessReceivedCommands+0x1a6>
					break;
 8004ef0:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004ef2:	4b08      	ldr	r3, [pc, #32]	@ (8004f14 <prvProcessReceivedCommands+0x1c8>)
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	1d39      	adds	r1, r7, #4
 8004ef8:	2200      	movs	r2, #0
 8004efa:	4618      	mov	r0, r3
 8004efc:	f7fe fbfc 	bl	80036f8 <xQueueReceive>
 8004f00:	4603      	mov	r3, r0
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	f47f af26 	bne.w	8004d54 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8004f08:	bf00      	nop
 8004f0a:	bf00      	nop
 8004f0c:	3730      	adds	r7, #48	@ 0x30
 8004f0e:	46bd      	mov	sp, r7
 8004f10:	bd80      	pop	{r7, pc}
 8004f12:	bf00      	nop
 8004f14:	20000cf4 	.word	0x20000cf4

08004f18 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8004f18:	b580      	push	{r7, lr}
 8004f1a:	b088      	sub	sp, #32
 8004f1c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004f1e:	e049      	b.n	8004fb4 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004f20:	4b2e      	ldr	r3, [pc, #184]	@ (8004fdc <prvSwitchTimerLists+0xc4>)
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	68db      	ldr	r3, [r3, #12]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004f2a:	4b2c      	ldr	r3, [pc, #176]	@ (8004fdc <prvSwitchTimerLists+0xc4>)
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	68db      	ldr	r3, [r3, #12]
 8004f30:	68db      	ldr	r3, [r3, #12]
 8004f32:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	3304      	adds	r3, #4
 8004f38:	4618      	mov	r0, r3
 8004f3a:	f7fe f909 	bl	8003150 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	6a1b      	ldr	r3, [r3, #32]
 8004f42:	68f8      	ldr	r0, [r7, #12]
 8004f44:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004f4c:	f003 0304 	and.w	r3, r3, #4
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d02f      	beq.n	8004fb4 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	699b      	ldr	r3, [r3, #24]
 8004f58:	693a      	ldr	r2, [r7, #16]
 8004f5a:	4413      	add	r3, r2
 8004f5c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8004f5e:	68ba      	ldr	r2, [r7, #8]
 8004f60:	693b      	ldr	r3, [r7, #16]
 8004f62:	429a      	cmp	r2, r3
 8004f64:	d90e      	bls.n	8004f84 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	68ba      	ldr	r2, [r7, #8]
 8004f6a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	68fa      	ldr	r2, [r7, #12]
 8004f70:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004f72:	4b1a      	ldr	r3, [pc, #104]	@ (8004fdc <prvSwitchTimerLists+0xc4>)
 8004f74:	681a      	ldr	r2, [r3, #0]
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	3304      	adds	r3, #4
 8004f7a:	4619      	mov	r1, r3
 8004f7c:	4610      	mov	r0, r2
 8004f7e:	f7fe f8ae 	bl	80030de <vListInsert>
 8004f82:	e017      	b.n	8004fb4 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004f84:	2300      	movs	r3, #0
 8004f86:	9300      	str	r3, [sp, #0]
 8004f88:	2300      	movs	r3, #0
 8004f8a:	693a      	ldr	r2, [r7, #16]
 8004f8c:	2100      	movs	r1, #0
 8004f8e:	68f8      	ldr	r0, [r7, #12]
 8004f90:	f7ff fd58 	bl	8004a44 <xTimerGenericCommand>
 8004f94:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d10b      	bne.n	8004fb4 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8004f9c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004fa0:	f383 8811 	msr	BASEPRI, r3
 8004fa4:	f3bf 8f6f 	isb	sy
 8004fa8:	f3bf 8f4f 	dsb	sy
 8004fac:	603b      	str	r3, [r7, #0]
}
 8004fae:	bf00      	nop
 8004fb0:	bf00      	nop
 8004fb2:	e7fd      	b.n	8004fb0 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004fb4:	4b09      	ldr	r3, [pc, #36]	@ (8004fdc <prvSwitchTimerLists+0xc4>)
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d1b0      	bne.n	8004f20 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8004fbe:	4b07      	ldr	r3, [pc, #28]	@ (8004fdc <prvSwitchTimerLists+0xc4>)
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8004fc4:	4b06      	ldr	r3, [pc, #24]	@ (8004fe0 <prvSwitchTimerLists+0xc8>)
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	4a04      	ldr	r2, [pc, #16]	@ (8004fdc <prvSwitchTimerLists+0xc4>)
 8004fca:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8004fcc:	4a04      	ldr	r2, [pc, #16]	@ (8004fe0 <prvSwitchTimerLists+0xc8>)
 8004fce:	697b      	ldr	r3, [r7, #20]
 8004fd0:	6013      	str	r3, [r2, #0]
}
 8004fd2:	bf00      	nop
 8004fd4:	3718      	adds	r7, #24
 8004fd6:	46bd      	mov	sp, r7
 8004fd8:	bd80      	pop	{r7, pc}
 8004fda:	bf00      	nop
 8004fdc:	20000cec 	.word	0x20000cec
 8004fe0:	20000cf0 	.word	0x20000cf0

08004fe4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8004fe4:	b580      	push	{r7, lr}
 8004fe6:	b082      	sub	sp, #8
 8004fe8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8004fea:	f000 f96d 	bl	80052c8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8004fee:	4b15      	ldr	r3, [pc, #84]	@ (8005044 <prvCheckForValidListAndQueue+0x60>)
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d120      	bne.n	8005038 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8004ff6:	4814      	ldr	r0, [pc, #80]	@ (8005048 <prvCheckForValidListAndQueue+0x64>)
 8004ff8:	f7fe f820 	bl	800303c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8004ffc:	4813      	ldr	r0, [pc, #76]	@ (800504c <prvCheckForValidListAndQueue+0x68>)
 8004ffe:	f7fe f81d 	bl	800303c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8005002:	4b13      	ldr	r3, [pc, #76]	@ (8005050 <prvCheckForValidListAndQueue+0x6c>)
 8005004:	4a10      	ldr	r2, [pc, #64]	@ (8005048 <prvCheckForValidListAndQueue+0x64>)
 8005006:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8005008:	4b12      	ldr	r3, [pc, #72]	@ (8005054 <prvCheckForValidListAndQueue+0x70>)
 800500a:	4a10      	ldr	r2, [pc, #64]	@ (800504c <prvCheckForValidListAndQueue+0x68>)
 800500c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800500e:	2300      	movs	r3, #0
 8005010:	9300      	str	r3, [sp, #0]
 8005012:	4b11      	ldr	r3, [pc, #68]	@ (8005058 <prvCheckForValidListAndQueue+0x74>)
 8005014:	4a11      	ldr	r2, [pc, #68]	@ (800505c <prvCheckForValidListAndQueue+0x78>)
 8005016:	2110      	movs	r1, #16
 8005018:	200a      	movs	r0, #10
 800501a:	f7fe f92d 	bl	8003278 <xQueueGenericCreateStatic>
 800501e:	4603      	mov	r3, r0
 8005020:	4a08      	ldr	r2, [pc, #32]	@ (8005044 <prvCheckForValidListAndQueue+0x60>)
 8005022:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8005024:	4b07      	ldr	r3, [pc, #28]	@ (8005044 <prvCheckForValidListAndQueue+0x60>)
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	2b00      	cmp	r3, #0
 800502a:	d005      	beq.n	8005038 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800502c:	4b05      	ldr	r3, [pc, #20]	@ (8005044 <prvCheckForValidListAndQueue+0x60>)
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	490b      	ldr	r1, [pc, #44]	@ (8005060 <prvCheckForValidListAndQueue+0x7c>)
 8005032:	4618      	mov	r0, r3
 8005034:	f7fe fd52 	bl	8003adc <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005038:	f000 f978 	bl	800532c <vPortExitCritical>
}
 800503c:	bf00      	nop
 800503e:	46bd      	mov	sp, r7
 8005040:	bd80      	pop	{r7, pc}
 8005042:	bf00      	nop
 8005044:	20000cf4 	.word	0x20000cf4
 8005048:	20000cc4 	.word	0x20000cc4
 800504c:	20000cd8 	.word	0x20000cd8
 8005050:	20000cec 	.word	0x20000cec
 8005054:	20000cf0 	.word	0x20000cf0
 8005058:	20000da0 	.word	0x20000da0
 800505c:	20000d00 	.word	0x20000d00
 8005060:	08005994 	.word	0x08005994

08005064 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005064:	b480      	push	{r7}
 8005066:	b085      	sub	sp, #20
 8005068:	af00      	add	r7, sp, #0
 800506a:	60f8      	str	r0, [r7, #12]
 800506c:	60b9      	str	r1, [r7, #8]
 800506e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	3b04      	subs	r3, #4
 8005074:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800507c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	3b04      	subs	r3, #4
 8005082:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005084:	68bb      	ldr	r3, [r7, #8]
 8005086:	f023 0201 	bic.w	r2, r3, #1
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	3b04      	subs	r3, #4
 8005092:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005094:	4a0c      	ldr	r2, [pc, #48]	@ (80050c8 <pxPortInitialiseStack+0x64>)
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	3b14      	subs	r3, #20
 800509e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80050a0:	687a      	ldr	r2, [r7, #4]
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	3b04      	subs	r3, #4
 80050aa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	f06f 0202 	mvn.w	r2, #2
 80050b2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	3b20      	subs	r3, #32
 80050b8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80050ba:	68fb      	ldr	r3, [r7, #12]
}
 80050bc:	4618      	mov	r0, r3
 80050be:	3714      	adds	r7, #20
 80050c0:	46bd      	mov	sp, r7
 80050c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c6:	4770      	bx	lr
 80050c8:	080050cd 	.word	0x080050cd

080050cc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80050cc:	b480      	push	{r7}
 80050ce:	b085      	sub	sp, #20
 80050d0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80050d2:	2300      	movs	r3, #0
 80050d4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80050d6:	4b13      	ldr	r3, [pc, #76]	@ (8005124 <prvTaskExitError+0x58>)
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050de:	d00b      	beq.n	80050f8 <prvTaskExitError+0x2c>
	__asm volatile
 80050e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80050e4:	f383 8811 	msr	BASEPRI, r3
 80050e8:	f3bf 8f6f 	isb	sy
 80050ec:	f3bf 8f4f 	dsb	sy
 80050f0:	60fb      	str	r3, [r7, #12]
}
 80050f2:	bf00      	nop
 80050f4:	bf00      	nop
 80050f6:	e7fd      	b.n	80050f4 <prvTaskExitError+0x28>
	__asm volatile
 80050f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80050fc:	f383 8811 	msr	BASEPRI, r3
 8005100:	f3bf 8f6f 	isb	sy
 8005104:	f3bf 8f4f 	dsb	sy
 8005108:	60bb      	str	r3, [r7, #8]
}
 800510a:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800510c:	bf00      	nop
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	2b00      	cmp	r3, #0
 8005112:	d0fc      	beq.n	800510e <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005114:	bf00      	nop
 8005116:	bf00      	nop
 8005118:	3714      	adds	r7, #20
 800511a:	46bd      	mov	sp, r7
 800511c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005120:	4770      	bx	lr
 8005122:	bf00      	nop
 8005124:	2000000c 	.word	0x2000000c
	...

08005130 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005130:	4b07      	ldr	r3, [pc, #28]	@ (8005150 <pxCurrentTCBConst2>)
 8005132:	6819      	ldr	r1, [r3, #0]
 8005134:	6808      	ldr	r0, [r1, #0]
 8005136:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800513a:	f380 8809 	msr	PSP, r0
 800513e:	f3bf 8f6f 	isb	sy
 8005142:	f04f 0000 	mov.w	r0, #0
 8005146:	f380 8811 	msr	BASEPRI, r0
 800514a:	4770      	bx	lr
 800514c:	f3af 8000 	nop.w

08005150 <pxCurrentTCBConst2>:
 8005150:	200007c4 	.word	0x200007c4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005154:	bf00      	nop
 8005156:	bf00      	nop

08005158 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005158:	4808      	ldr	r0, [pc, #32]	@ (800517c <prvPortStartFirstTask+0x24>)
 800515a:	6800      	ldr	r0, [r0, #0]
 800515c:	6800      	ldr	r0, [r0, #0]
 800515e:	f380 8808 	msr	MSP, r0
 8005162:	f04f 0000 	mov.w	r0, #0
 8005166:	f380 8814 	msr	CONTROL, r0
 800516a:	b662      	cpsie	i
 800516c:	b661      	cpsie	f
 800516e:	f3bf 8f4f 	dsb	sy
 8005172:	f3bf 8f6f 	isb	sy
 8005176:	df00      	svc	0
 8005178:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800517a:	bf00      	nop
 800517c:	e000ed08 	.word	0xe000ed08

08005180 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005180:	b580      	push	{r7, lr}
 8005182:	b086      	sub	sp, #24
 8005184:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005186:	4b47      	ldr	r3, [pc, #284]	@ (80052a4 <xPortStartScheduler+0x124>)
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	4a47      	ldr	r2, [pc, #284]	@ (80052a8 <xPortStartScheduler+0x128>)
 800518c:	4293      	cmp	r3, r2
 800518e:	d10b      	bne.n	80051a8 <xPortStartScheduler+0x28>
	__asm volatile
 8005190:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005194:	f383 8811 	msr	BASEPRI, r3
 8005198:	f3bf 8f6f 	isb	sy
 800519c:	f3bf 8f4f 	dsb	sy
 80051a0:	613b      	str	r3, [r7, #16]
}
 80051a2:	bf00      	nop
 80051a4:	bf00      	nop
 80051a6:	e7fd      	b.n	80051a4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80051a8:	4b3e      	ldr	r3, [pc, #248]	@ (80052a4 <xPortStartScheduler+0x124>)
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	4a3f      	ldr	r2, [pc, #252]	@ (80052ac <xPortStartScheduler+0x12c>)
 80051ae:	4293      	cmp	r3, r2
 80051b0:	d10b      	bne.n	80051ca <xPortStartScheduler+0x4a>
	__asm volatile
 80051b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80051b6:	f383 8811 	msr	BASEPRI, r3
 80051ba:	f3bf 8f6f 	isb	sy
 80051be:	f3bf 8f4f 	dsb	sy
 80051c2:	60fb      	str	r3, [r7, #12]
}
 80051c4:	bf00      	nop
 80051c6:	bf00      	nop
 80051c8:	e7fd      	b.n	80051c6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80051ca:	4b39      	ldr	r3, [pc, #228]	@ (80052b0 <xPortStartScheduler+0x130>)
 80051cc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80051ce:	697b      	ldr	r3, [r7, #20]
 80051d0:	781b      	ldrb	r3, [r3, #0]
 80051d2:	b2db      	uxtb	r3, r3
 80051d4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80051d6:	697b      	ldr	r3, [r7, #20]
 80051d8:	22ff      	movs	r2, #255	@ 0xff
 80051da:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80051dc:	697b      	ldr	r3, [r7, #20]
 80051de:	781b      	ldrb	r3, [r3, #0]
 80051e0:	b2db      	uxtb	r3, r3
 80051e2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80051e4:	78fb      	ldrb	r3, [r7, #3]
 80051e6:	b2db      	uxtb	r3, r3
 80051e8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80051ec:	b2da      	uxtb	r2, r3
 80051ee:	4b31      	ldr	r3, [pc, #196]	@ (80052b4 <xPortStartScheduler+0x134>)
 80051f0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80051f2:	4b31      	ldr	r3, [pc, #196]	@ (80052b8 <xPortStartScheduler+0x138>)
 80051f4:	2207      	movs	r2, #7
 80051f6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80051f8:	e009      	b.n	800520e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 80051fa:	4b2f      	ldr	r3, [pc, #188]	@ (80052b8 <xPortStartScheduler+0x138>)
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	3b01      	subs	r3, #1
 8005200:	4a2d      	ldr	r2, [pc, #180]	@ (80052b8 <xPortStartScheduler+0x138>)
 8005202:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005204:	78fb      	ldrb	r3, [r7, #3]
 8005206:	b2db      	uxtb	r3, r3
 8005208:	005b      	lsls	r3, r3, #1
 800520a:	b2db      	uxtb	r3, r3
 800520c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800520e:	78fb      	ldrb	r3, [r7, #3]
 8005210:	b2db      	uxtb	r3, r3
 8005212:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005216:	2b80      	cmp	r3, #128	@ 0x80
 8005218:	d0ef      	beq.n	80051fa <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800521a:	4b27      	ldr	r3, [pc, #156]	@ (80052b8 <xPortStartScheduler+0x138>)
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	f1c3 0307 	rsb	r3, r3, #7
 8005222:	2b04      	cmp	r3, #4
 8005224:	d00b      	beq.n	800523e <xPortStartScheduler+0xbe>
	__asm volatile
 8005226:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800522a:	f383 8811 	msr	BASEPRI, r3
 800522e:	f3bf 8f6f 	isb	sy
 8005232:	f3bf 8f4f 	dsb	sy
 8005236:	60bb      	str	r3, [r7, #8]
}
 8005238:	bf00      	nop
 800523a:	bf00      	nop
 800523c:	e7fd      	b.n	800523a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800523e:	4b1e      	ldr	r3, [pc, #120]	@ (80052b8 <xPortStartScheduler+0x138>)
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	021b      	lsls	r3, r3, #8
 8005244:	4a1c      	ldr	r2, [pc, #112]	@ (80052b8 <xPortStartScheduler+0x138>)
 8005246:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005248:	4b1b      	ldr	r3, [pc, #108]	@ (80052b8 <xPortStartScheduler+0x138>)
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005250:	4a19      	ldr	r2, [pc, #100]	@ (80052b8 <xPortStartScheduler+0x138>)
 8005252:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	b2da      	uxtb	r2, r3
 8005258:	697b      	ldr	r3, [r7, #20]
 800525a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800525c:	4b17      	ldr	r3, [pc, #92]	@ (80052bc <xPortStartScheduler+0x13c>)
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	4a16      	ldr	r2, [pc, #88]	@ (80052bc <xPortStartScheduler+0x13c>)
 8005262:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8005266:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005268:	4b14      	ldr	r3, [pc, #80]	@ (80052bc <xPortStartScheduler+0x13c>)
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	4a13      	ldr	r2, [pc, #76]	@ (80052bc <xPortStartScheduler+0x13c>)
 800526e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8005272:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005274:	f000 f8da 	bl	800542c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005278:	4b11      	ldr	r3, [pc, #68]	@ (80052c0 <xPortStartScheduler+0x140>)
 800527a:	2200      	movs	r2, #0
 800527c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800527e:	f000 f8f9 	bl	8005474 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005282:	4b10      	ldr	r3, [pc, #64]	@ (80052c4 <xPortStartScheduler+0x144>)
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	4a0f      	ldr	r2, [pc, #60]	@ (80052c4 <xPortStartScheduler+0x144>)
 8005288:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800528c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800528e:	f7ff ff63 	bl	8005158 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005292:	f7ff f83b 	bl	800430c <vTaskSwitchContext>
	prvTaskExitError();
 8005296:	f7ff ff19 	bl	80050cc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800529a:	2300      	movs	r3, #0
}
 800529c:	4618      	mov	r0, r3
 800529e:	3718      	adds	r7, #24
 80052a0:	46bd      	mov	sp, r7
 80052a2:	bd80      	pop	{r7, pc}
 80052a4:	e000ed00 	.word	0xe000ed00
 80052a8:	410fc271 	.word	0x410fc271
 80052ac:	410fc270 	.word	0x410fc270
 80052b0:	e000e400 	.word	0xe000e400
 80052b4:	20000df0 	.word	0x20000df0
 80052b8:	20000df4 	.word	0x20000df4
 80052bc:	e000ed20 	.word	0xe000ed20
 80052c0:	2000000c 	.word	0x2000000c
 80052c4:	e000ef34 	.word	0xe000ef34

080052c8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80052c8:	b480      	push	{r7}
 80052ca:	b083      	sub	sp, #12
 80052cc:	af00      	add	r7, sp, #0
	__asm volatile
 80052ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80052d2:	f383 8811 	msr	BASEPRI, r3
 80052d6:	f3bf 8f6f 	isb	sy
 80052da:	f3bf 8f4f 	dsb	sy
 80052de:	607b      	str	r3, [r7, #4]
}
 80052e0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80052e2:	4b10      	ldr	r3, [pc, #64]	@ (8005324 <vPortEnterCritical+0x5c>)
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	3301      	adds	r3, #1
 80052e8:	4a0e      	ldr	r2, [pc, #56]	@ (8005324 <vPortEnterCritical+0x5c>)
 80052ea:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80052ec:	4b0d      	ldr	r3, [pc, #52]	@ (8005324 <vPortEnterCritical+0x5c>)
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	2b01      	cmp	r3, #1
 80052f2:	d110      	bne.n	8005316 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80052f4:	4b0c      	ldr	r3, [pc, #48]	@ (8005328 <vPortEnterCritical+0x60>)
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	b2db      	uxtb	r3, r3
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d00b      	beq.n	8005316 <vPortEnterCritical+0x4e>
	__asm volatile
 80052fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005302:	f383 8811 	msr	BASEPRI, r3
 8005306:	f3bf 8f6f 	isb	sy
 800530a:	f3bf 8f4f 	dsb	sy
 800530e:	603b      	str	r3, [r7, #0]
}
 8005310:	bf00      	nop
 8005312:	bf00      	nop
 8005314:	e7fd      	b.n	8005312 <vPortEnterCritical+0x4a>
	}
}
 8005316:	bf00      	nop
 8005318:	370c      	adds	r7, #12
 800531a:	46bd      	mov	sp, r7
 800531c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005320:	4770      	bx	lr
 8005322:	bf00      	nop
 8005324:	2000000c 	.word	0x2000000c
 8005328:	e000ed04 	.word	0xe000ed04

0800532c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800532c:	b480      	push	{r7}
 800532e:	b083      	sub	sp, #12
 8005330:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005332:	4b12      	ldr	r3, [pc, #72]	@ (800537c <vPortExitCritical+0x50>)
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	2b00      	cmp	r3, #0
 8005338:	d10b      	bne.n	8005352 <vPortExitCritical+0x26>
	__asm volatile
 800533a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800533e:	f383 8811 	msr	BASEPRI, r3
 8005342:	f3bf 8f6f 	isb	sy
 8005346:	f3bf 8f4f 	dsb	sy
 800534a:	607b      	str	r3, [r7, #4]
}
 800534c:	bf00      	nop
 800534e:	bf00      	nop
 8005350:	e7fd      	b.n	800534e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005352:	4b0a      	ldr	r3, [pc, #40]	@ (800537c <vPortExitCritical+0x50>)
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	3b01      	subs	r3, #1
 8005358:	4a08      	ldr	r2, [pc, #32]	@ (800537c <vPortExitCritical+0x50>)
 800535a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800535c:	4b07      	ldr	r3, [pc, #28]	@ (800537c <vPortExitCritical+0x50>)
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	2b00      	cmp	r3, #0
 8005362:	d105      	bne.n	8005370 <vPortExitCritical+0x44>
 8005364:	2300      	movs	r3, #0
 8005366:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005368:	683b      	ldr	r3, [r7, #0]
 800536a:	f383 8811 	msr	BASEPRI, r3
}
 800536e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005370:	bf00      	nop
 8005372:	370c      	adds	r7, #12
 8005374:	46bd      	mov	sp, r7
 8005376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800537a:	4770      	bx	lr
 800537c:	2000000c 	.word	0x2000000c

08005380 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005380:	f3ef 8009 	mrs	r0, PSP
 8005384:	f3bf 8f6f 	isb	sy
 8005388:	4b15      	ldr	r3, [pc, #84]	@ (80053e0 <pxCurrentTCBConst>)
 800538a:	681a      	ldr	r2, [r3, #0]
 800538c:	f01e 0f10 	tst.w	lr, #16
 8005390:	bf08      	it	eq
 8005392:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005396:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800539a:	6010      	str	r0, [r2, #0]
 800539c:	e92d 0009 	stmdb	sp!, {r0, r3}
 80053a0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80053a4:	f380 8811 	msr	BASEPRI, r0
 80053a8:	f3bf 8f4f 	dsb	sy
 80053ac:	f3bf 8f6f 	isb	sy
 80053b0:	f7fe ffac 	bl	800430c <vTaskSwitchContext>
 80053b4:	f04f 0000 	mov.w	r0, #0
 80053b8:	f380 8811 	msr	BASEPRI, r0
 80053bc:	bc09      	pop	{r0, r3}
 80053be:	6819      	ldr	r1, [r3, #0]
 80053c0:	6808      	ldr	r0, [r1, #0]
 80053c2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80053c6:	f01e 0f10 	tst.w	lr, #16
 80053ca:	bf08      	it	eq
 80053cc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80053d0:	f380 8809 	msr	PSP, r0
 80053d4:	f3bf 8f6f 	isb	sy
 80053d8:	4770      	bx	lr
 80053da:	bf00      	nop
 80053dc:	f3af 8000 	nop.w

080053e0 <pxCurrentTCBConst>:
 80053e0:	200007c4 	.word	0x200007c4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80053e4:	bf00      	nop
 80053e6:	bf00      	nop

080053e8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80053e8:	b580      	push	{r7, lr}
 80053ea:	b082      	sub	sp, #8
 80053ec:	af00      	add	r7, sp, #0
	__asm volatile
 80053ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80053f2:	f383 8811 	msr	BASEPRI, r3
 80053f6:	f3bf 8f6f 	isb	sy
 80053fa:	f3bf 8f4f 	dsb	sy
 80053fe:	607b      	str	r3, [r7, #4]
}
 8005400:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005402:	f7fe fec9 	bl	8004198 <xTaskIncrementTick>
 8005406:	4603      	mov	r3, r0
 8005408:	2b00      	cmp	r3, #0
 800540a:	d003      	beq.n	8005414 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800540c:	4b06      	ldr	r3, [pc, #24]	@ (8005428 <xPortSysTickHandler+0x40>)
 800540e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005412:	601a      	str	r2, [r3, #0]
 8005414:	2300      	movs	r3, #0
 8005416:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005418:	683b      	ldr	r3, [r7, #0]
 800541a:	f383 8811 	msr	BASEPRI, r3
}
 800541e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005420:	bf00      	nop
 8005422:	3708      	adds	r7, #8
 8005424:	46bd      	mov	sp, r7
 8005426:	bd80      	pop	{r7, pc}
 8005428:	e000ed04 	.word	0xe000ed04

0800542c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800542c:	b480      	push	{r7}
 800542e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005430:	4b0b      	ldr	r3, [pc, #44]	@ (8005460 <vPortSetupTimerInterrupt+0x34>)
 8005432:	2200      	movs	r2, #0
 8005434:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005436:	4b0b      	ldr	r3, [pc, #44]	@ (8005464 <vPortSetupTimerInterrupt+0x38>)
 8005438:	2200      	movs	r2, #0
 800543a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800543c:	4b0a      	ldr	r3, [pc, #40]	@ (8005468 <vPortSetupTimerInterrupt+0x3c>)
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	4a0a      	ldr	r2, [pc, #40]	@ (800546c <vPortSetupTimerInterrupt+0x40>)
 8005442:	fba2 2303 	umull	r2, r3, r2, r3
 8005446:	099b      	lsrs	r3, r3, #6
 8005448:	4a09      	ldr	r2, [pc, #36]	@ (8005470 <vPortSetupTimerInterrupt+0x44>)
 800544a:	3b01      	subs	r3, #1
 800544c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800544e:	4b04      	ldr	r3, [pc, #16]	@ (8005460 <vPortSetupTimerInterrupt+0x34>)
 8005450:	2207      	movs	r2, #7
 8005452:	601a      	str	r2, [r3, #0]
}
 8005454:	bf00      	nop
 8005456:	46bd      	mov	sp, r7
 8005458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800545c:	4770      	bx	lr
 800545e:	bf00      	nop
 8005460:	e000e010 	.word	0xe000e010
 8005464:	e000e018 	.word	0xe000e018
 8005468:	20000000 	.word	0x20000000
 800546c:	10624dd3 	.word	0x10624dd3
 8005470:	e000e014 	.word	0xe000e014

08005474 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005474:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8005484 <vPortEnableVFP+0x10>
 8005478:	6801      	ldr	r1, [r0, #0]
 800547a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800547e:	6001      	str	r1, [r0, #0]
 8005480:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005482:	bf00      	nop
 8005484:	e000ed88 	.word	0xe000ed88

08005488 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005488:	b480      	push	{r7}
 800548a:	b085      	sub	sp, #20
 800548c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800548e:	f3ef 8305 	mrs	r3, IPSR
 8005492:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	2b0f      	cmp	r3, #15
 8005498:	d915      	bls.n	80054c6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800549a:	4a18      	ldr	r2, [pc, #96]	@ (80054fc <vPortValidateInterruptPriority+0x74>)
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	4413      	add	r3, r2
 80054a0:	781b      	ldrb	r3, [r3, #0]
 80054a2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80054a4:	4b16      	ldr	r3, [pc, #88]	@ (8005500 <vPortValidateInterruptPriority+0x78>)
 80054a6:	781b      	ldrb	r3, [r3, #0]
 80054a8:	7afa      	ldrb	r2, [r7, #11]
 80054aa:	429a      	cmp	r2, r3
 80054ac:	d20b      	bcs.n	80054c6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 80054ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054b2:	f383 8811 	msr	BASEPRI, r3
 80054b6:	f3bf 8f6f 	isb	sy
 80054ba:	f3bf 8f4f 	dsb	sy
 80054be:	607b      	str	r3, [r7, #4]
}
 80054c0:	bf00      	nop
 80054c2:	bf00      	nop
 80054c4:	e7fd      	b.n	80054c2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80054c6:	4b0f      	ldr	r3, [pc, #60]	@ (8005504 <vPortValidateInterruptPriority+0x7c>)
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80054ce:	4b0e      	ldr	r3, [pc, #56]	@ (8005508 <vPortValidateInterruptPriority+0x80>)
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	429a      	cmp	r2, r3
 80054d4:	d90b      	bls.n	80054ee <vPortValidateInterruptPriority+0x66>
	__asm volatile
 80054d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054da:	f383 8811 	msr	BASEPRI, r3
 80054de:	f3bf 8f6f 	isb	sy
 80054e2:	f3bf 8f4f 	dsb	sy
 80054e6:	603b      	str	r3, [r7, #0]
}
 80054e8:	bf00      	nop
 80054ea:	bf00      	nop
 80054ec:	e7fd      	b.n	80054ea <vPortValidateInterruptPriority+0x62>
	}
 80054ee:	bf00      	nop
 80054f0:	3714      	adds	r7, #20
 80054f2:	46bd      	mov	sp, r7
 80054f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f8:	4770      	bx	lr
 80054fa:	bf00      	nop
 80054fc:	e000e3f0 	.word	0xe000e3f0
 8005500:	20000df0 	.word	0x20000df0
 8005504:	e000ed0c 	.word	0xe000ed0c
 8005508:	20000df4 	.word	0x20000df4

0800550c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800550c:	b580      	push	{r7, lr}
 800550e:	b08a      	sub	sp, #40	@ 0x28
 8005510:	af00      	add	r7, sp, #0
 8005512:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005514:	2300      	movs	r3, #0
 8005516:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005518:	f7fe fd82 	bl	8004020 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800551c:	4b5c      	ldr	r3, [pc, #368]	@ (8005690 <pvPortMalloc+0x184>)
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	2b00      	cmp	r3, #0
 8005522:	d101      	bne.n	8005528 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005524:	f000 f924 	bl	8005770 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005528:	4b5a      	ldr	r3, [pc, #360]	@ (8005694 <pvPortMalloc+0x188>)
 800552a:	681a      	ldr	r2, [r3, #0]
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	4013      	ands	r3, r2
 8005530:	2b00      	cmp	r3, #0
 8005532:	f040 8095 	bne.w	8005660 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	2b00      	cmp	r3, #0
 800553a:	d01e      	beq.n	800557a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800553c:	2208      	movs	r2, #8
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	4413      	add	r3, r2
 8005542:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	f003 0307 	and.w	r3, r3, #7
 800554a:	2b00      	cmp	r3, #0
 800554c:	d015      	beq.n	800557a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	f023 0307 	bic.w	r3, r3, #7
 8005554:	3308      	adds	r3, #8
 8005556:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	f003 0307 	and.w	r3, r3, #7
 800555e:	2b00      	cmp	r3, #0
 8005560:	d00b      	beq.n	800557a <pvPortMalloc+0x6e>
	__asm volatile
 8005562:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005566:	f383 8811 	msr	BASEPRI, r3
 800556a:	f3bf 8f6f 	isb	sy
 800556e:	f3bf 8f4f 	dsb	sy
 8005572:	617b      	str	r3, [r7, #20]
}
 8005574:	bf00      	nop
 8005576:	bf00      	nop
 8005578:	e7fd      	b.n	8005576 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	2b00      	cmp	r3, #0
 800557e:	d06f      	beq.n	8005660 <pvPortMalloc+0x154>
 8005580:	4b45      	ldr	r3, [pc, #276]	@ (8005698 <pvPortMalloc+0x18c>)
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	687a      	ldr	r2, [r7, #4]
 8005586:	429a      	cmp	r2, r3
 8005588:	d86a      	bhi.n	8005660 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800558a:	4b44      	ldr	r3, [pc, #272]	@ (800569c <pvPortMalloc+0x190>)
 800558c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800558e:	4b43      	ldr	r3, [pc, #268]	@ (800569c <pvPortMalloc+0x190>)
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005594:	e004      	b.n	80055a0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8005596:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005598:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800559a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80055a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055a2:	685b      	ldr	r3, [r3, #4]
 80055a4:	687a      	ldr	r2, [r7, #4]
 80055a6:	429a      	cmp	r2, r3
 80055a8:	d903      	bls.n	80055b2 <pvPortMalloc+0xa6>
 80055aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d1f1      	bne.n	8005596 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80055b2:	4b37      	ldr	r3, [pc, #220]	@ (8005690 <pvPortMalloc+0x184>)
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80055b8:	429a      	cmp	r2, r3
 80055ba:	d051      	beq.n	8005660 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80055bc:	6a3b      	ldr	r3, [r7, #32]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	2208      	movs	r2, #8
 80055c2:	4413      	add	r3, r2
 80055c4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80055c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055c8:	681a      	ldr	r2, [r3, #0]
 80055ca:	6a3b      	ldr	r3, [r7, #32]
 80055cc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80055ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055d0:	685a      	ldr	r2, [r3, #4]
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	1ad2      	subs	r2, r2, r3
 80055d6:	2308      	movs	r3, #8
 80055d8:	005b      	lsls	r3, r3, #1
 80055da:	429a      	cmp	r2, r3
 80055dc:	d920      	bls.n	8005620 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80055de:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	4413      	add	r3, r2
 80055e4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80055e6:	69bb      	ldr	r3, [r7, #24]
 80055e8:	f003 0307 	and.w	r3, r3, #7
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d00b      	beq.n	8005608 <pvPortMalloc+0xfc>
	__asm volatile
 80055f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80055f4:	f383 8811 	msr	BASEPRI, r3
 80055f8:	f3bf 8f6f 	isb	sy
 80055fc:	f3bf 8f4f 	dsb	sy
 8005600:	613b      	str	r3, [r7, #16]
}
 8005602:	bf00      	nop
 8005604:	bf00      	nop
 8005606:	e7fd      	b.n	8005604 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005608:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800560a:	685a      	ldr	r2, [r3, #4]
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	1ad2      	subs	r2, r2, r3
 8005610:	69bb      	ldr	r3, [r7, #24]
 8005612:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005614:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005616:	687a      	ldr	r2, [r7, #4]
 8005618:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800561a:	69b8      	ldr	r0, [r7, #24]
 800561c:	f000 f90a 	bl	8005834 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005620:	4b1d      	ldr	r3, [pc, #116]	@ (8005698 <pvPortMalloc+0x18c>)
 8005622:	681a      	ldr	r2, [r3, #0]
 8005624:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005626:	685b      	ldr	r3, [r3, #4]
 8005628:	1ad3      	subs	r3, r2, r3
 800562a:	4a1b      	ldr	r2, [pc, #108]	@ (8005698 <pvPortMalloc+0x18c>)
 800562c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800562e:	4b1a      	ldr	r3, [pc, #104]	@ (8005698 <pvPortMalloc+0x18c>)
 8005630:	681a      	ldr	r2, [r3, #0]
 8005632:	4b1b      	ldr	r3, [pc, #108]	@ (80056a0 <pvPortMalloc+0x194>)
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	429a      	cmp	r2, r3
 8005638:	d203      	bcs.n	8005642 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800563a:	4b17      	ldr	r3, [pc, #92]	@ (8005698 <pvPortMalloc+0x18c>)
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	4a18      	ldr	r2, [pc, #96]	@ (80056a0 <pvPortMalloc+0x194>)
 8005640:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005642:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005644:	685a      	ldr	r2, [r3, #4]
 8005646:	4b13      	ldr	r3, [pc, #76]	@ (8005694 <pvPortMalloc+0x188>)
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	431a      	orrs	r2, r3
 800564c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800564e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005650:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005652:	2200      	movs	r2, #0
 8005654:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8005656:	4b13      	ldr	r3, [pc, #76]	@ (80056a4 <pvPortMalloc+0x198>)
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	3301      	adds	r3, #1
 800565c:	4a11      	ldr	r2, [pc, #68]	@ (80056a4 <pvPortMalloc+0x198>)
 800565e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005660:	f7fe fcec 	bl	800403c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005664:	69fb      	ldr	r3, [r7, #28]
 8005666:	f003 0307 	and.w	r3, r3, #7
 800566a:	2b00      	cmp	r3, #0
 800566c:	d00b      	beq.n	8005686 <pvPortMalloc+0x17a>
	__asm volatile
 800566e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005672:	f383 8811 	msr	BASEPRI, r3
 8005676:	f3bf 8f6f 	isb	sy
 800567a:	f3bf 8f4f 	dsb	sy
 800567e:	60fb      	str	r3, [r7, #12]
}
 8005680:	bf00      	nop
 8005682:	bf00      	nop
 8005684:	e7fd      	b.n	8005682 <pvPortMalloc+0x176>
	return pvReturn;
 8005686:	69fb      	ldr	r3, [r7, #28]
}
 8005688:	4618      	mov	r0, r3
 800568a:	3728      	adds	r7, #40	@ 0x28
 800568c:	46bd      	mov	sp, r7
 800568e:	bd80      	pop	{r7, pc}
 8005690:	20004a00 	.word	0x20004a00
 8005694:	20004a14 	.word	0x20004a14
 8005698:	20004a04 	.word	0x20004a04
 800569c:	200049f8 	.word	0x200049f8
 80056a0:	20004a08 	.word	0x20004a08
 80056a4:	20004a0c 	.word	0x20004a0c

080056a8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80056a8:	b580      	push	{r7, lr}
 80056aa:	b086      	sub	sp, #24
 80056ac:	af00      	add	r7, sp, #0
 80056ae:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d04f      	beq.n	800575a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80056ba:	2308      	movs	r3, #8
 80056bc:	425b      	negs	r3, r3
 80056be:	697a      	ldr	r2, [r7, #20]
 80056c0:	4413      	add	r3, r2
 80056c2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80056c4:	697b      	ldr	r3, [r7, #20]
 80056c6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80056c8:	693b      	ldr	r3, [r7, #16]
 80056ca:	685a      	ldr	r2, [r3, #4]
 80056cc:	4b25      	ldr	r3, [pc, #148]	@ (8005764 <vPortFree+0xbc>)
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	4013      	ands	r3, r2
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d10b      	bne.n	80056ee <vPortFree+0x46>
	__asm volatile
 80056d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80056da:	f383 8811 	msr	BASEPRI, r3
 80056de:	f3bf 8f6f 	isb	sy
 80056e2:	f3bf 8f4f 	dsb	sy
 80056e6:	60fb      	str	r3, [r7, #12]
}
 80056e8:	bf00      	nop
 80056ea:	bf00      	nop
 80056ec:	e7fd      	b.n	80056ea <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80056ee:	693b      	ldr	r3, [r7, #16]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d00b      	beq.n	800570e <vPortFree+0x66>
	__asm volatile
 80056f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80056fa:	f383 8811 	msr	BASEPRI, r3
 80056fe:	f3bf 8f6f 	isb	sy
 8005702:	f3bf 8f4f 	dsb	sy
 8005706:	60bb      	str	r3, [r7, #8]
}
 8005708:	bf00      	nop
 800570a:	bf00      	nop
 800570c:	e7fd      	b.n	800570a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800570e:	693b      	ldr	r3, [r7, #16]
 8005710:	685a      	ldr	r2, [r3, #4]
 8005712:	4b14      	ldr	r3, [pc, #80]	@ (8005764 <vPortFree+0xbc>)
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	4013      	ands	r3, r2
 8005718:	2b00      	cmp	r3, #0
 800571a:	d01e      	beq.n	800575a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800571c:	693b      	ldr	r3, [r7, #16]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	2b00      	cmp	r3, #0
 8005722:	d11a      	bne.n	800575a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005724:	693b      	ldr	r3, [r7, #16]
 8005726:	685a      	ldr	r2, [r3, #4]
 8005728:	4b0e      	ldr	r3, [pc, #56]	@ (8005764 <vPortFree+0xbc>)
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	43db      	mvns	r3, r3
 800572e:	401a      	ands	r2, r3
 8005730:	693b      	ldr	r3, [r7, #16]
 8005732:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005734:	f7fe fc74 	bl	8004020 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005738:	693b      	ldr	r3, [r7, #16]
 800573a:	685a      	ldr	r2, [r3, #4]
 800573c:	4b0a      	ldr	r3, [pc, #40]	@ (8005768 <vPortFree+0xc0>)
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	4413      	add	r3, r2
 8005742:	4a09      	ldr	r2, [pc, #36]	@ (8005768 <vPortFree+0xc0>)
 8005744:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005746:	6938      	ldr	r0, [r7, #16]
 8005748:	f000 f874 	bl	8005834 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800574c:	4b07      	ldr	r3, [pc, #28]	@ (800576c <vPortFree+0xc4>)
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	3301      	adds	r3, #1
 8005752:	4a06      	ldr	r2, [pc, #24]	@ (800576c <vPortFree+0xc4>)
 8005754:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8005756:	f7fe fc71 	bl	800403c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800575a:	bf00      	nop
 800575c:	3718      	adds	r7, #24
 800575e:	46bd      	mov	sp, r7
 8005760:	bd80      	pop	{r7, pc}
 8005762:	bf00      	nop
 8005764:	20004a14 	.word	0x20004a14
 8005768:	20004a04 	.word	0x20004a04
 800576c:	20004a10 	.word	0x20004a10

08005770 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005770:	b480      	push	{r7}
 8005772:	b085      	sub	sp, #20
 8005774:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005776:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800577a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800577c:	4b27      	ldr	r3, [pc, #156]	@ (800581c <prvHeapInit+0xac>)
 800577e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	f003 0307 	and.w	r3, r3, #7
 8005786:	2b00      	cmp	r3, #0
 8005788:	d00c      	beq.n	80057a4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	3307      	adds	r3, #7
 800578e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	f023 0307 	bic.w	r3, r3, #7
 8005796:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005798:	68ba      	ldr	r2, [r7, #8]
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	1ad3      	subs	r3, r2, r3
 800579e:	4a1f      	ldr	r2, [pc, #124]	@ (800581c <prvHeapInit+0xac>)
 80057a0:	4413      	add	r3, r2
 80057a2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80057a8:	4a1d      	ldr	r2, [pc, #116]	@ (8005820 <prvHeapInit+0xb0>)
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80057ae:	4b1c      	ldr	r3, [pc, #112]	@ (8005820 <prvHeapInit+0xb0>)
 80057b0:	2200      	movs	r2, #0
 80057b2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	68ba      	ldr	r2, [r7, #8]
 80057b8:	4413      	add	r3, r2
 80057ba:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80057bc:	2208      	movs	r2, #8
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	1a9b      	subs	r3, r3, r2
 80057c2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	f023 0307 	bic.w	r3, r3, #7
 80057ca:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	4a15      	ldr	r2, [pc, #84]	@ (8005824 <prvHeapInit+0xb4>)
 80057d0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80057d2:	4b14      	ldr	r3, [pc, #80]	@ (8005824 <prvHeapInit+0xb4>)
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	2200      	movs	r2, #0
 80057d8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80057da:	4b12      	ldr	r3, [pc, #72]	@ (8005824 <prvHeapInit+0xb4>)
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	2200      	movs	r2, #0
 80057e0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80057e6:	683b      	ldr	r3, [r7, #0]
 80057e8:	68fa      	ldr	r2, [r7, #12]
 80057ea:	1ad2      	subs	r2, r2, r3
 80057ec:	683b      	ldr	r3, [r7, #0]
 80057ee:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80057f0:	4b0c      	ldr	r3, [pc, #48]	@ (8005824 <prvHeapInit+0xb4>)
 80057f2:	681a      	ldr	r2, [r3, #0]
 80057f4:	683b      	ldr	r3, [r7, #0]
 80057f6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80057f8:	683b      	ldr	r3, [r7, #0]
 80057fa:	685b      	ldr	r3, [r3, #4]
 80057fc:	4a0a      	ldr	r2, [pc, #40]	@ (8005828 <prvHeapInit+0xb8>)
 80057fe:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005800:	683b      	ldr	r3, [r7, #0]
 8005802:	685b      	ldr	r3, [r3, #4]
 8005804:	4a09      	ldr	r2, [pc, #36]	@ (800582c <prvHeapInit+0xbc>)
 8005806:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005808:	4b09      	ldr	r3, [pc, #36]	@ (8005830 <prvHeapInit+0xc0>)
 800580a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800580e:	601a      	str	r2, [r3, #0]
}
 8005810:	bf00      	nop
 8005812:	3714      	adds	r7, #20
 8005814:	46bd      	mov	sp, r7
 8005816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800581a:	4770      	bx	lr
 800581c:	20000df8 	.word	0x20000df8
 8005820:	200049f8 	.word	0x200049f8
 8005824:	20004a00 	.word	0x20004a00
 8005828:	20004a08 	.word	0x20004a08
 800582c:	20004a04 	.word	0x20004a04
 8005830:	20004a14 	.word	0x20004a14

08005834 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005834:	b480      	push	{r7}
 8005836:	b085      	sub	sp, #20
 8005838:	af00      	add	r7, sp, #0
 800583a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800583c:	4b28      	ldr	r3, [pc, #160]	@ (80058e0 <prvInsertBlockIntoFreeList+0xac>)
 800583e:	60fb      	str	r3, [r7, #12]
 8005840:	e002      	b.n	8005848 <prvInsertBlockIntoFreeList+0x14>
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	60fb      	str	r3, [r7, #12]
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	687a      	ldr	r2, [r7, #4]
 800584e:	429a      	cmp	r2, r3
 8005850:	d8f7      	bhi.n	8005842 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	685b      	ldr	r3, [r3, #4]
 800585a:	68ba      	ldr	r2, [r7, #8]
 800585c:	4413      	add	r3, r2
 800585e:	687a      	ldr	r2, [r7, #4]
 8005860:	429a      	cmp	r2, r3
 8005862:	d108      	bne.n	8005876 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	685a      	ldr	r2, [r3, #4]
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	685b      	ldr	r3, [r3, #4]
 800586c:	441a      	add	r2, r3
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	685b      	ldr	r3, [r3, #4]
 800587e:	68ba      	ldr	r2, [r7, #8]
 8005880:	441a      	add	r2, r3
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	429a      	cmp	r2, r3
 8005888:	d118      	bne.n	80058bc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	681a      	ldr	r2, [r3, #0]
 800588e:	4b15      	ldr	r3, [pc, #84]	@ (80058e4 <prvInsertBlockIntoFreeList+0xb0>)
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	429a      	cmp	r2, r3
 8005894:	d00d      	beq.n	80058b2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	685a      	ldr	r2, [r3, #4]
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	685b      	ldr	r3, [r3, #4]
 80058a0:	441a      	add	r2, r3
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	681a      	ldr	r2, [r3, #0]
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	601a      	str	r2, [r3, #0]
 80058b0:	e008      	b.n	80058c4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80058b2:	4b0c      	ldr	r3, [pc, #48]	@ (80058e4 <prvInsertBlockIntoFreeList+0xb0>)
 80058b4:	681a      	ldr	r2, [r3, #0]
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	601a      	str	r2, [r3, #0]
 80058ba:	e003      	b.n	80058c4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	681a      	ldr	r2, [r3, #0]
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80058c4:	68fa      	ldr	r2, [r7, #12]
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	429a      	cmp	r2, r3
 80058ca:	d002      	beq.n	80058d2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	687a      	ldr	r2, [r7, #4]
 80058d0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80058d2:	bf00      	nop
 80058d4:	3714      	adds	r7, #20
 80058d6:	46bd      	mov	sp, r7
 80058d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058dc:	4770      	bx	lr
 80058de:	bf00      	nop
 80058e0:	200049f8 	.word	0x200049f8
 80058e4:	20004a00 	.word	0x20004a00

080058e8 <memset>:
 80058e8:	4402      	add	r2, r0
 80058ea:	4603      	mov	r3, r0
 80058ec:	4293      	cmp	r3, r2
 80058ee:	d100      	bne.n	80058f2 <memset+0xa>
 80058f0:	4770      	bx	lr
 80058f2:	f803 1b01 	strb.w	r1, [r3], #1
 80058f6:	e7f9      	b.n	80058ec <memset+0x4>

080058f8 <__libc_init_array>:
 80058f8:	b570      	push	{r4, r5, r6, lr}
 80058fa:	4d0d      	ldr	r5, [pc, #52]	@ (8005930 <__libc_init_array+0x38>)
 80058fc:	4c0d      	ldr	r4, [pc, #52]	@ (8005934 <__libc_init_array+0x3c>)
 80058fe:	1b64      	subs	r4, r4, r5
 8005900:	10a4      	asrs	r4, r4, #2
 8005902:	2600      	movs	r6, #0
 8005904:	42a6      	cmp	r6, r4
 8005906:	d109      	bne.n	800591c <__libc_init_array+0x24>
 8005908:	4d0b      	ldr	r5, [pc, #44]	@ (8005938 <__libc_init_array+0x40>)
 800590a:	4c0c      	ldr	r4, [pc, #48]	@ (800593c <__libc_init_array+0x44>)
 800590c:	f000 f826 	bl	800595c <_init>
 8005910:	1b64      	subs	r4, r4, r5
 8005912:	10a4      	asrs	r4, r4, #2
 8005914:	2600      	movs	r6, #0
 8005916:	42a6      	cmp	r6, r4
 8005918:	d105      	bne.n	8005926 <__libc_init_array+0x2e>
 800591a:	bd70      	pop	{r4, r5, r6, pc}
 800591c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005920:	4798      	blx	r3
 8005922:	3601      	adds	r6, #1
 8005924:	e7ee      	b.n	8005904 <__libc_init_array+0xc>
 8005926:	f855 3b04 	ldr.w	r3, [r5], #4
 800592a:	4798      	blx	r3
 800592c:	3601      	adds	r6, #1
 800592e:	e7f2      	b.n	8005916 <__libc_init_array+0x1e>
 8005930:	08005a04 	.word	0x08005a04
 8005934:	08005a04 	.word	0x08005a04
 8005938:	08005a04 	.word	0x08005a04
 800593c:	08005a08 	.word	0x08005a08

08005940 <memcpy>:
 8005940:	440a      	add	r2, r1
 8005942:	4291      	cmp	r1, r2
 8005944:	f100 33ff 	add.w	r3, r0, #4294967295
 8005948:	d100      	bne.n	800594c <memcpy+0xc>
 800594a:	4770      	bx	lr
 800594c:	b510      	push	{r4, lr}
 800594e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005952:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005956:	4291      	cmp	r1, r2
 8005958:	d1f9      	bne.n	800594e <memcpy+0xe>
 800595a:	bd10      	pop	{r4, pc}

0800595c <_init>:
 800595c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800595e:	bf00      	nop
 8005960:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005962:	bc08      	pop	{r3}
 8005964:	469e      	mov	lr, r3
 8005966:	4770      	bx	lr

08005968 <_fini>:
 8005968:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800596a:	bf00      	nop
 800596c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800596e:	bc08      	pop	{r3}
 8005970:	469e      	mov	lr, r3
 8005972:	4770      	bx	lr
